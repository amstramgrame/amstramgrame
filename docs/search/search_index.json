{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Amstramgrame qu'est-ce que c'est ? ARTS & SCIENCES Un projet p\u00e9dagogique arts & sciences, r\u00e9unissant services et ressources \u00e0 destination de la communaut\u00e9 \u00e9ducative. Il permet une mise en application concr\u00e8te de concepts scientifiques parfois abstraits en utilisant la cr\u00e9ation musicale et la programmation informatique comme vecteurs. POUR QUI ? Un projet destin\u00e9 aux \u00e9l\u00e8ves de cycle primaire et secondaire, ainsi que leurs enseignants. Il place les sciences et l\u2019ing\u00e9nierie au c\u0153ur de la d\u00e9marche p\u00e9dagogique en les inscrivant dans le domaine de la cr\u00e9ation musicale et sonore. Les outils FAUST FAUST (Functional AUdio STream) est un langage de programmation, cr\u00e9\u00e9 et d\u00e9velopp\u00e9 \u00e0 Grame . Il permet de concevoir de mani\u00e8re simple des synth\u00e9tiseurs (instrument de musique \u00e9lectronique) et des effets sonores pour un grand nombre de plateformes. Il peut \u00eatre notamment utilis\u00e9 pour cr\u00e9er des application web et mobile pour la musique. LE GRAMOPHONE Le Gramophone est un dispositif audio sp\u00e9cialement con\u00e7u pour le projet Amstramgrame. Ses diff\u00e9rents capteurs et contr\u00f4leurs (ex. acc\u00e9l\u00e9rom\u00e8tre, gyroscope, capteur de lumi\u00e8re, etc.) le font r\u00e9agir aux gestes de l\u2019utilisateur. Sa batterie offrant environ cinq heures d\u2019autonomie et son haut-parleur puissant le rendent ind\u00e9pendant de tout ordinateur, le rapprochant ainsi des instruments de musique acoustiques traditionnels. SMARTFAUST SmartFaust est un concept d\u2019applications musicales pour smartphones d\u00e9velopp\u00e9 par le langage FAUST. Ces applications ont la particularit\u00e9 de faire uniquement appel aux gestes de l\u2019utilisateur et non pas \u00e0 un pianotage sur l\u2019\u00e9cran de l\u2019appareil. R\u00e9alis\u00e9es pour iOS et Android elles savent en outre exploiter les capteurs de mouvement de ces appareils ce qui permet d\u2019en faire de v\u00e9ritables instruments de musique. GAMELAN Ensemble d\u2019applications musicales pour smartphone s\u2019inspirant de la tradition musicale javanaise \u00e0 laquelle s\u2019ajoute des univers sonores \u00e9lectroniques. Les 7 applications, (Attackey, Baliphone, DroneLAN, Sequenceur, ShakerXY, Sinuso\u00efde, Atomicro) de la famille GameLan peuvent \u00eatre jou\u00e9es en solo ou en orchestre utilisant les mouvements du smartphone. Pas de pr\u00e9requis musical, seul les gestes feront de l\u2019utilisateur un musicien. Les partenaires GRAME Grame est un centre national de cr\u00e9ation musicale. Sa mission principale est de permettre la conception et la r\u00e9alisation d\u2019\u0153uvres musicales nouvelles, dans un contexte de transversalit\u00e9 des arts et de synergie arts - sciences. CANOP\u00c9 R\u00e9seau Canop\u00e9 est le r\u00e9seau de cr\u00e9ation et d\u2019accompagnement p\u00e9dagogiques plac\u00e9 sous la tutelle du minist\u00e8re de l\u2019\u00c9ducation nationale. Il \u00e9dite et diffuse des ressources p\u00e9dagogiques multi-formats r\u00e9pondant aux besoins de la communaut\u00e9 \u00e9ducative.","title":"Home"},{"location":"#amstramgrame-quest-ce-que-cest","text":"","title":"Amstramgrame qu'est-ce que c'est ?"},{"location":"#arts-sciences","text":"Un projet p\u00e9dagogique arts & sciences, r\u00e9unissant services et ressources \u00e0 destination de la communaut\u00e9 \u00e9ducative. Il permet une mise en application concr\u00e8te de concepts scientifiques parfois abstraits en utilisant la cr\u00e9ation musicale et la programmation informatique comme vecteurs.","title":"ARTS &amp; SCIENCES"},{"location":"#pour-qui","text":"Un projet destin\u00e9 aux \u00e9l\u00e8ves de cycle primaire et secondaire, ainsi que leurs enseignants. Il place les sciences et l\u2019ing\u00e9nierie au c\u0153ur de la d\u00e9marche p\u00e9dagogique en les inscrivant dans le domaine de la cr\u00e9ation musicale et sonore.","title":"POUR QUI ?"},{"location":"#les-outils","text":"","title":"Les outils"},{"location":"#faust","text":"FAUST (Functional AUdio STream) est un langage de programmation, cr\u00e9\u00e9 et d\u00e9velopp\u00e9 \u00e0 Grame . Il permet de concevoir de mani\u00e8re simple des synth\u00e9tiseurs (instrument de musique \u00e9lectronique) et des effets sonores pour un grand nombre de plateformes. Il peut \u00eatre notamment utilis\u00e9 pour cr\u00e9er des application web et mobile pour la musique.","title":"FAUST"},{"location":"#le-gramophone","text":"Le Gramophone est un dispositif audio sp\u00e9cialement con\u00e7u pour le projet Amstramgrame. Ses diff\u00e9rents capteurs et contr\u00f4leurs (ex. acc\u00e9l\u00e9rom\u00e8tre, gyroscope, capteur de lumi\u00e8re, etc.) le font r\u00e9agir aux gestes de l\u2019utilisateur. Sa batterie offrant environ cinq heures d\u2019autonomie et son haut-parleur puissant le rendent ind\u00e9pendant de tout ordinateur, le rapprochant ainsi des instruments de musique acoustiques traditionnels.","title":"LE GRAMOPHONE"},{"location":"#smartfaust","text":"SmartFaust est un concept d\u2019applications musicales pour smartphones d\u00e9velopp\u00e9 par le langage FAUST. Ces applications ont la particularit\u00e9 de faire uniquement appel aux gestes de l\u2019utilisateur et non pas \u00e0 un pianotage sur l\u2019\u00e9cran de l\u2019appareil. R\u00e9alis\u00e9es pour iOS et Android elles savent en outre exploiter les capteurs de mouvement de ces appareils ce qui permet d\u2019en faire de v\u00e9ritables instruments de musique.","title":"SMARTFAUST"},{"location":"#gamelan","text":"Ensemble d\u2019applications musicales pour smartphone s\u2019inspirant de la tradition musicale javanaise \u00e0 laquelle s\u2019ajoute des univers sonores \u00e9lectroniques. Les 7 applications, (Attackey, Baliphone, DroneLAN, Sequenceur, ShakerXY, Sinuso\u00efde, Atomicro) de la famille GameLan peuvent \u00eatre jou\u00e9es en solo ou en orchestre utilisant les mouvements du smartphone. Pas de pr\u00e9requis musical, seul les gestes feront de l\u2019utilisateur un musicien.","title":"GAMELAN"},{"location":"#les-partenaires","text":"","title":"Les partenaires"},{"location":"#grame","text":"Grame est un centre national de cr\u00e9ation musicale. Sa mission principale est de permettre la conception et la r\u00e9alisation d\u2019\u0153uvres musicales nouvelles, dans un contexte de transversalit\u00e9 des arts et de synergie arts - sciences.","title":"GRAME"},{"location":"#canope","text":"R\u00e9seau Canop\u00e9 est le r\u00e9seau de cr\u00e9ation et d\u2019accompagnement p\u00e9dagogiques plac\u00e9 sous la tutelle du minist\u00e8re de l\u2019\u00c9ducation nationale. Il \u00e9dite et diffuse des ressources p\u00e9dagogiques multi-formats r\u00e9pondant aux besoins de la communaut\u00e9 \u00e9ducative.","title":"CANOP\u00c9"},{"location":"about/","text":"\u00c0 propos","title":"\u00c0 propos"},{"location":"about/#a-propos","text":"","title":"\u00c0 propos"},{"location":"scenari/introduction/","text":"Introduction Vue d\u2019ensemble Le projet Amstramgrame a pour but de favoriser l\u2019apprentissage de concepts scientifiques li\u00e9s aux math\u00e9matiques, \u00e0 la physique et \u00e0 l\u2019informatique par des applications concr\u00e8tes dans des domaines artistiques comme la musique (ex. lutherie, composition et musique d\u2019ensemble), la danse (geste chor\u00e9graphi\u00e9), etc. Pour ce faire, Amstramgrame s\u2019appuie sur 3 outils : des sc\u00e9narii p\u00e9dagogiques courts ex\u00e9cutables en moins de 2h donnant des pistes de travail aux enseignants issus de plusieurs disciplines (ex. musique, math\u00e9matiques, physique, etc.) pr\u00e9sents sur le site web ; le langage de programmation Faust ( https://faust.grame.fr ) int\u00e9gr\u00e9 directement dans le site web ; le \" Gramophone \" - instrument de musique enti\u00e8rement programmable en Faust et qui permet de rendre tangible les concepts abstraits \u00e9tudi\u00e9s dans les diff\u00e9rents sc\u00e9narii pr\u00e9sent\u00e9s sur le site web. Des valises de 30 Gramophones sont mise \u00e0 disposition dans les \u00e9tablissements scolaires. Le projet n\u00e9cessite \u00e9galement l\u2019utilisation d\u2019ordinateurs sur place pour acc\u00e9der au site web d\u2019Amstramgrame et pour programmer les Gramophones. Les th\u00e8mes des sc\u00e9narios sont modulaires afin qu\u2019ils puissent \u00eatre abord\u00e9s dans le contexte de diff\u00e9rents cours (ex. maths, physique, techno, musique, etc.). Des id\u00e9es de projets pluridisciplinaires alliant les comp\u00e9tences acquises dans les diff\u00e9rents sc\u00e9narios p\u00e9dagogiques sont \u00e9galement propos\u00e9es sur le site web d\u2019Amstramgrame. L\u2019ensemble des programmes \u00e9tudi\u00e9s dans les sc\u00e9narii d\u2019AmstramGrame peuvent \u00e9galement \u00eatre transform\u00e9s en applications pour smartphone Android afin que les \u00e9tablissements n\u2019ayant pas acc\u00e8s au Gramophones puissent b\u00e9n\u00e9ficier d\u2019une alternative. C'est quoi le code ? La notion de programme informatique est au c\u0153ur de la r\u00e9volution num\u00e9rique. Nous interagissons au quotidien avec des programmes informatiques, que ce soit sous la forme d\u2019applications pour smartphones, d\u2019assistance dans les voitures, d\u2019objets connect\u00e9s ou encore de pages web. Or derri\u00e8re chaque programme informatique se cache un ensemble d\u2019instructions qui le constituent : le code. Il existe une grande vari\u00e9t\u00e9 de mani\u00e8res de programmer. Depuis FORTRAN, le premier langage de programmation de haut niveau cr\u00e9\u00e9 en 1954, leur nombre n\u2019a cess\u00e9 d\u2019augmenter, chacun d\u00e9veloppant sa syntaxe propre. Tandis que certains privil\u00e9gient une approche g\u00e9n\u00e9raliste, d\u2019autres sont con\u00e7us \u00e0 des fins sp\u00e9cifiques, comme par exemple les langages utilis\u00e9s en bourse et dans le domaine de la finance. Beaucoup de langages de programmation sont dit open-source, c\u2019est-\u00e0-dire dont le code est ouvert et libre d\u2019acc\u00e8s. Parmi les langages de programmation les plus populaires en 2020, on trouve : Java Javascript Python C C++ On discerne deux grandes familles de langages de programmation, aussi appel\u00e9es \"paradigmes\" : les langages fonctionnels et les langages imp\u00e9ratifs . La programmation fonctionnelle d\u2019abord, par laquelle on compose un probl\u00e8me sous la forme d\u2019un ensemble de fonctions math\u00e9matiques \u00e0 ex\u00e9cuter, traduites dans un second temps dans le langage de la machine (on parle alors de compilation). Elle facilite la compr\u00e9hension par du code court et expressif, et produit peu de bugs. L\u2019autre famille de programmation est dite imp\u00e9rative (ou proc\u00e9durale), et permet d\u2019\u00e9crire du code qui d\u00e9crit exactement et en d\u00e9tail les \u00e9tapes que l\u2019ordinateur doit effectuer pour atteindre l\u2019objectif, sans \u00e9tape de traduction dans le langage de la machine. Bien que la plupart des langages aient \u00e9t\u00e9 con\u00e7us pour prendre en charge un paradigme de programmation sp\u00e9cifique, de nombreux langages g\u00e9n\u00e9raux sont suffisamment flexibles pour passer de l\u2019un \u00e0 l\u2019autre. \u00c0 l\u2019instar de nombreux pays comme les \u00c9tats-Unis, l\u2019Angleterre ou encore l\u2019Allemagne, la France a choisi d\u2019inscrire le codage informatique dans les programmes scolaires d\u00e8s le coll\u00e8ge. Depuis la rentr\u00e9e 2016, les professeurs des \u00e9coles et enseignants doivent initier les \u00e9l\u00e8ves \u00e0 la programmation informatique, dans le but de d\u00e9velopper leur sens logique et leur capacit\u00e9 \u00e0 d\u00e9couper un probl\u00e8me en sous-probl\u00e8mes. Au lyc\u00e9e, en Enseignement du Num\u00e9rique et Sciences Informatiques de premi\u00e8re g\u00e9n\u00e9rale, le langage Python est utilis\u00e9. Ce langage est simple d\u2019usage, concis, libre et gratuit, largement r\u00e9pandu, riche de biblioth\u00e8ques adapt\u00e9es et b\u00e9n\u00e9ficie d\u2019une vaste communaut\u00e9 de d\u00e9veloppeurs. Pourtant, le projet Amstramgrame s\u2019appuie sur l\u2019utilisation de Faust. Pourquoi ? Pourquoi Faust ? Faust (Functional Audio Stream) est un langage de programmation fonctionnel d\u00e9velopp\u00e9 principalement \u00e0 Grame, et destin\u00e9 sp\u00e9cifiquement \u00e0 la cr\u00e9ation sonore. Il est n\u00e9 en r\u00e9ponse \u00e0 un besoin qui \u00e9merge d\u00e8s les ann\u00e9es 1950 : disposer d\u2019un \"vocabulaire\" adapt\u00e9 pour d\u00e9crire des proc\u00e9d\u00e9s musicaux de synth\u00e8se et de traitement du son dans toute leur complexit\u00e9. Faust propose pour ce fait une s\u00e9mantique simple et rigoureuse, et des techniques de compilation sophistiqu\u00e9es rendant accessible \u00e0 des artistes, des r\u00e9alisateurs en informatique musicale, etc., sans connaissance en programmation, des d\u00e9veloppements qui n\u00e9cessitaient traditionnellement l\u2019emploi de langages complexes comme C ou C++. Faust se diff\u00e9rencie en effet des autres langages musicaux par le fait qu\u2019il est compil\u00e9 (c\u2019est-\u00e0-dire traduit directement dans le langage de la machine) plut\u00f4t qu\u2019interpr\u00e9t\u00e9. Cela lui permet d\u2019exprimer des calculs fonctionnant \u00e0 l\u2019\u00e9chantillon pr\u00e8s pouvant fonctionner sur toutes sortes de plateformes. Ainsi, Faust offre une alternative plus simple et plus efficace \u00e0 Python pour, par exemple, programmer des plug-ins audios, des applications musicales, etc. Le projet Amstramgrame privil\u00e9gie donc Faust pour son efficacit\u00e9 dans la cr\u00e9ation sonore. Mais un apprenti codeur aura tout int\u00e9r\u00eat \u00e0 varier les langages de programmation qu\u2019il utilise selon ses projets, \u00e0 la mani\u00e8re des langues vivantes o\u00f9 il serait inconcevable, au si\u00e8cle o\u00f9 nous vivons, de vouloir s\u2019obstiner \u00e0 ne parler qu\u2019une seule langue. En outre, l\u2019apprentissage du code est une mani\u00e8re de passer du statut de simple utilisateur, limit\u00e9 par ce que le march\u00e9 lui propose, au statut de citoyen \u00e9clair\u00e9 et autonome dans ses usages, capable de r\u00e9pondre lui-m\u00eame \u00e0 ses besoins li\u00e9s \u00e0 l\u2019informatique. D\u00e9couvrez le Gramophone Le Gramophone a \u00e9t\u00e9 sp\u00e9cialement con\u00e7u dans le cadre du projet Amstramgrame. C\u2019est un instrument enti\u00e8rement programmable en Faust et compl\u00e8tement ind\u00e9pendant (il peut fonctionner sous batterie) La Gramophone abrite diff\u00e9rents types de capteurs tel que des acc\u00e9l\u00e9rom\u00e8tres, un gyroscope, un potentiom\u00e8tre, une boussole num\u00e9rique, un capteur de lumi\u00e8re, des capteurs de force, etc. Il est bas\u00e9 sur un microcontrolleur (ESP-32) et il b\u00e9n\u00e9ficie directement des derniers d\u00e9veloppements sur les syst\u00e8mes embarqu\u00e9s men\u00e9s par l\u2019\u00e9quipe de recherche de Grame . Pour \u00eatre programm\u00e9, le Gramophone doit \u00eatre connect\u00e9 \u00e0 un ordinateur via un c\u00e2ble USB qui sert \u00e9galement au chargement de sa batterie (de la m\u00eame mani\u00e8re qu\u2019un t\u00e9l\u00e9phone portable). Il est n\u00e9cessaire d\u2019 installer une application (compatible pour Windows, MacOS et Linux) sur les machines utilis\u00e9es pour programmer les Gramophones (ce qui devra donc \u00eatre pr\u00e9vu par les \u00e9tablissement d\u2019accueil). Plus d'informations sur les gramophones peuvent \u00eatre trouv\u00e9es sur la page correspondante sur ce site .","title":" Introduction "},{"location":"scenari/introduction/#introduction","text":"","title":"Introduction"},{"location":"scenari/introduction/#vue-densemble","text":"Le projet Amstramgrame a pour but de favoriser l\u2019apprentissage de concepts scientifiques li\u00e9s aux math\u00e9matiques, \u00e0 la physique et \u00e0 l\u2019informatique par des applications concr\u00e8tes dans des domaines artistiques comme la musique (ex. lutherie, composition et musique d\u2019ensemble), la danse (geste chor\u00e9graphi\u00e9), etc. Pour ce faire, Amstramgrame s\u2019appuie sur 3 outils : des sc\u00e9narii p\u00e9dagogiques courts ex\u00e9cutables en moins de 2h donnant des pistes de travail aux enseignants issus de plusieurs disciplines (ex. musique, math\u00e9matiques, physique, etc.) pr\u00e9sents sur le site web ; le langage de programmation Faust ( https://faust.grame.fr ) int\u00e9gr\u00e9 directement dans le site web ; le \" Gramophone \" - instrument de musique enti\u00e8rement programmable en Faust et qui permet de rendre tangible les concepts abstraits \u00e9tudi\u00e9s dans les diff\u00e9rents sc\u00e9narii pr\u00e9sent\u00e9s sur le site web. Des valises de 30 Gramophones sont mise \u00e0 disposition dans les \u00e9tablissements scolaires. Le projet n\u00e9cessite \u00e9galement l\u2019utilisation d\u2019ordinateurs sur place pour acc\u00e9der au site web d\u2019Amstramgrame et pour programmer les Gramophones. Les th\u00e8mes des sc\u00e9narios sont modulaires afin qu\u2019ils puissent \u00eatre abord\u00e9s dans le contexte de diff\u00e9rents cours (ex. maths, physique, techno, musique, etc.). Des id\u00e9es de projets pluridisciplinaires alliant les comp\u00e9tences acquises dans les diff\u00e9rents sc\u00e9narios p\u00e9dagogiques sont \u00e9galement propos\u00e9es sur le site web d\u2019Amstramgrame. L\u2019ensemble des programmes \u00e9tudi\u00e9s dans les sc\u00e9narii d\u2019AmstramGrame peuvent \u00e9galement \u00eatre transform\u00e9s en applications pour smartphone Android afin que les \u00e9tablissements n\u2019ayant pas acc\u00e8s au Gramophones puissent b\u00e9n\u00e9ficier d\u2019une alternative.","title":"Vue d\u2019ensemble"},{"location":"scenari/introduction/#cest-quoi-le-code","text":"La notion de programme informatique est au c\u0153ur de la r\u00e9volution num\u00e9rique. Nous interagissons au quotidien avec des programmes informatiques, que ce soit sous la forme d\u2019applications pour smartphones, d\u2019assistance dans les voitures, d\u2019objets connect\u00e9s ou encore de pages web. Or derri\u00e8re chaque programme informatique se cache un ensemble d\u2019instructions qui le constituent : le code. Il existe une grande vari\u00e9t\u00e9 de mani\u00e8res de programmer. Depuis FORTRAN, le premier langage de programmation de haut niveau cr\u00e9\u00e9 en 1954, leur nombre n\u2019a cess\u00e9 d\u2019augmenter, chacun d\u00e9veloppant sa syntaxe propre. Tandis que certains privil\u00e9gient une approche g\u00e9n\u00e9raliste, d\u2019autres sont con\u00e7us \u00e0 des fins sp\u00e9cifiques, comme par exemple les langages utilis\u00e9s en bourse et dans le domaine de la finance. Beaucoup de langages de programmation sont dit open-source, c\u2019est-\u00e0-dire dont le code est ouvert et libre d\u2019acc\u00e8s. Parmi les langages de programmation les plus populaires en 2020, on trouve : Java Javascript Python C C++ On discerne deux grandes familles de langages de programmation, aussi appel\u00e9es \"paradigmes\" : les langages fonctionnels et les langages imp\u00e9ratifs . La programmation fonctionnelle d\u2019abord, par laquelle on compose un probl\u00e8me sous la forme d\u2019un ensemble de fonctions math\u00e9matiques \u00e0 ex\u00e9cuter, traduites dans un second temps dans le langage de la machine (on parle alors de compilation). Elle facilite la compr\u00e9hension par du code court et expressif, et produit peu de bugs. L\u2019autre famille de programmation est dite imp\u00e9rative (ou proc\u00e9durale), et permet d\u2019\u00e9crire du code qui d\u00e9crit exactement et en d\u00e9tail les \u00e9tapes que l\u2019ordinateur doit effectuer pour atteindre l\u2019objectif, sans \u00e9tape de traduction dans le langage de la machine. Bien que la plupart des langages aient \u00e9t\u00e9 con\u00e7us pour prendre en charge un paradigme de programmation sp\u00e9cifique, de nombreux langages g\u00e9n\u00e9raux sont suffisamment flexibles pour passer de l\u2019un \u00e0 l\u2019autre. \u00c0 l\u2019instar de nombreux pays comme les \u00c9tats-Unis, l\u2019Angleterre ou encore l\u2019Allemagne, la France a choisi d\u2019inscrire le codage informatique dans les programmes scolaires d\u00e8s le coll\u00e8ge. Depuis la rentr\u00e9e 2016, les professeurs des \u00e9coles et enseignants doivent initier les \u00e9l\u00e8ves \u00e0 la programmation informatique, dans le but de d\u00e9velopper leur sens logique et leur capacit\u00e9 \u00e0 d\u00e9couper un probl\u00e8me en sous-probl\u00e8mes. Au lyc\u00e9e, en Enseignement du Num\u00e9rique et Sciences Informatiques de premi\u00e8re g\u00e9n\u00e9rale, le langage Python est utilis\u00e9. Ce langage est simple d\u2019usage, concis, libre et gratuit, largement r\u00e9pandu, riche de biblioth\u00e8ques adapt\u00e9es et b\u00e9n\u00e9ficie d\u2019une vaste communaut\u00e9 de d\u00e9veloppeurs. Pourtant, le projet Amstramgrame s\u2019appuie sur l\u2019utilisation de Faust. Pourquoi ?","title":"C'est quoi le code ?"},{"location":"scenari/introduction/#pourquoi-faust","text":"Faust (Functional Audio Stream) est un langage de programmation fonctionnel d\u00e9velopp\u00e9 principalement \u00e0 Grame, et destin\u00e9 sp\u00e9cifiquement \u00e0 la cr\u00e9ation sonore. Il est n\u00e9 en r\u00e9ponse \u00e0 un besoin qui \u00e9merge d\u00e8s les ann\u00e9es 1950 : disposer d\u2019un \"vocabulaire\" adapt\u00e9 pour d\u00e9crire des proc\u00e9d\u00e9s musicaux de synth\u00e8se et de traitement du son dans toute leur complexit\u00e9. Faust propose pour ce fait une s\u00e9mantique simple et rigoureuse, et des techniques de compilation sophistiqu\u00e9es rendant accessible \u00e0 des artistes, des r\u00e9alisateurs en informatique musicale, etc., sans connaissance en programmation, des d\u00e9veloppements qui n\u00e9cessitaient traditionnellement l\u2019emploi de langages complexes comme C ou C++. Faust se diff\u00e9rencie en effet des autres langages musicaux par le fait qu\u2019il est compil\u00e9 (c\u2019est-\u00e0-dire traduit directement dans le langage de la machine) plut\u00f4t qu\u2019interpr\u00e9t\u00e9. Cela lui permet d\u2019exprimer des calculs fonctionnant \u00e0 l\u2019\u00e9chantillon pr\u00e8s pouvant fonctionner sur toutes sortes de plateformes. Ainsi, Faust offre une alternative plus simple et plus efficace \u00e0 Python pour, par exemple, programmer des plug-ins audios, des applications musicales, etc. Le projet Amstramgrame privil\u00e9gie donc Faust pour son efficacit\u00e9 dans la cr\u00e9ation sonore. Mais un apprenti codeur aura tout int\u00e9r\u00eat \u00e0 varier les langages de programmation qu\u2019il utilise selon ses projets, \u00e0 la mani\u00e8re des langues vivantes o\u00f9 il serait inconcevable, au si\u00e8cle o\u00f9 nous vivons, de vouloir s\u2019obstiner \u00e0 ne parler qu\u2019une seule langue. En outre, l\u2019apprentissage du code est une mani\u00e8re de passer du statut de simple utilisateur, limit\u00e9 par ce que le march\u00e9 lui propose, au statut de citoyen \u00e9clair\u00e9 et autonome dans ses usages, capable de r\u00e9pondre lui-m\u00eame \u00e0 ses besoins li\u00e9s \u00e0 l\u2019informatique.","title":"Pourquoi Faust ?"},{"location":"scenari/introduction/#decouvrez-le-gramophone","text":"Le Gramophone a \u00e9t\u00e9 sp\u00e9cialement con\u00e7u dans le cadre du projet Amstramgrame. C\u2019est un instrument enti\u00e8rement programmable en Faust et compl\u00e8tement ind\u00e9pendant (il peut fonctionner sous batterie) La Gramophone abrite diff\u00e9rents types de capteurs tel que des acc\u00e9l\u00e9rom\u00e8tres, un gyroscope, un potentiom\u00e8tre, une boussole num\u00e9rique, un capteur de lumi\u00e8re, des capteurs de force, etc. Il est bas\u00e9 sur un microcontrolleur (ESP-32) et il b\u00e9n\u00e9ficie directement des derniers d\u00e9veloppements sur les syst\u00e8mes embarqu\u00e9s men\u00e9s par l\u2019\u00e9quipe de recherche de Grame . Pour \u00eatre programm\u00e9, le Gramophone doit \u00eatre connect\u00e9 \u00e0 un ordinateur via un c\u00e2ble USB qui sert \u00e9galement au chargement de sa batterie (de la m\u00eame mani\u00e8re qu\u2019un t\u00e9l\u00e9phone portable). Il est n\u00e9cessaire d\u2019 installer une application (compatible pour Windows, MacOS et Linux) sur les machines utilis\u00e9es pour programmer les Gramophones (ce qui devra donc \u00eatre pr\u00e9vu par les \u00e9tablissement d\u2019accueil). Plus d'informations sur les gramophones peuvent \u00eatre trouv\u00e9es sur la page correspondante sur ce site .","title":"D\u00e9couvrez le Gramophone"},{"location":"scenari/niveau1/","text":"Niveau 1 Tester son Gramophone import(\"stdfaust.lib\"); shake_x = hslider(\"X [acc: 0 0 -13 0 13][hidden:1]\", 0, -100, 100, 0.001); shake_y = hslider(\"Y [acc: 1 0 -14 0 14][hidden:1]\", 0, -100, 100, 0.001); well = +((abs(shake_x + shake_x')) > 100) ~ *(0.99) : min(1) : max(0); russianBell_ui = pm.russianBell(strikePosition,strikeCutoff,strikeSharpness,gain,gate) with { strikePosition = nentry(\"v:russianBell/[0]strikePosition\", 0,0,4,1); strikeCutoff = hslider(\"v:russianBell/[1]strikeCutOff\", 6500,20,20000,1); strikeSharpness = hslider(\"v:russianBell/[2]strikeSharpness\", 0.5,0.01,5,0.01); gain = hslider(\"v:russianBell/[3]gain [knob:1]\",1,0,1,0.01); gate = well; }; process = russianBell_ui <: _,_; \u00c9diter/ex\u00e9cuter le programme >> Prise en main du Gramophone/Smartphone Dur\u00e9e : 2h Niveau : D\u00e9butant Notions : Prise en main du Gramophone, contr\u00f4leur discrets vs. continus, captation de gestes, introduction \u00e0 la musique \u00e9lectronique exp\u00e9rimentale Disciplines li\u00e9es : Toutes - Introduction g\u00e9n\u00e9raliste Pr\u00e9requis : Aucun Le but principal de cette le\u00e7on est de prendre en main le gramophone/smartphone par l\u2019ex\u00e9cution d\u2019une courte pi\u00e8ce musicale utilisant un programme pr\u00e9-install\u00e9 sur le Gramophone (pas de programmation requise). Cette le\u00e7on doit \u00eatre avant tout ludique pour motiver les \u00e9l\u00e8ves \u00e0 faire les autres sc\u00e9narii d\u2019AmstramGrame par la suite. La le\u00e7on commence par l\u2019apprentissage d\u2019une pi\u00e8ce utilisant les diff\u00e9rents capteurs du Gramophone (capteur de lumi\u00e8re, capteur de pression, bouton, potentiom\u00e8tre, acc\u00e9l\u00e9rom\u00e8tre, gyroscope, etc.). Une fois cette pi\u00e8ce apprise et ma\u00eetris\u00e9e, les \u00e9l\u00e8ves \u00e9tudient lors d\u2019une seconde \u00e9tape le fonctionnement de chaque capteur. Par exemple, les diff\u00e9rences entre l\u2019acc\u00e9l\u00e9rom\u00e8tre et le gyroscope sont \u00e9tudi\u00e9es (ex. position relative vs. position absolue), les \u00e9l\u00e8ves observent les effets de la captation de position par rapport \u00e0 la d\u00e9tection d\u2019acc\u00e9l\u00e9rations, etc. On explique que les gramophones peuvent \u00eatre programm\u00e9s et que les diff\u00e9rents capteurs peuvent \u00eatre assign\u00e9s \u00e0 n\u2019importe quel param\u00e8tre d\u2019un g\u00e9n\u00e9rateur de son. Par exemple, un des capteurs de pression pourrait contr\u00f4ler la hauteur du son g\u00e9n\u00e9r\u00e9 dans le cas de la pi\u00e8ce \u00e9tudi\u00e9e lors de la premi\u00e8re \u00e9tape de cette le\u00e7on mais pourrait \u00eatre utilis\u00e9 pour contr\u00f4ler le volume d\u2019un son dans le cas d\u2019un autre programme. Cette le\u00e7on se termine en faisant une ouverture/pr\u00e9sentation de la suite des activit\u00e9s d\u2019AmstramGrame : musique \u00e9lectronique, programmation, physique, math\u00e9matique, etc. Les diff\u00e9rents types de sons et leurs param\u00e8tres Dur\u00e9e : 2h Niveau : D\u00e9butant Notions : Diff\u00e9rents types de sons, \u00e9chelle lin\u00e9aire vs. \u00e9chelle logarithmique, fr\u00e9quence/hauteur, gain/v\u00e9locit\u00e9 Disciplines li\u00e9es : Approche scientifique // physique, math\u00e9matique Pr\u00e9requis : Prise en main du gramophone/smartphone L\u2019objectif de cette le\u00e7on est de pr\u00e9senter les diff\u00e9rentes types de sons (ex. bruits, sons pures, harmoniques/inharmoniques) et leurs param\u00e8tres associ\u00e9s (ex. gain et fr\u00e9quence). Un programme pr\u00e9-install\u00e9 sur le gramophone permet d\u2019entendre ces diff\u00e9rents types de sons et de contr\u00f4ler leurs param\u00e8tres avec les diff\u00e9rents capteurs. Le code source de ce programme devrait pouvoir \u00eatre visualis\u00e9 par les \u00e9l\u00e8ves qui le souhaiteraient. Le concept de gain est introduit. On explique que le gain n\u2019est pas une valeur lin\u00e9aire et qu\u2019il faut plus que deux gramophones pour doubler le volume du son per\u00e7u, etc. Dans ce contexte l\u00e0, un mode du programme pr\u00e9-install\u00e9 sur le gramophone pourrait fonctionner en lin\u00e9aire et un autre en logarithmique pour entendre la diff\u00e9rence d\u2019un point de vue perceptuel. Le concept de fr\u00e9quence est introduit. On \u00e9tudie son lien avec la \"hauteur\" d\u2019un son et pourquoi pas avec les notes de musique. De la m\u00eame mani\u00e8re que pour le gain, on explique que ce param\u00e8tre n\u2019est pas lin\u00e9aire et qu\u2019il faut doubler la fr\u00e9quence d\u2019un son pour passer \u00e0 l\u2019octave sup\u00e9rieure. Le bruit n\u2019a qu\u2019un seul param\u00e8tre : son gain. Un son pur est produit par une onde sinuso\u00efdale. Il a deux param\u00e8tres : la fr\u00e9quence (hauteur) et le gain. Un son complex est compos\u00e9 de plusieurs sons pures (lien avec la le\u00e7on sur la synth\u00e8se additive). Dans le cas d\u2019un son harmonique, la fr\u00e9quence de chaque son pur est un multiple du son pur ayant la fr\u00e9quence la plus basse (fondamentale). Dans le cas d\u2019un son inharmonique, la fr\u00e9quence de chaque son pure ne d\u00e9pend pas de la fondamentale. Anatomie d\u2019un programme Faust Dur\u00e9e : 1h Niveau : D\u00e9butant Notions : Biblioth\u00e8que (programmation), variable, contr\u00f4le du gain par une multiplication, interface graphique Disciplines li\u00e9es : Approche scientifique // programmation Pr\u00e9requis : Aucun L\u2019objectif de cette le\u00e7on est d\u2019\u00e9tudier et de comprendre la structure de base d\u2019un programme Faust. Cette le\u00e7on utilise l\u2019\u00e9diteur en ligne de Faust (int\u00e9grer dans le site web d\u2019Amstramgrame) mais pas le gramophone Le programme \u00e9tudi\u00e9 pourrait prendre la forme suivante : import(\"stdfaust.lib\"); freq = hslider(\"freq\",440,50,3000,0.01); gain = hslider(\"gain\",1,0,1,0.01); gate = button(\"gate\"); process = os.sawtooth(freq)*gain*gate; \u00c9diter/ex\u00e9cuter le programme >> L\u2019ensemble des \u00e9l\u00e9ments de ce programme sont \u00e9tudi\u00e9s (ex. concepts de biblioth\u00e8que, de variable, d\u2019\u00e9l\u00e9ment d\u2019interface utilisateur, etc.). On explique que le gain d\u2019un signal peut \u00eatre contr\u00f4l\u00e9 en le multipliant par un nombre entre 0 et 1 (ce qui revient \u00e0 le diviser). Concept d'interrupteur : le son peut \u00eatre jou\u00e9 ou non en appuyant sur un bouton. En \u00e9tant en mesure de contr\u00f4ler la hauteur d\u2019un son, son gain et le fait qu\u2019il soit actif ou non permet de mettre en place un synth\u00e9tiseur complet. Cette le\u00e7on peut prendre la forme d\u2019un tutoriel pas \u00e0 pas. Une ouverture est faite \u00e0 la fin de la le\u00e7on pour expliquer que ce programme qui fonctionne dans le cas pr\u00e9sent dans le navigateur web peut \u00eatre export\u00e9 vers le gramophone et que les curseurs et boutons pr\u00e9sents dans l\u2019interface graphique pourraient-\u00eatre remplac\u00e9s/assign\u00e9s \u00e0 des capteurs du gramophone. Programmer le Gramophone Dur\u00e9e : 2h Niveau : D\u00e9butant Notions : Programmation du Gramophone Disciplines li\u00e9es : approche scientifique // programmation Pr\u00e9requis : Anatomie d\u2019un programme Faust L\u2019objectif de cette le\u00e7on est d\u2019apprendre \u00e0 programmer le gramophone et d\u2019associer certains de ses capteurs (capteurs \u201csimples\u201d comme le capteur de pression et de lumi\u00e8re, pas les acc\u00e9l\u00e9rom\u00e8tres) \u00e0 des param\u00e8tres du programme Faust. Le programme \u00e9tudi\u00e9 pourrait prendre la forme suivante (version adapt\u00e9e du programme pr\u00e9sent\u00e9 dans la le\u00e7on \u201cAnatomie d\u2019un programme Faust\u201d) : import(\"stdfaust.lib\"); freq = hslider(\"freq[gp:p0]\",440,50,3000,0.01); gain = hslider(\"gain[gp:p1]\",1,0,1,0.01); process = os.sawtooth(freq)*gain; L\u2019application d\u2019interface entre la machine utilis\u00e9e pour la programmation en Faust et le gramophone est \u00e9tudi\u00e9e. Les metadatas de capteurs (ex. [gp:p0] ) sont pr\u00e9sent\u00e9es et leur fonctionnement est d\u00e9crit. Des exercices autour du changement des mappings des param\u00e8tres (par exemple augmenter ou diminuer la gamme de la fr\u00e9quence) sont effectu\u00e9s. Diff\u00e9rents oscillateurs sont utilis\u00e9s pour produire diff\u00e9rents types de sons (ex. dent de scie, triangle, sinus, etc.) : lien avec la le\u00e7on \u201cIntroduction au design sonore\u201d. L'orchestre de bruit Dur\u00e9e : 12 s\u00e9ances Niveau : D\u00e9butant Notions : Orchestre de Gramophone, musique d\u2019ensemble, geste Disciplines li\u00e9es : Technologie - Art Plastique - Musique Pr\u00e9requis : Le lieu doit \u00eatre un laboratoire, une salle informatique oubien une salle d'orchestre Re\u0301sume\u0301 : En 1913, Luigi Russolo re\u0301dige l\u2019Art des bruits qui the\u0301orise l\u2019utilisation des bruits pour un usage musical. Il re\u0301alise notamment des partitions pour orchestre de bruit qui seront interpre\u0301te\u0301es par son intonarumori, un ensemble de machines me\u0301caniques aux sons e\u0301tranges. Dans cette se\u0301quence, nous proposons aux e\u0301le\u0300ves de construire leur propre orchestre de bruit en passant par la de\u0301couverte du mouvement futuriste, la programmation de l\u2019instrument a\u0300 l\u2019aide du Gramophone sur le site AmStramGrame et l\u2019e\u0301laboration d\u2019une partition graphique en groupe. De\u0301couverte du courant futuriste et de Luigi Russolo. \u00ab L\u2019arts des bruits \u00bb manifeste apparu en 1913 par Luigi Russolo. Dans ce manifeste Russolo y s soutient l\u2019ide\u0301e que l\u2019oreille humaine s\u2019est habitue\u0301 au bruit. Un bruit devient musique de\u0300s lors qu\u2019il est organise\u0301. Ressources : Vide\u0301o Intonarumori / Image partitions / photo historique / Peinture / Poe\u0300me futuristes / Extensions > Musiques concre\u0300tes, Musiques industrielles, Alva Noto, Aphex Twin, Merzbow... Initiation au Gramophone De\u0301couverte de l\u2019instruments (diffe\u0301rents capteurs, lien avec le geste) a\u0300 l\u2019aide de scripts pre\u0301-e\u0301crits. De\u0301couverte de la programmation (De\u0301couverte de l\u2019interface Web via le site AmStramGrame), de\u0301couverte des ressources Faust (librairies propose\u0301es, docs...) Construction de l\u2019instrument (4 se\u0301ances) : Cre\u0301ation d\u2019une machine a\u0300 bruit par se\u0301ance (ex : percussion, pe\u0301riodique, bruit blanc, boucle) A partir des diffe\u0301rents blocs de scripts Faust disponibles sur le site AmStramGram, les e\u0301le\u0300ves assembleront les diffe\u0301rentes parties de scripts (copier/coller) et les organiseront selon leur choix. Chaque e\u0301le\u0300ve pre\u0301sente le script de son Gramophone au groupe Jeu collectif en groupe des machines Codage partition (4 se\u0301ances) : Cre\u0301ation d\u2019une partition du Gramophone en s\u2019inspirant des partitions des codes d\u2019Hugo Piatti, etc... Cre\u0301ation d\u2019un vocabulaire commun (musical, gestuel associe\u0301 au gramophone,etc...) Construction du support (papiers, formats, couleurs, etc...) Re\u0301pe\u0301tition Orchestre x2 : Les dernie\u0300res se\u0301ances seront consacre\u0301es a\u0300 l\u2019e\u0301laboration de pupitres (rassemblement des instruments par famille de bruits). Re\u0301pe\u0301tition de l\u2019oeuvre (diffe\u0301rents mouvement, travail avec un chef d\u2019orchestre, nuances, postures,etc...) Restitution publique","title":" Niveau 1 "},{"location":"scenari/niveau1/#niveau-1","text":"","title":"Niveau 1"},{"location":"scenari/niveau1/#tester-son-gramophone","text":"import(\"stdfaust.lib\"); shake_x = hslider(\"X [acc: 0 0 -13 0 13][hidden:1]\", 0, -100, 100, 0.001); shake_y = hslider(\"Y [acc: 1 0 -14 0 14][hidden:1]\", 0, -100, 100, 0.001); well = +((abs(shake_x + shake_x')) > 100) ~ *(0.99) : min(1) : max(0); russianBell_ui = pm.russianBell(strikePosition,strikeCutoff,strikeSharpness,gain,gate) with { strikePosition = nentry(\"v:russianBell/[0]strikePosition\", 0,0,4,1); strikeCutoff = hslider(\"v:russianBell/[1]strikeCutOff\", 6500,20,20000,1); strikeSharpness = hslider(\"v:russianBell/[2]strikeSharpness\", 0.5,0.01,5,0.01); gain = hslider(\"v:russianBell/[3]gain [knob:1]\",1,0,1,0.01); gate = well; }; process = russianBell_ui <: _,_; \u00c9diter/ex\u00e9cuter le programme >>","title":"Tester son Gramophone"},{"location":"scenari/niveau1/#prise-en-main-du-gramophonesmartphone","text":"Dur\u00e9e : 2h Niveau : D\u00e9butant Notions : Prise en main du Gramophone, contr\u00f4leur discrets vs. continus, captation de gestes, introduction \u00e0 la musique \u00e9lectronique exp\u00e9rimentale Disciplines li\u00e9es : Toutes - Introduction g\u00e9n\u00e9raliste Pr\u00e9requis : Aucun Le but principal de cette le\u00e7on est de prendre en main le gramophone/smartphone par l\u2019ex\u00e9cution d\u2019une courte pi\u00e8ce musicale utilisant un programme pr\u00e9-install\u00e9 sur le Gramophone (pas de programmation requise). Cette le\u00e7on doit \u00eatre avant tout ludique pour motiver les \u00e9l\u00e8ves \u00e0 faire les autres sc\u00e9narii d\u2019AmstramGrame par la suite. La le\u00e7on commence par l\u2019apprentissage d\u2019une pi\u00e8ce utilisant les diff\u00e9rents capteurs du Gramophone (capteur de lumi\u00e8re, capteur de pression, bouton, potentiom\u00e8tre, acc\u00e9l\u00e9rom\u00e8tre, gyroscope, etc.). Une fois cette pi\u00e8ce apprise et ma\u00eetris\u00e9e, les \u00e9l\u00e8ves \u00e9tudient lors d\u2019une seconde \u00e9tape le fonctionnement de chaque capteur. Par exemple, les diff\u00e9rences entre l\u2019acc\u00e9l\u00e9rom\u00e8tre et le gyroscope sont \u00e9tudi\u00e9es (ex. position relative vs. position absolue), les \u00e9l\u00e8ves observent les effets de la captation de position par rapport \u00e0 la d\u00e9tection d\u2019acc\u00e9l\u00e9rations, etc. On explique que les gramophones peuvent \u00eatre programm\u00e9s et que les diff\u00e9rents capteurs peuvent \u00eatre assign\u00e9s \u00e0 n\u2019importe quel param\u00e8tre d\u2019un g\u00e9n\u00e9rateur de son. Par exemple, un des capteurs de pression pourrait contr\u00f4ler la hauteur du son g\u00e9n\u00e9r\u00e9 dans le cas de la pi\u00e8ce \u00e9tudi\u00e9e lors de la premi\u00e8re \u00e9tape de cette le\u00e7on mais pourrait \u00eatre utilis\u00e9 pour contr\u00f4ler le volume d\u2019un son dans le cas d\u2019un autre programme. Cette le\u00e7on se termine en faisant une ouverture/pr\u00e9sentation de la suite des activit\u00e9s d\u2019AmstramGrame : musique \u00e9lectronique, programmation, physique, math\u00e9matique, etc.","title":"Prise en main du Gramophone/Smartphone"},{"location":"scenari/niveau1/#les-differents-types-de-sons-et-leurs-parametres","text":"Dur\u00e9e : 2h Niveau : D\u00e9butant Notions : Diff\u00e9rents types de sons, \u00e9chelle lin\u00e9aire vs. \u00e9chelle logarithmique, fr\u00e9quence/hauteur, gain/v\u00e9locit\u00e9 Disciplines li\u00e9es : Approche scientifique // physique, math\u00e9matique Pr\u00e9requis : Prise en main du gramophone/smartphone L\u2019objectif de cette le\u00e7on est de pr\u00e9senter les diff\u00e9rentes types de sons (ex. bruits, sons pures, harmoniques/inharmoniques) et leurs param\u00e8tres associ\u00e9s (ex. gain et fr\u00e9quence). Un programme pr\u00e9-install\u00e9 sur le gramophone permet d\u2019entendre ces diff\u00e9rents types de sons et de contr\u00f4ler leurs param\u00e8tres avec les diff\u00e9rents capteurs. Le code source de ce programme devrait pouvoir \u00eatre visualis\u00e9 par les \u00e9l\u00e8ves qui le souhaiteraient. Le concept de gain est introduit. On explique que le gain n\u2019est pas une valeur lin\u00e9aire et qu\u2019il faut plus que deux gramophones pour doubler le volume du son per\u00e7u, etc. Dans ce contexte l\u00e0, un mode du programme pr\u00e9-install\u00e9 sur le gramophone pourrait fonctionner en lin\u00e9aire et un autre en logarithmique pour entendre la diff\u00e9rence d\u2019un point de vue perceptuel. Le concept de fr\u00e9quence est introduit. On \u00e9tudie son lien avec la \"hauteur\" d\u2019un son et pourquoi pas avec les notes de musique. De la m\u00eame mani\u00e8re que pour le gain, on explique que ce param\u00e8tre n\u2019est pas lin\u00e9aire et qu\u2019il faut doubler la fr\u00e9quence d\u2019un son pour passer \u00e0 l\u2019octave sup\u00e9rieure. Le bruit n\u2019a qu\u2019un seul param\u00e8tre : son gain. Un son pur est produit par une onde sinuso\u00efdale. Il a deux param\u00e8tres : la fr\u00e9quence (hauteur) et le gain. Un son complex est compos\u00e9 de plusieurs sons pures (lien avec la le\u00e7on sur la synth\u00e8se additive). Dans le cas d\u2019un son harmonique, la fr\u00e9quence de chaque son pur est un multiple du son pur ayant la fr\u00e9quence la plus basse (fondamentale). Dans le cas d\u2019un son inharmonique, la fr\u00e9quence de chaque son pure ne d\u00e9pend pas de la fondamentale.","title":"Les diff\u00e9rents types de sons et leurs param\u00e8tres"},{"location":"scenari/niveau1/#anatomie-dun-programme-faust","text":"Dur\u00e9e : 1h Niveau : D\u00e9butant Notions : Biblioth\u00e8que (programmation), variable, contr\u00f4le du gain par une multiplication, interface graphique Disciplines li\u00e9es : Approche scientifique // programmation Pr\u00e9requis : Aucun L\u2019objectif de cette le\u00e7on est d\u2019\u00e9tudier et de comprendre la structure de base d\u2019un programme Faust. Cette le\u00e7on utilise l\u2019\u00e9diteur en ligne de Faust (int\u00e9grer dans le site web d\u2019Amstramgrame) mais pas le gramophone Le programme \u00e9tudi\u00e9 pourrait prendre la forme suivante : import(\"stdfaust.lib\"); freq = hslider(\"freq\",440,50,3000,0.01); gain = hslider(\"gain\",1,0,1,0.01); gate = button(\"gate\"); process = os.sawtooth(freq)*gain*gate; \u00c9diter/ex\u00e9cuter le programme >> L\u2019ensemble des \u00e9l\u00e9ments de ce programme sont \u00e9tudi\u00e9s (ex. concepts de biblioth\u00e8que, de variable, d\u2019\u00e9l\u00e9ment d\u2019interface utilisateur, etc.). On explique que le gain d\u2019un signal peut \u00eatre contr\u00f4l\u00e9 en le multipliant par un nombre entre 0 et 1 (ce qui revient \u00e0 le diviser). Concept d'interrupteur : le son peut \u00eatre jou\u00e9 ou non en appuyant sur un bouton. En \u00e9tant en mesure de contr\u00f4ler la hauteur d\u2019un son, son gain et le fait qu\u2019il soit actif ou non permet de mettre en place un synth\u00e9tiseur complet. Cette le\u00e7on peut prendre la forme d\u2019un tutoriel pas \u00e0 pas. Une ouverture est faite \u00e0 la fin de la le\u00e7on pour expliquer que ce programme qui fonctionne dans le cas pr\u00e9sent dans le navigateur web peut \u00eatre export\u00e9 vers le gramophone et que les curseurs et boutons pr\u00e9sents dans l\u2019interface graphique pourraient-\u00eatre remplac\u00e9s/assign\u00e9s \u00e0 des capteurs du gramophone.","title":"Anatomie d\u2019un programme Faust"},{"location":"scenari/niveau1/#programmer-le-gramophone","text":"Dur\u00e9e : 2h Niveau : D\u00e9butant Notions : Programmation du Gramophone Disciplines li\u00e9es : approche scientifique // programmation Pr\u00e9requis : Anatomie d\u2019un programme Faust L\u2019objectif de cette le\u00e7on est d\u2019apprendre \u00e0 programmer le gramophone et d\u2019associer certains de ses capteurs (capteurs \u201csimples\u201d comme le capteur de pression et de lumi\u00e8re, pas les acc\u00e9l\u00e9rom\u00e8tres) \u00e0 des param\u00e8tres du programme Faust. Le programme \u00e9tudi\u00e9 pourrait prendre la forme suivante (version adapt\u00e9e du programme pr\u00e9sent\u00e9 dans la le\u00e7on \u201cAnatomie d\u2019un programme Faust\u201d) : import(\"stdfaust.lib\"); freq = hslider(\"freq[gp:p0]\",440,50,3000,0.01); gain = hslider(\"gain[gp:p1]\",1,0,1,0.01); process = os.sawtooth(freq)*gain; L\u2019application d\u2019interface entre la machine utilis\u00e9e pour la programmation en Faust et le gramophone est \u00e9tudi\u00e9e. Les metadatas de capteurs (ex. [gp:p0] ) sont pr\u00e9sent\u00e9es et leur fonctionnement est d\u00e9crit. Des exercices autour du changement des mappings des param\u00e8tres (par exemple augmenter ou diminuer la gamme de la fr\u00e9quence) sont effectu\u00e9s. Diff\u00e9rents oscillateurs sont utilis\u00e9s pour produire diff\u00e9rents types de sons (ex. dent de scie, triangle, sinus, etc.) : lien avec la le\u00e7on \u201cIntroduction au design sonore\u201d.","title":"Programmer le Gramophone"},{"location":"tools/gramophone/","text":"Le Gramophone TODO","title":" Le gramophone "},{"location":"tools/gramophone/#le-gramophone","text":"TODO","title":"Le Gramophone"}]}
{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"AmStramGrame qu'est-ce que c'est ? ARTS & SCIENCES Un projet p\u00e9dagogique arts & sciences, r\u00e9unissant services et ressources \u00e0 destination de la communaut\u00e9 \u00e9ducative. Il permet une mise en application concr\u00e8te de concepts scientifiques parfois abstraits en utilisant la cr\u00e9ation musicale et la programmation informatique comme vecteurs. POUR QUI ? Un projet destin\u00e9 aux \u00e9l\u00e8ves de cycle primaire et secondaire, ainsi qu'\u00e0 leurs enseignants. Il place les sciences et l\u2019ing\u00e9nierie au c\u0153ur de la d\u00e9marche p\u00e9dagogique en les inscrivant dans le domaine de la cr\u00e9ation musicale et sonore. Les outils FAUST Faust (Functional AUdio STream) est un langage de programmation, cr\u00e9\u00e9 et d\u00e9velopp\u00e9 \u00e0 Grame . Il permet de concevoir de mani\u00e8re simple des synth\u00e9tiseurs (instrument de musique \u00e9lectronique) et des effets sonores pour un grand nombre de plateformes. Il peut \u00eatre notamment utilis\u00e9 pour cr\u00e9er des application web et mobile pour la musique. LE GRAMOPHONE Le Gramophone est un dispositif audio/instrument de musique sp\u00e9cialement con\u00e7u pour le projet Amstramgrame. Ses diff\u00e9rents capteurs et contr\u00f4leurs (ex. acc\u00e9l\u00e9rom\u00e8tre, gyroscope, capteur de lumi\u00e8re, etc.) le font r\u00e9agir aux gestes de l\u2019utilisateur. Sa batterie offrant environ cinq heures d\u2019autonomie et son haut-parleur puissant le rendent ind\u00e9pendant de tout ordinateur, le rapprochant ainsi des instruments de musique acoustiques traditionnels. LE FAUST WEB IDE Le Faust Web IDE est un outil en ligne permettant d'\u00e9crire des programmes Faust, de les tester directement dans le navigateur web, puis de les exporter sur le Gramophone via l'application GramoLoader . Une version simplifi\u00e9e du Faust Web IDE a \u00e9t\u00e9 cr\u00e9\u00e9e dans le cadre d'AmStramGrame pour faciliter son utilisation par un public de novices en programmation. LE FAUST PLAYGROUND Le Faust Playground est un outil en ligne permettant d'assembler des programmes \u00e9crits en Faust de mani\u00e8re simple avec une interface graphique. Il peut notamment \u00eatre utilis\u00e9 pour programmer le Gramophone, des smartphones, etc. GAMELAN Ensemble d\u2019applications musicales pour smartphone s\u2019inspirant de la tradition musicale javanaise \u00e0 laquelle s\u2019ajoute des univers sonores \u00e9lectroniques. Les 7 applications, (Attackey, Baliphone, DroneLAN, Sequenceur, ShakerXY, Sinuso\u00efde, Atomicro) de la famille GameLan peuvent \u00eatre jou\u00e9es en solo ou en orchestre utilisant les mouvements du smartphone. Pas de pr\u00e9requis musical, seul les gestes feront de l\u2019utilisateur un musicien. Commencer \u00e0 coder ! Pour s'approprier l'environnement AmStramGrame, nous conseillons de lire ces diff\u00e9rentes sections du site dans l'ordre suivant : 1- Pr\u00e9sentation du Gramophone 2- Installer l'application GramoLoader 3- D\u00e9couverte du Faust Web IDE 4- Programmer le Gramophone 5- Hello World : mon premier programme Faust 6- Hello World sur le Gramophone Un collaboration entre GRAME-CNCM et Canop\u00e9 GRAME Grame est un centre national de cr\u00e9ation musicale. Sa mission principale est de permettre la conception et la r\u00e9alisation d\u2019\u0153uvres musicales nouvelles, dans un contexte de transversalit\u00e9 des arts et de synergie arts - sciences. CANOP\u00c9 R\u00e9seau Canop\u00e9 est le r\u00e9seau de cr\u00e9ation et d\u2019accompagnement p\u00e9dagogiques plac\u00e9 sous la tutelle du minist\u00e8re de l\u2019\u00c9ducation nationale. Il \u00e9dite et diffuse des ressources p\u00e9dagogiques multi-formats r\u00e9pondant aux besoins de la communaut\u00e9 \u00e9ducative. M\u00c9C\u00c8NES ET PARTENAIRES PUBLICS","title":"Home"},{"location":"#amstramgrame-quest-ce-que-cest","text":"","title":"AmStramGrame qu'est-ce que c'est ?"},{"location":"#arts-sciences","text":"Un projet p\u00e9dagogique arts & sciences, r\u00e9unissant services et ressources \u00e0 destination de la communaut\u00e9 \u00e9ducative. Il permet une mise en application concr\u00e8te de concepts scientifiques parfois abstraits en utilisant la cr\u00e9ation musicale et la programmation informatique comme vecteurs.","title":"ARTS &amp; SCIENCES"},{"location":"#pour-qui","text":"Un projet destin\u00e9 aux \u00e9l\u00e8ves de cycle primaire et secondaire, ainsi qu'\u00e0 leurs enseignants. Il place les sciences et l\u2019ing\u00e9nierie au c\u0153ur de la d\u00e9marche p\u00e9dagogique en les inscrivant dans le domaine de la cr\u00e9ation musicale et sonore.","title":"POUR QUI ?"},{"location":"#les-outils","text":"","title":"Les outils"},{"location":"#faust","text":"Faust (Functional AUdio STream) est un langage de programmation, cr\u00e9\u00e9 et d\u00e9velopp\u00e9 \u00e0 Grame . Il permet de concevoir de mani\u00e8re simple des synth\u00e9tiseurs (instrument de musique \u00e9lectronique) et des effets sonores pour un grand nombre de plateformes. Il peut \u00eatre notamment utilis\u00e9 pour cr\u00e9er des application web et mobile pour la musique.","title":"FAUST"},{"location":"#le-gramophone","text":"Le Gramophone est un dispositif audio/instrument de musique sp\u00e9cialement con\u00e7u pour le projet Amstramgrame. Ses diff\u00e9rents capteurs et contr\u00f4leurs (ex. acc\u00e9l\u00e9rom\u00e8tre, gyroscope, capteur de lumi\u00e8re, etc.) le font r\u00e9agir aux gestes de l\u2019utilisateur. Sa batterie offrant environ cinq heures d\u2019autonomie et son haut-parleur puissant le rendent ind\u00e9pendant de tout ordinateur, le rapprochant ainsi des instruments de musique acoustiques traditionnels.","title":"LE GRAMOPHONE"},{"location":"#le-faust-web-ide","text":"Le Faust Web IDE est un outil en ligne permettant d'\u00e9crire des programmes Faust, de les tester directement dans le navigateur web, puis de les exporter sur le Gramophone via l'application GramoLoader . Une version simplifi\u00e9e du Faust Web IDE a \u00e9t\u00e9 cr\u00e9\u00e9e dans le cadre d'AmStramGrame pour faciliter son utilisation par un public de novices en programmation.","title":"LE FAUST WEB IDE"},{"location":"#le-faust-playground","text":"Le Faust Playground est un outil en ligne permettant d'assembler des programmes \u00e9crits en Faust de mani\u00e8re simple avec une interface graphique. Il peut notamment \u00eatre utilis\u00e9 pour programmer le Gramophone, des smartphones, etc.","title":"LE FAUST PLAYGROUND"},{"location":"#gamelan","text":"Ensemble d\u2019applications musicales pour smartphone s\u2019inspirant de la tradition musicale javanaise \u00e0 laquelle s\u2019ajoute des univers sonores \u00e9lectroniques. Les 7 applications, (Attackey, Baliphone, DroneLAN, Sequenceur, ShakerXY, Sinuso\u00efde, Atomicro) de la famille GameLan peuvent \u00eatre jou\u00e9es en solo ou en orchestre utilisant les mouvements du smartphone. Pas de pr\u00e9requis musical, seul les gestes feront de l\u2019utilisateur un musicien.","title":"GAMELAN"},{"location":"#commencer-a-coder","text":"Pour s'approprier l'environnement AmStramGrame, nous conseillons de lire ces diff\u00e9rentes sections du site dans l'ordre suivant : 1- Pr\u00e9sentation du Gramophone 2- Installer l'application GramoLoader 3- D\u00e9couverte du Faust Web IDE 4- Programmer le Gramophone 5- Hello World : mon premier programme Faust 6- Hello World sur le Gramophone","title":"Commencer \u00e0 coder !"},{"location":"#un-collaboration-entre-grame-cncm-et-canope","text":"","title":"Un collaboration entre GRAME-CNCM et Canop\u00e9"},{"location":"#grame","text":"Grame est un centre national de cr\u00e9ation musicale. Sa mission principale est de permettre la conception et la r\u00e9alisation d\u2019\u0153uvres musicales nouvelles, dans un contexte de transversalit\u00e9 des arts et de synergie arts - sciences.","title":"GRAME"},{"location":"#canope","text":"R\u00e9seau Canop\u00e9 est le r\u00e9seau de cr\u00e9ation et d\u2019accompagnement p\u00e9dagogiques plac\u00e9 sous la tutelle du minist\u00e8re de l\u2019\u00c9ducation nationale. Il \u00e9dite et diffuse des ressources p\u00e9dagogiques multi-formats r\u00e9pondant aux besoins de la communaut\u00e9 \u00e9ducative.","title":"CANOP\u00c9"},{"location":"#mecenes-et-partenaires-publics","text":"","title":"M\u00c9C\u00c8NES ET PARTENAIRES PUBLICS"},{"location":"about/","text":"\u00c0 propos Imagin\u00e9 par Grame et R\u00e9seau Canop\u00e9 , AmStramGrame est un projet p\u00e9dagogique arts & sciences r\u00e9unissant ateliers et outils \u00e0 destination de la communaut\u00e9 \u00e9ducative permettant une mise en application concr\u00e8te de concepts scientifiques parfois abstraits en utilisant la cr\u00e9ation sonore et la programmation informatique comme vecteurs. Le projet s'appuie sur le langage de programmation Faust cr\u00e9\u00e9 et d\u00e9velopp\u00e9 par Grame depuis 15 ans et reconnu comme un standard dans le domaine du traitement du signal en temps r\u00e9el pour l'audio. Ainsi le projet Am Stram Grame comprend : Une plateforme web (ce site, en occurrence) int\u00e9grant un espace cr\u00e9atif de programmation informatique pour apprendre \u00e0 construire son propre instrument de musique en ligne, des scenarii p\u00e9dagogiques t\u00e9l\u00e9chargeables, des partitions pr\u00eates-\u00e0-l'emploi et une offre de formation \u00e0 destination des enseignants (\u00c9ducation nationale, \u00e9coles de musiques, conservatoires, etc.). Des mallettes d'exp\u00e9rimentation contenant des Gramophones permettant de rendre tangibles les param\u00e8tres virtuels d\u2019un programme informatique sur la synth\u00e8se de son. Des ateliers avec des artistes pluridisciplinaires. Le public Projet adapt\u00e9 \u00e0 toutes les disciplines (ex. math\u00e9matiques, physique, technologie, musique, fran\u00e7ais, EPS, etc.), \u00e0 tous les niveaux d'\u00e2ge (du cycle primaire au secondaire) et accessible aussi bien aux \u00e9l\u00e8ves inscrits dans un parcours d'enseignement musical, qu'\u00e0 ceux sans aucun enseignement artistique. Les ateliers En classe, les ateliers sont men\u00e9s conjointement par un m\u00e9diateur p\u00e9dagogique Canop\u00e9 et un artiste/scientifique Grame. Ils sont bas\u00e9s sur des sc\u00e9narii p\u00e9dagogiques courts et modulables, pr\u00e9alablement \u00e9labor\u00e9s par les partenaires en lien avec les programmes scolaires. Chaque sc\u00e9nario a une approche soit artistique, soit scientifique, soit les deux. Le projet n\u00e9cessite l'utilisation d'ordinateurs pour acc\u00e9der au site web AmStramGrame, qui permet de construire des instruments de musique en ligne, avec quelques lignes de code, et de programmer les gramophones/smartphones. Les \u00e9l\u00e8ves exp\u00e9rimentent ensuite le contr\u00f4le gestuel de leurs instruments et imaginent des situations (performances musicales ou dans\u00e9es, installations) en lien avec la lutherie num\u00e9rique cr\u00e9\u00e9e. Les partenaires AmStramGrame a \u00e9t\u00e9 imagin\u00e9 par Grame, Centre national de cr\u00e9ation musicale, en partenariat avec Canop\u00e9, R\u00e9seau de cr\u00e9ation et d'accompagnement p\u00e9dagogiques. Avec le soutien de ses partenaires publics et m\u00e9c\u00e8nes : ainsi que des ses lieux partenaires : \u00c9cole Lurcy-L\u00e9vis (03) \u00c9cole St Plaisir (03) \u00c9cole Le Veurdre (03) \u00c9cole Saint-Yorre (03) \u00c9cole Le Vernet (03) \u00c9cole Ferri\u00e8res Sur Sichon (03) \u00c9cole Jean Moulin, Moulins (03) \u00c9cole Voltaire, Montlu\u00e7on (03) \u00c9cole de Musique Jean Wiener, V\u00e9nissieux (69) Coll\u00e8ge Andr\u00e9 Boutry, Lurcy-L\u00e9vis (03) Coll\u00e8ge Pablo Picasso, Bron (69) Coll\u00e8ge Th\u00e9odore Monod, Bron (69) Coll\u00e8ge des Deux Vall\u00e9es, Le Cheylard (07) Coll\u00e8ge Sacr\u00e9 Coeur, Duni\u00e8res (43) Lyc\u00e9e g\u00e9n\u00e9ral et technologique, Le Cheylard (07) Lyc\u00e9e des Chartreux, Lyon (69) M\u00e9diath\u00e8que, Chambon-sur-Lignon (43)","title":"\u00c0 propos"},{"location":"about/#a-propos","text":"Imagin\u00e9 par Grame et R\u00e9seau Canop\u00e9 , AmStramGrame est un projet p\u00e9dagogique arts & sciences r\u00e9unissant ateliers et outils \u00e0 destination de la communaut\u00e9 \u00e9ducative permettant une mise en application concr\u00e8te de concepts scientifiques parfois abstraits en utilisant la cr\u00e9ation sonore et la programmation informatique comme vecteurs. Le projet s'appuie sur le langage de programmation Faust cr\u00e9\u00e9 et d\u00e9velopp\u00e9 par Grame depuis 15 ans et reconnu comme un standard dans le domaine du traitement du signal en temps r\u00e9el pour l'audio. Ainsi le projet Am Stram Grame comprend : Une plateforme web (ce site, en occurrence) int\u00e9grant un espace cr\u00e9atif de programmation informatique pour apprendre \u00e0 construire son propre instrument de musique en ligne, des scenarii p\u00e9dagogiques t\u00e9l\u00e9chargeables, des partitions pr\u00eates-\u00e0-l'emploi et une offre de formation \u00e0 destination des enseignants (\u00c9ducation nationale, \u00e9coles de musiques, conservatoires, etc.). Des mallettes d'exp\u00e9rimentation contenant des Gramophones permettant de rendre tangibles les param\u00e8tres virtuels d\u2019un programme informatique sur la synth\u00e8se de son. Des ateliers avec des artistes pluridisciplinaires.","title":"\u00c0 propos"},{"location":"about/#le-public","text":"Projet adapt\u00e9 \u00e0 toutes les disciplines (ex. math\u00e9matiques, physique, technologie, musique, fran\u00e7ais, EPS, etc.), \u00e0 tous les niveaux d'\u00e2ge (du cycle primaire au secondaire) et accessible aussi bien aux \u00e9l\u00e8ves inscrits dans un parcours d'enseignement musical, qu'\u00e0 ceux sans aucun enseignement artistique.","title":"Le public"},{"location":"about/#les-ateliers","text":"En classe, les ateliers sont men\u00e9s conjointement par un m\u00e9diateur p\u00e9dagogique Canop\u00e9 et un artiste/scientifique Grame. Ils sont bas\u00e9s sur des sc\u00e9narii p\u00e9dagogiques courts et modulables, pr\u00e9alablement \u00e9labor\u00e9s par les partenaires en lien avec les programmes scolaires. Chaque sc\u00e9nario a une approche soit artistique, soit scientifique, soit les deux. Le projet n\u00e9cessite l'utilisation d'ordinateurs pour acc\u00e9der au site web AmStramGrame, qui permet de construire des instruments de musique en ligne, avec quelques lignes de code, et de programmer les gramophones/smartphones. Les \u00e9l\u00e8ves exp\u00e9rimentent ensuite le contr\u00f4le gestuel de leurs instruments et imaginent des situations (performances musicales ou dans\u00e9es, installations) en lien avec la lutherie num\u00e9rique cr\u00e9\u00e9e.","title":"Les ateliers"},{"location":"about/#les-partenaires","text":"AmStramGrame a \u00e9t\u00e9 imagin\u00e9 par Grame, Centre national de cr\u00e9ation musicale, en partenariat avec Canop\u00e9, R\u00e9seau de cr\u00e9ation et d'accompagnement p\u00e9dagogiques. Avec le soutien de ses partenaires publics et m\u00e9c\u00e8nes : ainsi que des ses lieux partenaires : \u00c9cole Lurcy-L\u00e9vis (03) \u00c9cole St Plaisir (03) \u00c9cole Le Veurdre (03) \u00c9cole Saint-Yorre (03) \u00c9cole Le Vernet (03) \u00c9cole Ferri\u00e8res Sur Sichon (03) \u00c9cole Jean Moulin, Moulins (03) \u00c9cole Voltaire, Montlu\u00e7on (03) \u00c9cole de Musique Jean Wiener, V\u00e9nissieux (69) Coll\u00e8ge Andr\u00e9 Boutry, Lurcy-L\u00e9vis (03) Coll\u00e8ge Pablo Picasso, Bron (69) Coll\u00e8ge Th\u00e9odore Monod, Bron (69) Coll\u00e8ge des Deux Vall\u00e9es, Le Cheylard (07) Coll\u00e8ge Sacr\u00e9 Coeur, Duni\u00e8res (43) Lyc\u00e9e g\u00e9n\u00e9ral et technologique, Le Cheylard (07) Lyc\u00e9e des Chartreux, Lyon (69) M\u00e9diath\u00e8que, Chambon-sur-Lignon (43)","title":"Les partenaires"},{"location":"english/","text":"What's AmStramGrame? ARTS & SCIENCES An arts and sciences educational project (STEAM), bringing together services and resources for the educational community. It aims at making abstract scientific concepts more tangible and concrete through musical creation and computer programming. FOR WHOM? A project for primary and middle school students, as well as their teachers. It places sciences and engineering at the heart of the pedagogical approach applying them to the fields of musical and sound creation. Tools FAUST Faust (Functional AUdio STream) is a programming langauge created and developed at Grame . It allows for the rapid and simple design of synthesizers (electronic musical instrument) and sound effects for a large number of platforms. In particular, it can be used to create musical web and mobile applications. THE GRAMOPHONE The Gramophone is an audio device/musical instrument specifically designed for the AmStramGrame project. Its various sensors and controllers (e.g., accelerometer, gyroscope, light sensor, etc.) make it react to the user's gestures. Its rechargeable battery offering approximately five hours of autonomy and its powerful speaker make it independent from any computer, bringing it closer to traditional acoustic musical instruments. THE FAUST WEB IDE The Faust Web IDE is an online tool to write and test Faust programs directly in the web browser and then export them to the Gramophone via the GramoLoader application. A simplified version of the Faust Web IDE has been created as part of AmStramGrame to facilitate its use by beginners. THE FAUST PLAYGROUND The Faust Playground is an online tool to assemble programs written in Faust in a simple way with a graphical interface. In particular, it can be used to program the Gramophone, smartphones, etc. GAMELAN A set of smartphone musical applications inspired by the Javanese musical tradition to which is added electronic sound universes. The 7 applications (Attackey, Baliphone, DroneLAN, Sequencer, ShakerXY, Sinuso\u00efde, Atomicro) of the GameLan family can be played solo or in orchestra using smartphone movements. No musical prerequisite, only gestures will make the user a musician. A collaboration between GRAME-CNCM and Canop\u00e9 GRAME Grame is a national center for musical creation (CNCM). Its main mission is to enable the design and production of new musical works, in a context of transversality of the arts and of arts/sciences synergies. CANOP\u00c9 Canop\u00e9 aims at providing support and material to the educational community in France under the supervision of the French ministry of education. It publishes and distributes multi-format educational resources that meet the needs of the educational community. PATRONS, SPONSORS, AND PUBLIC PARTNERS","title":"English"},{"location":"english/#whats-amstramgrame","text":"","title":"What's AmStramGrame?"},{"location":"english/#arts-sciences","text":"An arts and sciences educational project (STEAM), bringing together services and resources for the educational community. It aims at making abstract scientific concepts more tangible and concrete through musical creation and computer programming.","title":"ARTS &amp; SCIENCES"},{"location":"english/#for-whom","text":"A project for primary and middle school students, as well as their teachers. It places sciences and engineering at the heart of the pedagogical approach applying them to the fields of musical and sound creation.","title":"FOR WHOM?"},{"location":"english/#tools","text":"","title":"Tools"},{"location":"english/#faust","text":"Faust (Functional AUdio STream) is a programming langauge created and developed at Grame . It allows for the rapid and simple design of synthesizers (electronic musical instrument) and sound effects for a large number of platforms. In particular, it can be used to create musical web and mobile applications.","title":"FAUST"},{"location":"english/#the-gramophone","text":"The Gramophone is an audio device/musical instrument specifically designed for the AmStramGrame project. Its various sensors and controllers (e.g., accelerometer, gyroscope, light sensor, etc.) make it react to the user's gestures. Its rechargeable battery offering approximately five hours of autonomy and its powerful speaker make it independent from any computer, bringing it closer to traditional acoustic musical instruments.","title":"THE GRAMOPHONE"},{"location":"english/#the-faust-web-ide","text":"The Faust Web IDE is an online tool to write and test Faust programs directly in the web browser and then export them to the Gramophone via the GramoLoader application. A simplified version of the Faust Web IDE has been created as part of AmStramGrame to facilitate its use by beginners.","title":"THE FAUST WEB IDE"},{"location":"english/#the-faust-playground","text":"The Faust Playground is an online tool to assemble programs written in Faust in a simple way with a graphical interface. In particular, it can be used to program the Gramophone, smartphones, etc.","title":"THE FAUST PLAYGROUND"},{"location":"english/#gamelan","text":"A set of smartphone musical applications inspired by the Javanese musical tradition to which is added electronic sound universes. The 7 applications (Attackey, Baliphone, DroneLAN, Sequencer, ShakerXY, Sinuso\u00efde, Atomicro) of the GameLan family can be played solo or in orchestra using smartphone movements. No musical prerequisite, only gestures will make the user a musician.","title":"GAMELAN"},{"location":"english/#a-collaboration-between-grame-cncm-and-canope","text":"","title":"A collaboration between GRAME-CNCM and Canop\u00e9"},{"location":"english/#grame","text":"Grame is a national center for musical creation (CNCM). Its main mission is to enable the design and production of new musical works, in a context of transversality of the arts and of arts/sciences synergies.","title":"GRAME"},{"location":"english/#canope","text":"Canop\u00e9 aims at providing support and material to the educational community in France under the supervision of the French ministry of education. It publishes and distributes multi-format educational resources that meet the needs of the educational community.","title":"CANOP\u00c9"},{"location":"english/#patrons-sponsors-and-public-partners","text":"","title":"PATRONS, SPONSORS, AND PUBLIC PARTNERS"},{"location":"faust/about/","text":"Le langage de programmation Faust Un monde de langages de programmation \u00c0 l'image des langages utilis\u00e9s par les humains pour communiquer entre-eux comme le Fran\u00e7ais, l'Allemand, le Chinois, etc., il existe aujourd'hui des dizaines de langages de programmation informatique. Certains, comme Python, Java ou JavaScript sont devenus des standards et sont connus d'un grand nombre de personnes, d'autres comme Assembleur ou VHDL s'adressent \u00e0 un public d'utilisateur plus sp\u00e9cialis\u00e9. La plupart des langages de programmation grand-public sont dit \u00e0 \"usage g\u00e9n\u00e9ral\", c'est \u00e0 dire qu'ils peuvent \u00eatre utilis\u00e9s pour construire n'importe quel genre de programme pour tout types d'applications. \u00c0 l'inverse, il existe des langages \u00e0 usage sp\u00e9cifique qui ne peuvent \u00eatre utilis\u00e9s que pour effectuer un type de t\u00e2che donn\u00e9. C'est le cas de Faust qui est plac\u00e9 au c\u0153ur d'AmStramGrame. Faust a \u00e9t\u00e9 sp\u00e9cialement con\u00e7u pour programmer (synth\u00e9tiser) et manipuler (traiter) des sons. En effet, bien qu'il soit possible d'\u00e9crire (impl\u00e9menter) des algorithmes pour la synth\u00e8se et le traitement du son dans des langages \u00e0 usage g\u00e9n\u00e9ral comme Python ou Java, ces derniers sont souvent trop peu performants pour produire du son de mani\u00e8re instantan\u00e9e (en temps r\u00e9el). Or, pour faire de la musique, il est n\u00e9cessaire que les sons soient produits de mani\u00e8re imm\u00e9diate. Il existe un langage \u00e0 usage g\u00e9n\u00e9ral qui permet de mener \u00e0 bien cette t\u00e2che : C/C++. Toutefois, l'utilisation de ce dernier est r\u00e9serv\u00e9e \u00e0 des programmeurs chevronn\u00e9s et n\u00e9cessite des ann\u00e9es de pratique. \u00c0 l'inverse, Faust est simple d'utilisation et s'adresse \u00e0 tous les publics. Faust, c'est quoi ? En termes purement scientifiques, Faust est \"un langage de programmation pour le traitement du signal en temps-r\u00e9el\". Dit autrement, c'est un langage fait pour programmer des sons et les produire de mani\u00e8re instantan\u00e9e. Faust est issu d'une longue lign\u00e9e de langage de programmation sp\u00e9cialement con\u00e7us pour le domaine de la musique. Il peut \u00eatre utilis\u00e9 directement en ligne \u00e0 travers la plateforme Faust Web IDE ( https://faustide.grame.fr ) ou en l'installant sur sa machine (cette option s'adresse \u00e0 des programmeurs exp\u00e9riment\u00e9s). Un programme Faust peut potentiellement \u00eatre tr\u00e8s court et ne faire que quelques lignes : import(\"stdfaust.lib\"); freq = 440; process = os.sawtooth(freq); \u00c9diter/ex\u00e9cuter le programme >> Pour tester ce programme, clique sur le bouton \"\u00c9diter/ex\u00e9cuter le programme\". Le Faust Web IDE devrait alors s'ouvrir avec le code correspondant. Clique sur le bouton \"Run\" pour ex\u00e9cuter le code dans le Faust Web IDE (la page qui vient de s'ouvrir) : Un son devrait \u00eatre produit ! Plus d'information sur l'utilisation du Faust Web IDE sont disponibles ici . Faust peut \u00eatre utilis\u00e9 pour cr\u00e9er toutes sortes d'objets sur un grand nombre de syst\u00e8mes : applications mobiles (iOS et Android) ; web-apps ; plugins audios (VST, AU, etc.) ; des programmes pr\u00eats \u00e0 l\u2019emploi pour MacOS, Linux et Windows ; des syst\u00e8mes embarqu\u00e9s comme le gramophone . De mani\u00e8re plus fondamentale, Faust permet \u00e9galement de convertir/traduire un code Faust en d'autres langages de programmation tel que C, C++, Java, LLVM, WebAssembly, etc. Aller plus loin Faust est utilis\u00e9 comme outil d'enseignement dans des universit\u00e9s et comme outil de d\u00e9veloppement pas des industriels ou des musiciens professionnel : une ma\u00eetrise compl\u00e8te de Faust ne peut s\u2019acqu\u00e9rir qu'apr\u00e8s des ann\u00e9es d\u2019exp\u00e9rience. Les diff\u00e9rents sc\u00e9narii et tutoriels disponibles sur le site d'Amstramgrame ne sont qu'une simple introduction \u00e0 cet outil. Pour compl\u00e9ter vos connaissances sur Faust, vous pouvez : suivre le cours en ligne sur Faust sur la plateforme Kadenze : https://www.kadenze.com/courses/real-time-audio-signal-processing-in-faust/info (en Anglais) consulter le site de la documentation du langage Faust : https://faustdoc.grame.fr (en Anglais)","title":" Qu&#39;est-ce que c&#39;est ? "},{"location":"faust/about/#le-langage-de-programmation-faust","text":"","title":"Le langage de programmation Faust"},{"location":"faust/about/#un-monde-de-langages-de-programmation","text":"\u00c0 l'image des langages utilis\u00e9s par les humains pour communiquer entre-eux comme le Fran\u00e7ais, l'Allemand, le Chinois, etc., il existe aujourd'hui des dizaines de langages de programmation informatique. Certains, comme Python, Java ou JavaScript sont devenus des standards et sont connus d'un grand nombre de personnes, d'autres comme Assembleur ou VHDL s'adressent \u00e0 un public d'utilisateur plus sp\u00e9cialis\u00e9. La plupart des langages de programmation grand-public sont dit \u00e0 \"usage g\u00e9n\u00e9ral\", c'est \u00e0 dire qu'ils peuvent \u00eatre utilis\u00e9s pour construire n'importe quel genre de programme pour tout types d'applications. \u00c0 l'inverse, il existe des langages \u00e0 usage sp\u00e9cifique qui ne peuvent \u00eatre utilis\u00e9s que pour effectuer un type de t\u00e2che donn\u00e9. C'est le cas de Faust qui est plac\u00e9 au c\u0153ur d'AmStramGrame. Faust a \u00e9t\u00e9 sp\u00e9cialement con\u00e7u pour programmer (synth\u00e9tiser) et manipuler (traiter) des sons. En effet, bien qu'il soit possible d'\u00e9crire (impl\u00e9menter) des algorithmes pour la synth\u00e8se et le traitement du son dans des langages \u00e0 usage g\u00e9n\u00e9ral comme Python ou Java, ces derniers sont souvent trop peu performants pour produire du son de mani\u00e8re instantan\u00e9e (en temps r\u00e9el). Or, pour faire de la musique, il est n\u00e9cessaire que les sons soient produits de mani\u00e8re imm\u00e9diate. Il existe un langage \u00e0 usage g\u00e9n\u00e9ral qui permet de mener \u00e0 bien cette t\u00e2che : C/C++. Toutefois, l'utilisation de ce dernier est r\u00e9serv\u00e9e \u00e0 des programmeurs chevronn\u00e9s et n\u00e9cessite des ann\u00e9es de pratique. \u00c0 l'inverse, Faust est simple d'utilisation et s'adresse \u00e0 tous les publics.","title":"Un monde de langages de programmation"},{"location":"faust/about/#faust-cest-quoi","text":"En termes purement scientifiques, Faust est \"un langage de programmation pour le traitement du signal en temps-r\u00e9el\". Dit autrement, c'est un langage fait pour programmer des sons et les produire de mani\u00e8re instantan\u00e9e. Faust est issu d'une longue lign\u00e9e de langage de programmation sp\u00e9cialement con\u00e7us pour le domaine de la musique. Il peut \u00eatre utilis\u00e9 directement en ligne \u00e0 travers la plateforme Faust Web IDE ( https://faustide.grame.fr ) ou en l'installant sur sa machine (cette option s'adresse \u00e0 des programmeurs exp\u00e9riment\u00e9s). Un programme Faust peut potentiellement \u00eatre tr\u00e8s court et ne faire que quelques lignes : import(\"stdfaust.lib\"); freq = 440; process = os.sawtooth(freq); \u00c9diter/ex\u00e9cuter le programme >> Pour tester ce programme, clique sur le bouton \"\u00c9diter/ex\u00e9cuter le programme\". Le Faust Web IDE devrait alors s'ouvrir avec le code correspondant. Clique sur le bouton \"Run\" pour ex\u00e9cuter le code dans le Faust Web IDE (la page qui vient de s'ouvrir) : Un son devrait \u00eatre produit ! Plus d'information sur l'utilisation du Faust Web IDE sont disponibles ici . Faust peut \u00eatre utilis\u00e9 pour cr\u00e9er toutes sortes d'objets sur un grand nombre de syst\u00e8mes : applications mobiles (iOS et Android) ; web-apps ; plugins audios (VST, AU, etc.) ; des programmes pr\u00eats \u00e0 l\u2019emploi pour MacOS, Linux et Windows ; des syst\u00e8mes embarqu\u00e9s comme le gramophone . De mani\u00e8re plus fondamentale, Faust permet \u00e9galement de convertir/traduire un code Faust en d'autres langages de programmation tel que C, C++, Java, LLVM, WebAssembly, etc.","title":"Faust, c'est quoi ?"},{"location":"faust/about/#aller-plus-loin","text":"Faust est utilis\u00e9 comme outil d'enseignement dans des universit\u00e9s et comme outil de d\u00e9veloppement pas des industriels ou des musiciens professionnel : une ma\u00eetrise compl\u00e8te de Faust ne peut s\u2019acqu\u00e9rir qu'apr\u00e8s des ann\u00e9es d\u2019exp\u00e9rience. Les diff\u00e9rents sc\u00e9narii et tutoriels disponibles sur le site d'Amstramgrame ne sont qu'une simple introduction \u00e0 cet outil. Pour compl\u00e9ter vos connaissances sur Faust, vous pouvez : suivre le cours en ligne sur Faust sur la plateforme Kadenze : https://www.kadenze.com/courses/real-time-audio-signal-processing-in-faust/info (en Anglais) consulter le site de la documentation du langage Faust : https://faustdoc.grame.fr (en Anglais)","title":"Aller plus loin"},{"location":"faust/ide/","text":"Le Faust Web IDE Le Faust Web IDE (accessible sur https://faustide.grame.fr ) est un outil en ligne permettant d'\u00e9crire des programmes Faust, de les tester directement dans le navigateur web, puis de les exporter sur le Gramophone via l'application GramoLoader . Le terme IDE vient de l'anglais et est l'abr\u00e9viation de \"Integrated Development Environment\" (soit \"environnement de d\u00e9veloppement int\u00e9gr\u00e9\" en Fran\u00e7ais). C'est un standard dans le domaine de l'informatique pour d\u00e9signer un outil facilitant l'utilisation d'un langage de programmation. Lancer le Faust Web IDE Bien que le Faust Web IDE soit compatible avec la plupart des navigateurs web, il est fortement recommand\u00e9 d'utiliser Google Chrome ou Mozilla Firefox. Dans le cas o\u00f9 MIDI serait n\u00e9cessaire pour le programme Faust, seul Google Chrome fonctionnera (la norme MIDI n'\u00e9tant pas support\u00e9e dans Firefox). Trois versions du Faust Web IDE sont disponibles pour les utilisateurs du projet Amstramgrame : La version \"simplifi\u00e9e sp\u00e9ciale Amstramgrame\" (pour les \u00e9l\u00e8ves) : https://faustide.grame.fr/?mode=amstram La version \"avanc\u00e9e sp\u00e9ciale Amstramgrame\" (pour les enseignants) : https://faustide.grame.fr/?mode=amstram-pro La version \"standard\" : https://faustide.grame.fr La version simplifi\u00e9e satisfera les besoins de la plupart des utilisateurs du Gramophone. Lorsque le Faust Web IDE est ouvert pour la premi\u00e8re fois, il demande d'avoir acc\u00e8s au micro int\u00e9gr\u00e9 de la machine : il est important d\u2019accepter cette demande. Une fois ouvert, un programme Faust par d\u00e9faut impl\u00e9mentant un djemb\u00e9 devrait s'afficher : Le menu de gauche permet d'acc\u00e9der aux diff\u00e9rentes fonctions du Faust Web IDE (ex. ex\u00e9cuter le programme dans le navigateur, exporter le programme vers le Gramophone, etc.) : La zone d'\u00e9dition de texte permet d'\u00e9crire le programme Faust : La zone en dessous de l'\u00e9diteur de code affiche le diagramme ou l'interface utilisateur correspond au programme Faust si ce dernier est ex\u00e9cuter : Notez que le Faust Web IDE est en anglais. La programmation informatique \u00e9tant g\u00e9n\u00e9ralement effectu\u00e9e dans cette langue, le Faust Web IDE ne d\u00e9roge pas \u00e0 cette r\u00e8gle :). Produire du son Pour ex\u00e9cuter le programme par d\u00e9faut, il suffit de cliquer sur le bouton \"run\" dans le menu de gauche : La fen\u00eatre qui s'ouvre et remplace le diagramme correspond \u00e0 l'interface utilisateur du programme Faust ex\u00e9cut\u00e9. Fermer cette fen\u00eatre en cliquant sur la croix \u00e0 c\u00f4t\u00e9 de DSP permet d'arr\u00eater le programme et donc de couper le son : Utiliser les exemples du site AmStramGrame Les diff\u00e9rents tutoriels et sc\u00e9narii sur le site d'Amstramgrame contiennent des dizaines d'exemples de programmes pr\u00eats \u00e0 \u00eatre utilis\u00e9s dans le Faust Web IDE et dans certains cas ex\u00e9cut\u00e9s sur le Gramophone. Ils se pr\u00e9sentent de la mani\u00e8re suivante : import(\"stdfaust.lib\"); process = no.noise; \u00c9diter/ex\u00e9cuter le programme >> D'abord on peut voir le digramme correspondant au programme Faust pr\u00e9sent\u00e9 en dessous. Le bouton \"\u00c9diter/ex\u00e9cuter le programme\" permet d'ouvrir l'exemple directement dans le Faust Web IDE. Essaye pour voir ! Une fois ouvert dans l'IDE, les programmes d'exemples peuvent \u00eatre utilis\u00e9s comme n'importe quel autre programme Faust. Exporter un programme vers le Gramophone Tout programme \u00e9crit et fonctionnant dans le Faust Web IDE peut \u00eatre envoy\u00e9 vers le Gramophone connect\u00e9 \u00e0 l'ordinateur. La page \"programmer le Gramophone\" donne la marche \u00e0 suivre. Autres fonctionnalit\u00e9s Plusieurs programmes peuvent \u00eatre ouverts dans le Faust Web IDE en m\u00eame temps. Pour cr\u00e9er un nouveau programme vide, il suffit de cliquer sur le bouton en haut \u00e0 gauche : Avant de pouvoir ex\u00e9cuter ce nouveau programme, il est n\u00e9cessaire de le s\u00e9lectionner : \u00c0 noter que l'onglet \"Examples\" au dessus de la zone d'\u00e9dition du code donne acc\u00e8s \u00e0 des dizaines d'exemples de programmes Faust. De la m\u00eame mani\u00e8re, n'importe quel programme Faust disponible en local sur la machine peut \u00eatre \"gliss\u00e9\" dans le Faust Web IDE. D'autre fonctionnalit\u00e9s sont accessibles dans le menu de gauche du Faust Web IDE. N'h\u00e9sitez pas \u00e0 les d\u00e9couvrir par vous-m\u00eame :).","title":" Le Faust Web IDE "},{"location":"faust/ide/#le-faust-web-ide","text":"Le Faust Web IDE (accessible sur https://faustide.grame.fr ) est un outil en ligne permettant d'\u00e9crire des programmes Faust, de les tester directement dans le navigateur web, puis de les exporter sur le Gramophone via l'application GramoLoader . Le terme IDE vient de l'anglais et est l'abr\u00e9viation de \"Integrated Development Environment\" (soit \"environnement de d\u00e9veloppement int\u00e9gr\u00e9\" en Fran\u00e7ais). C'est un standard dans le domaine de l'informatique pour d\u00e9signer un outil facilitant l'utilisation d'un langage de programmation.","title":"Le Faust Web IDE"},{"location":"faust/ide/#lancer-le-faust-web-ide","text":"Bien que le Faust Web IDE soit compatible avec la plupart des navigateurs web, il est fortement recommand\u00e9 d'utiliser Google Chrome ou Mozilla Firefox. Dans le cas o\u00f9 MIDI serait n\u00e9cessaire pour le programme Faust, seul Google Chrome fonctionnera (la norme MIDI n'\u00e9tant pas support\u00e9e dans Firefox). Trois versions du Faust Web IDE sont disponibles pour les utilisateurs du projet Amstramgrame : La version \"simplifi\u00e9e sp\u00e9ciale Amstramgrame\" (pour les \u00e9l\u00e8ves) : https://faustide.grame.fr/?mode=amstram La version \"avanc\u00e9e sp\u00e9ciale Amstramgrame\" (pour les enseignants) : https://faustide.grame.fr/?mode=amstram-pro La version \"standard\" : https://faustide.grame.fr La version simplifi\u00e9e satisfera les besoins de la plupart des utilisateurs du Gramophone. Lorsque le Faust Web IDE est ouvert pour la premi\u00e8re fois, il demande d'avoir acc\u00e8s au micro int\u00e9gr\u00e9 de la machine : il est important d\u2019accepter cette demande. Une fois ouvert, un programme Faust par d\u00e9faut impl\u00e9mentant un djemb\u00e9 devrait s'afficher : Le menu de gauche permet d'acc\u00e9der aux diff\u00e9rentes fonctions du Faust Web IDE (ex. ex\u00e9cuter le programme dans le navigateur, exporter le programme vers le Gramophone, etc.) : La zone d'\u00e9dition de texte permet d'\u00e9crire le programme Faust : La zone en dessous de l'\u00e9diteur de code affiche le diagramme ou l'interface utilisateur correspond au programme Faust si ce dernier est ex\u00e9cuter : Notez que le Faust Web IDE est en anglais. La programmation informatique \u00e9tant g\u00e9n\u00e9ralement effectu\u00e9e dans cette langue, le Faust Web IDE ne d\u00e9roge pas \u00e0 cette r\u00e8gle :).","title":"Lancer le Faust Web IDE"},{"location":"faust/ide/#produire-du-son","text":"Pour ex\u00e9cuter le programme par d\u00e9faut, il suffit de cliquer sur le bouton \"run\" dans le menu de gauche : La fen\u00eatre qui s'ouvre et remplace le diagramme correspond \u00e0 l'interface utilisateur du programme Faust ex\u00e9cut\u00e9. Fermer cette fen\u00eatre en cliquant sur la croix \u00e0 c\u00f4t\u00e9 de DSP permet d'arr\u00eater le programme et donc de couper le son :","title":"Produire du son"},{"location":"faust/ide/#utiliser-les-exemples-du-site-amstramgrame","text":"Les diff\u00e9rents tutoriels et sc\u00e9narii sur le site d'Amstramgrame contiennent des dizaines d'exemples de programmes pr\u00eats \u00e0 \u00eatre utilis\u00e9s dans le Faust Web IDE et dans certains cas ex\u00e9cut\u00e9s sur le Gramophone. Ils se pr\u00e9sentent de la mani\u00e8re suivante : import(\"stdfaust.lib\"); process = no.noise; \u00c9diter/ex\u00e9cuter le programme >> D'abord on peut voir le digramme correspondant au programme Faust pr\u00e9sent\u00e9 en dessous. Le bouton \"\u00c9diter/ex\u00e9cuter le programme\" permet d'ouvrir l'exemple directement dans le Faust Web IDE. Essaye pour voir ! Une fois ouvert dans l'IDE, les programmes d'exemples peuvent \u00eatre utilis\u00e9s comme n'importe quel autre programme Faust.","title":"Utiliser les exemples du site AmStramGrame"},{"location":"faust/ide/#exporter-un-programme-vers-le-gramophone","text":"Tout programme \u00e9crit et fonctionnant dans le Faust Web IDE peut \u00eatre envoy\u00e9 vers le Gramophone connect\u00e9 \u00e0 l'ordinateur. La page \"programmer le Gramophone\" donne la marche \u00e0 suivre.","title":"Exporter un programme vers le Gramophone"},{"location":"faust/ide/#autres-fonctionnalites","text":"Plusieurs programmes peuvent \u00eatre ouverts dans le Faust Web IDE en m\u00eame temps. Pour cr\u00e9er un nouveau programme vide, il suffit de cliquer sur le bouton en haut \u00e0 gauche : Avant de pouvoir ex\u00e9cuter ce nouveau programme, il est n\u00e9cessaire de le s\u00e9lectionner : \u00c0 noter que l'onglet \"Examples\" au dessus de la zone d'\u00e9dition du code donne acc\u00e8s \u00e0 des dizaines d'exemples de programmes Faust. De la m\u00eame mani\u00e8re, n'importe quel programme Faust disponible en local sur la machine peut \u00eatre \"gliss\u00e9\" dans le Faust Web IDE. D'autre fonctionnalit\u00e9s sont accessibles dans le menu de gauche du Faust Web IDE. N'h\u00e9sitez pas \u00e0 les d\u00e9couvrir par vous-m\u00eame :).","title":"Autres fonctionnalit\u00e9s"},{"location":"faust/playground/","text":"Le Faust Playground Le Faust Playground est un outil en ligne (accessible sur https://faustplayground.grame.fr/ ) permettant d'assembler des programmes \u00e9crits en Faust de mani\u00e8re simple avec une interface graphique. Il peut \u00e9galement exporter les programmes produits vers les diff\u00e9rentes plateformes support\u00e9es par Faust pour cr\u00e9er des applications pour smartphones, programmer le Gramophone, cr\u00e9er des plug-ins audios, etc. Le Faust Playground Bien que le Faust Playground soit compatible avec la plupart des navigateurs web, il est fortement recommand\u00e9 d'utiliser Google Chrome ou Mozilla Firefox. Produire du son Le Faust Playground se pr\u00e9sente sous la forme d'un \"\u00e9tabli\" vide sur lequel des objets \u00e9crits en Faust peuvent \u00eatre plac\u00e9s et connect\u00e9s entre-eux. Le bouton \"LIBRARY\" en haut \u00e0 gauche de l'\u00e9cran permet d'avoir acc\u00e8s \u00e0 une collection d'objets Faust pr\u00eat \u00e0 l'emploi : Dans le menu qui s'ouvre, s\u00e9lectionnez le premier \u00e9l\u00e9ment (Kisana) dans la liste \"Instruments\" en cliquant dessus : L'objet Kisana qui est un synth\u00e9tiseur de harpe devrait alors \u00eatre plac\u00e9 sur l'\u00e9tabli. Afin de pouvoir entendre le son qu'il produit, il est n\u00e9cessaire de le connecter au haut-parleur \u00e0 droite de l'\u00e9cran en tirant un c\u00e2ble entre le point rouge de Kisana et le point vert sur le haut-parleur (pour cela, il suffit de maintenir le clique sur le point rouge et de \"tirer\" le c\u00e2ble vers le point vert) : Les trois premiers potentiom\u00e8tres (points verts) de Kisana permettent d'actionner les cordes de la harpe : bougez les et vous devriez entendre du son ! Instruments vs. effets Le menu LIBRARY donne acc\u00e8s \u00e0 deux types d'\u00e9l\u00e9ments : des \"instruments\" qui produisent du son et des \"effets\" qui traitent du son. \u00c0 la diff\u00e9rence des instruments, les effets ont une entr\u00e9e audio mat\u00e9rialis\u00e9e par un point vert \u00e0 leur gauche. Dans le menu LIBRARY s\u00e9lectionne l'effet \"Echo\" et connecte le \u00e0 Kisana puis au haut-parleur : Change ensuite la valeur du param\u00e8tre \"echo intensity\" et tu devrais entendre un \u00e9cho appliqu\u00e9 au son de Kisana. En pratique n'importe quel instrument peut \u00eatre connect\u00e9 \u00e0 n'importe quel effet. De la m\u00eame mani\u00e8re, plusieurs effets peuvent \u00eatre connect\u00e9s entre-eux : N'h\u00e9sitez pas \u00e0 \u00eatre cr\u00e9atif et \u00e0 essayer diff\u00e9rentes combinaisons d'objets ! Exporter un programme vers le Gramophone Tout programme \u00e9crit et fonctionnant dans le Faust Playground peut \u00eatre envoy\u00e9 vers le Gramophone connect\u00e9 \u00e0 l'ordinateur. La page \"programmer le Gramophone\" donne la marche \u00e0 suivre.","title":" Le Faust Playground "},{"location":"faust/playground/#le-faust-playground","text":"Le Faust Playground est un outil en ligne (accessible sur https://faustplayground.grame.fr/ ) permettant d'assembler des programmes \u00e9crits en Faust de mani\u00e8re simple avec une interface graphique. Il peut \u00e9galement exporter les programmes produits vers les diff\u00e9rentes plateformes support\u00e9es par Faust pour cr\u00e9er des applications pour smartphones, programmer le Gramophone, cr\u00e9er des plug-ins audios, etc. Le Faust Playground Bien que le Faust Playground soit compatible avec la plupart des navigateurs web, il est fortement recommand\u00e9 d'utiliser Google Chrome ou Mozilla Firefox.","title":"Le Faust Playground"},{"location":"faust/playground/#produire-du-son","text":"Le Faust Playground se pr\u00e9sente sous la forme d'un \"\u00e9tabli\" vide sur lequel des objets \u00e9crits en Faust peuvent \u00eatre plac\u00e9s et connect\u00e9s entre-eux. Le bouton \"LIBRARY\" en haut \u00e0 gauche de l'\u00e9cran permet d'avoir acc\u00e8s \u00e0 une collection d'objets Faust pr\u00eat \u00e0 l'emploi : Dans le menu qui s'ouvre, s\u00e9lectionnez le premier \u00e9l\u00e9ment (Kisana) dans la liste \"Instruments\" en cliquant dessus : L'objet Kisana qui est un synth\u00e9tiseur de harpe devrait alors \u00eatre plac\u00e9 sur l'\u00e9tabli. Afin de pouvoir entendre le son qu'il produit, il est n\u00e9cessaire de le connecter au haut-parleur \u00e0 droite de l'\u00e9cran en tirant un c\u00e2ble entre le point rouge de Kisana et le point vert sur le haut-parleur (pour cela, il suffit de maintenir le clique sur le point rouge et de \"tirer\" le c\u00e2ble vers le point vert) : Les trois premiers potentiom\u00e8tres (points verts) de Kisana permettent d'actionner les cordes de la harpe : bougez les et vous devriez entendre du son !","title":"Produire du son"},{"location":"faust/playground/#instruments-vs-effets","text":"Le menu LIBRARY donne acc\u00e8s \u00e0 deux types d'\u00e9l\u00e9ments : des \"instruments\" qui produisent du son et des \"effets\" qui traitent du son. \u00c0 la diff\u00e9rence des instruments, les effets ont une entr\u00e9e audio mat\u00e9rialis\u00e9e par un point vert \u00e0 leur gauche. Dans le menu LIBRARY s\u00e9lectionne l'effet \"Echo\" et connecte le \u00e0 Kisana puis au haut-parleur : Change ensuite la valeur du param\u00e8tre \"echo intensity\" et tu devrais entendre un \u00e9cho appliqu\u00e9 au son de Kisana. En pratique n'importe quel instrument peut \u00eatre connect\u00e9 \u00e0 n'importe quel effet. De la m\u00eame mani\u00e8re, plusieurs effets peuvent \u00eatre connect\u00e9s entre-eux : N'h\u00e9sitez pas \u00e0 \u00eatre cr\u00e9atif et \u00e0 essayer diff\u00e9rentes combinaisons d'objets !","title":"Instruments vs. effets"},{"location":"faust/playground/#exporter-un-programme-vers-le-gramophone","text":"Tout programme \u00e9crit et fonctionnant dans le Faust Playground peut \u00eatre envoy\u00e9 vers le Gramophone connect\u00e9 \u00e0 l'ordinateur. La page \"programmer le Gramophone\" donne la marche \u00e0 suivre.","title":"Exporter un programme vers le Gramophone"},{"location":"gramophone/about/","text":"Le Gramophone Le Gramophone est un instrument de musique programmable d\u00e9velopp\u00e9 \u00e0 Grame dans le cadre du projet AmStramGrame. \u00c0 l'instar des instruments de musique acoustiques \"traditionnels\" comme la trompette, le tabla ou le violon, il permet de produire du son, d'\u00eatre contr\u00f4l\u00e9 par un musicien et est compl\u00e8tement ind\u00e9pendant (il n'a pas besoin d'\u00eatre branch\u00e9 avec un c\u00e2ble pour fonctionner). \u00c0 l'inverse des instruments acoustiques, le son qu'il produit et son comportement sont compl\u00e8tement mall\u00e9ables et peuvent \u00eatre d\u00e9crits par la programmation informatique gr\u00e2ce au langage Faust . Fonctionnement du Gramophone Vue d'ensemble Le Gramophone est compos\u00e9 d'une coque en plastique, d'un haut-parleur, d'un ordinateur embarqu\u00e9, d'une batterie et de capteurs ( acc\u00e9l\u00e9rom\u00e8tre, gyroscope, boussole , bouton , potentiom\u00e8tre et photor\u00e9sistance ). Composants du Gramophone (1) Composants du Gramophone (2) Programmation du Gramophone Le Gramophone se programme via un c\u00e2ble USB connect\u00e9 \u00e0 un ordinateur. Le langage Faust peut \u00eatre utilis\u00e9 pour programmer le Gramophone gr\u00e2ce aux plateformes Faust Playground (programmation graphique pour les d\u00e9butants) et Faust Web IDE (programmation \u00e9crites/script\u00e9es). Pour que cela fonctionne, il est n\u00e9cessaire d'installer l'application GramoLoader sur sa machine qui permet de faire le lien entre le navigateur Web et le gramophone. Programmation du Gramophone Le tutoriel Programmer le Gramophone donne plus d\u00e9tails sur la programmation du Gramophone. Fonctionnement du Gramophone D\u00e9marrage du Gramophone Le Gramophone abrite un interrupteur qui permet de le d\u00e9marrer et de l'arr\u00eater. Cet interrupteur a trois positions pour s\u00e9lectionner le mode de fonctionnement : en position centrale, le Gramophone est en mode neutre ; lorsqu'il est enclench\u00e9 \u00e0 gauche (en direction du bouton de contr\u00f4le du volume ), le Gramophone est d\u00e9marr\u00e9 en mode programmation ; lorsqu'il est enclench\u00e9 \u00e0 droite (dans la direction oppos\u00e9e du bouton de contr\u00f4le du volume ), le Gramophone est d\u00e9marr\u00e9 en mode batterie . L'interrupteur de d\u00e9marrage du Gramophone Typiquement, le mode programmation est utilis\u00e9 pour programmer le Gramophone avec l'application GramoLoader , le mode neutre permet de lancer le Gramophone lorsqu'il est connect\u00e9 \u00e0 l'ordinateur en USB, le mode batterie permet de jouer le Gramophone sans le connecter \u00e0 l'ordinateur et \u00e0 charger la batterie. Mode Neutre En mode neutre (interrupteur en position centrale), le Gramophone peut : \u00eatre aliment\u00e9 en \u00e9lectricit\u00e9 avec le c\u00e2ble USB et donc jou\u00e9 ; programm\u00e9 sous certaines conditions (il est possible que le Gramophone n'arrive pas \u00e0 installer le programme depuis l'application GramoLoader ) Le mode neutre est recommand\u00e9 pour l'ex\u00e9cution d'un programme Faust lorsque le Gramophone est branch\u00e9 \u00e0 l'ordinateur. Si le c\u00e2ble USB est d\u00e9branch\u00e9, le Gramophone s'arr\u00eate. La batterie du Gramophone n'est pas sollicit\u00e9e en mode neutre : le Gramophone devrait \u00eatre mis en mode neutre lorsqu'il n'est pas utilis\u00e9 pour ne pas vider la batterie. Mode Programmation Le mode programmation (interrupteur en position gauche) permet de forcer la programmation d'un Gramophone depuis le Faust Web IDE ou le Faust Playground via l'application GramoLoader . Si un programme Faust a du mal \u00e0 \u00eatre install\u00e9 en mode neutre, le mode programmation devrait r\u00e9soudre le probl\u00e8me. Mode Batterie Le mode batterie (interrupteur en position droite) permet de : faire fonctionner le Gramophone sur la batterie ; charger la batterie du Gramophone si celui-ci est connect\u00e9 \u00e0 un port USB. Il est n\u00e9cessaire de presser/appuyer sur la molette de changement de programme pour acter le lancement du premier programme Faust install\u00e9 sur le Gramophone : On met donc d'abord le Gramophone en mode batterie puis on appuie plusieurs fois sur le bouton de lancement du programme. Il est important de remettre l'interrupteur en mode neutre apr\u00e8s avoir termin\u00e9 de jouer si on ne veut pas vider la batterie ! Tenir le Gramophone Le Gramophone se tient dans la paume de la main droite avec la sangle autour de la main. Cette derni\u00e8re peut \u00eatre ajust\u00e9e afin de tenir le Gramophone fermement. Il est important de noter que la sangle n'est pas plac\u00e9e sur le Gramophone de mani\u00e8re sym\u00e9trique : la photor\u00e9sistance (capteur de lumi\u00e8re) doit tomber sous le pouce et le bouton assignable sous le majeur : Contr\u00f4le du volume Le volume du son produit par le Gramophone peut \u00eatre contr\u00f4l\u00e9 par le potentiom\u00e8tre se trouvant juste au-dessus de la prise jack (celui qui se trouve en bas de la main lorsque l'on tient le Gramophone) : Potentiom\u00e8tre de contr\u00f4le du volume du Gramophone Il est important de noter que le volume du son produit d\u00e9pend aussi fortement du programme ex\u00e9cut\u00e9 sur le Gramophone. Contr\u00f4le des param\u00e8tres du son Le son produit par le Gramophone peut-\u00eatre contr\u00f4l\u00e9 \u00e0 l'aide de diff\u00e9rents \u00e9l\u00e9ments d'interface. Chacun d'entre-eux peut \u00eatre assign\u00e9 directement dans un programme Faust \u00e0 un param\u00e8tre du son \u00e0 l'aide de m\u00e9tadatas (le fonctionnement des m\u00e9tadata dans Faust est d\u00e9taill\u00e9 ici ). Le bouton assignable Le bouton assignable du Gramophone se trouve \u00e0 l'oppos\u00e9e du potentiom\u00e8tre de volume et tombe sous la majeur du musicien : Il est adressable dans un programme Faust \u00e0 l'aide de la m\u00e9tadata suivante : [switch:1] Le potentiom\u00e8tre assignable La potentiom\u00e8tre assignable du Gramophone se trouve juste \u00e0 gauche du bouton assignable : Il est \"typiquement\" actionn\u00e9 par la main gauche de l'instrumentiste. Ce potentiom\u00e8tre est adressable dans un programme Faust \u00e0 l'aide de la m\u00e9tadata suivante : [knob:2] La photor\u00e9sistance Le photor\u00e9sistance assignable du Gramophone permet de capter la lumi\u00e8re. Elle se trouve juste \u00e0 gauche du potentiom\u00e8tre assignable et tombe sous le pouce de l'instrumentiste : Elle est adressable dans un programme Faust \u00e0 l'aide de la m\u00e9tadata suivante : [knob:3] . Les capteurs de mouvements Le Gramophone abrite un acc\u00e9l\u00e9rom\u00e8tre et un gyroscope qui peuvent \u00eatre utilis\u00e9s pour contr\u00f4ler les param\u00e8tres d'un programme Faust avec le geste. >> Les informations donn\u00e9es dans cette section se veulent \u00eatre tr\u00e8s techniques. Pour un tutoriel pas-\u00e0-pas sur l'utilisation des capteurs de mouvements du Gramophone, clique sur ce lien . L'acc\u00e9l\u00e9ration (acc\u00e9l\u00e9rom\u00e8tre) et l'orientation (gyroscope) du Gramophone peuvent \u00eatre mesur\u00e9es sur trois axes diff\u00e9rents (X, Y et Z) : Inclinaison du Gramophone sur l'axe des X Inclinaison du Gramophone sur l'axe des Y L'axe des Z du Gramophone Des m\u00e9tadatas Faust peuvent \u00eatre utilis\u00e9es pour associer et configurer l'acc\u00e9l\u00e9rom\u00e8tre et le gyroscope du Gramophone \u00e0 un param\u00e8tre d'un programme Faust : [acc: a b c d e] pour l'acc\u00e9l\u00e9rom\u00e8tre et : [gyr: a b c d e] pour le gyroscope, avec : a : l'axe de l'acc\u00e9l\u00e9rom\u00e8tre ( 0 : X, 1 : Y, 2 : Z) b : la courbe de l'acc\u00e9l\u00e9rom\u00e8tre (voir la figure ci-dessous, 4 courbes sont disponibles) c : l\u2019acc\u00e9l\u00e9ration minimale en m/s^2 d : l\u2019acc\u00e9l\u00e9ration centrale en m/s^2 e : l\u2019acc\u00e9l\u00e9ration maximale en m/s^2 c , d et e sont directement associ\u00e9s \u00e0 la configuration d'un param\u00e8tre d'un programme Faust : parameter = nentry(\"ParamFaust[acc: a b c d e]\",def,min,max,step); c est associ\u00e9 \u00e0 min d est associ\u00e9 \u00e0 def e est associ\u00e9 \u00e0 max Configuration de l'acc\u00e9l\u00e9rom\u00e8tre et du gyroscope du Gramophone Par exemple, le gain d'un synth\u00e9tiseur peut \u00eatre contr\u00f4l\u00e9 avec l'axe X de l'acc\u00e9l\u00e9rom\u00e8tre de la mani\u00e8re suivante : g = nentry(\"gain[acc: 0 0 -10 0 10]\",0.5,0,1,0.01); Avec cette configuration, g = 0 lorsque le Gramophone est inclin\u00e9 \u00e0 90 degr\u00e9s du c\u00f4t\u00e9 gauche, g = 0.5 lorsque le Gramophone est maintenue droit, haut-parleur pointant vers le bas et g = 1 lorsque le Gramophone est inclin\u00e9 \u00e0 90 degr\u00e9s du c\u00f4t\u00e9 droit. Autre exemple : g = nentry(\"gain[acc: 0 0 0 0 10]\",0,0,1,0.01); Avec cette configuration, g = 0 lorsque le Gramophone est inclin\u00e9 \u00e0 90 degr\u00e9s du c\u00f4t\u00e9 gauche et lorsque le Gramophone est maintenue droit, haut-parleur pointant vers le bas. La valeur de g augmente au fur et \u00e0 mesure que le Gramophone est inclin\u00e9 vers la droite. g = 1 lorsque le Gramophone est inclin\u00e9 \u00e0 90 degr\u00e9s du c\u00f4t\u00e9 droit. Charger le Gramophone Pour charger la batterie du Gramophone, il suffit de le brancher \u00e0 un chargeur USB ou \u00e0 un ordinateur. Pour que la charge puisse s'effectuer, il est n\u00e9cessaire de mettre le Gramophone en mode batterie : le Gramophone ne se chargera pas s'il est en mode neutre ou en mode programmation ! L'autonomie du Gramophone d\u00e9pend de la complexit\u00e9 du programme ex\u00e9cut\u00e9, de la sant\u00e9 de la batterie, et du temps de charge. Il faut compter environ deux heures pour une charge compl\u00e8te. Passer d'un programme \u00e0 l'autre Plusieurs programmes Faust peuvent \u00eatre install\u00e9s sur un seul Gramophone. Pour passer d'un programme \u00e0 un autre, il suffit de tourner la molette noire plac\u00e9e en bas du Gramophone : Les programmes sont s\u00e9lectionn\u00e9s en boucle. Lorsque le Gramophone est d\u00e9marr\u00e9 en mode neutre ou en mode batterie , le premier programme est toujours s\u00e9lectionn\u00e9. Pour passer au deuxi\u00e8me programme, il suffit de tourner la molette vers la droite. Pour revenir en arri\u00e8re, il faut la tourner vers la gauche. Une fois arriv\u00e9 au dernier programme, tourner la molette vers la droite fait automatiquement revenir au premier programme, etc. M\u00e9tadatas de programmation du Gramophone \u00c9l\u00e9ment M\u00e9tadata Description Bouton [switch:1] Bouton en haut du Gramophone : d\u00e9livre 1 lorsqu'il est press\u00e9 et 0 lorsqu'il ne l'est pas. Potentiom\u00e8tre [knob:2] Potentiom\u00e8tre entre le bouton et la photor\u00e9sistance. Fourni un contr\u00f4le continu. Photor\u00e9sistance [knob:3] Photor\u00e9sistance en dessous du potentiom\u00e8tre assignable. Fourni un contr\u00f4le continu. Acc\u00e9l\u00e9rom\u00e8tre [acc: XXX] Acc\u00e9l\u00e9rom\u00e8tre int\u00e9gr\u00e9 au Gramophone. Fourni un contr\u00f4le continu. XXX correspond au param\u00e8tre de configuration de l'acc\u00e9l\u00e9rom\u00e8tre. Gyroscope [gyr: XXX] Gyroscope int\u00e9gr\u00e9 au Gramophone. Fourni un contr\u00f4le continu. XXX correspond au param\u00e8tre de configuration de l'acc\u00e9l\u00e9rom\u00e8tre.","title":" Qu&#39;est-ce que c&#39;est ? "},{"location":"gramophone/about/#le-gramophone","text":"Le Gramophone est un instrument de musique programmable d\u00e9velopp\u00e9 \u00e0 Grame dans le cadre du projet AmStramGrame. \u00c0 l'instar des instruments de musique acoustiques \"traditionnels\" comme la trompette, le tabla ou le violon, il permet de produire du son, d'\u00eatre contr\u00f4l\u00e9 par un musicien et est compl\u00e8tement ind\u00e9pendant (il n'a pas besoin d'\u00eatre branch\u00e9 avec un c\u00e2ble pour fonctionner). \u00c0 l'inverse des instruments acoustiques, le son qu'il produit et son comportement sont compl\u00e8tement mall\u00e9ables et peuvent \u00eatre d\u00e9crits par la programmation informatique gr\u00e2ce au langage Faust . Fonctionnement du Gramophone","title":"Le Gramophone"},{"location":"gramophone/about/#vue-densemble","text":"Le Gramophone est compos\u00e9 d'une coque en plastique, d'un haut-parleur, d'un ordinateur embarqu\u00e9, d'une batterie et de capteurs ( acc\u00e9l\u00e9rom\u00e8tre, gyroscope, boussole , bouton , potentiom\u00e8tre et photor\u00e9sistance ). Composants du Gramophone (1) Composants du Gramophone (2)","title":"Vue d'ensemble"},{"location":"gramophone/about/#programmation-du-gramophone","text":"Le Gramophone se programme via un c\u00e2ble USB connect\u00e9 \u00e0 un ordinateur. Le langage Faust peut \u00eatre utilis\u00e9 pour programmer le Gramophone gr\u00e2ce aux plateformes Faust Playground (programmation graphique pour les d\u00e9butants) et Faust Web IDE (programmation \u00e9crites/script\u00e9es). Pour que cela fonctionne, il est n\u00e9cessaire d'installer l'application GramoLoader sur sa machine qui permet de faire le lien entre le navigateur Web et le gramophone. Programmation du Gramophone Le tutoriel Programmer le Gramophone donne plus d\u00e9tails sur la programmation du Gramophone.","title":"Programmation du Gramophone"},{"location":"gramophone/about/#fonctionnement-du-gramophone","text":"","title":"Fonctionnement du Gramophone"},{"location":"gramophone/about/#demarrage-du-gramophone","text":"Le Gramophone abrite un interrupteur qui permet de le d\u00e9marrer et de l'arr\u00eater. Cet interrupteur a trois positions pour s\u00e9lectionner le mode de fonctionnement : en position centrale, le Gramophone est en mode neutre ; lorsqu'il est enclench\u00e9 \u00e0 gauche (en direction du bouton de contr\u00f4le du volume ), le Gramophone est d\u00e9marr\u00e9 en mode programmation ; lorsqu'il est enclench\u00e9 \u00e0 droite (dans la direction oppos\u00e9e du bouton de contr\u00f4le du volume ), le Gramophone est d\u00e9marr\u00e9 en mode batterie . L'interrupteur de d\u00e9marrage du Gramophone Typiquement, le mode programmation est utilis\u00e9 pour programmer le Gramophone avec l'application GramoLoader , le mode neutre permet de lancer le Gramophone lorsqu'il est connect\u00e9 \u00e0 l'ordinateur en USB, le mode batterie permet de jouer le Gramophone sans le connecter \u00e0 l'ordinateur et \u00e0 charger la batterie.","title":"D\u00e9marrage du Gramophone"},{"location":"gramophone/about/#mode-neutre","text":"En mode neutre (interrupteur en position centrale), le Gramophone peut : \u00eatre aliment\u00e9 en \u00e9lectricit\u00e9 avec le c\u00e2ble USB et donc jou\u00e9 ; programm\u00e9 sous certaines conditions (il est possible que le Gramophone n'arrive pas \u00e0 installer le programme depuis l'application GramoLoader ) Le mode neutre est recommand\u00e9 pour l'ex\u00e9cution d'un programme Faust lorsque le Gramophone est branch\u00e9 \u00e0 l'ordinateur. Si le c\u00e2ble USB est d\u00e9branch\u00e9, le Gramophone s'arr\u00eate. La batterie du Gramophone n'est pas sollicit\u00e9e en mode neutre : le Gramophone devrait \u00eatre mis en mode neutre lorsqu'il n'est pas utilis\u00e9 pour ne pas vider la batterie.","title":"Mode Neutre"},{"location":"gramophone/about/#mode-programmation","text":"Le mode programmation (interrupteur en position gauche) permet de forcer la programmation d'un Gramophone depuis le Faust Web IDE ou le Faust Playground via l'application GramoLoader . Si un programme Faust a du mal \u00e0 \u00eatre install\u00e9 en mode neutre, le mode programmation devrait r\u00e9soudre le probl\u00e8me.","title":"Mode Programmation"},{"location":"gramophone/about/#mode-batterie","text":"Le mode batterie (interrupteur en position droite) permet de : faire fonctionner le Gramophone sur la batterie ; charger la batterie du Gramophone si celui-ci est connect\u00e9 \u00e0 un port USB. Il est n\u00e9cessaire de presser/appuyer sur la molette de changement de programme pour acter le lancement du premier programme Faust install\u00e9 sur le Gramophone : On met donc d'abord le Gramophone en mode batterie puis on appuie plusieurs fois sur le bouton de lancement du programme. Il est important de remettre l'interrupteur en mode neutre apr\u00e8s avoir termin\u00e9 de jouer si on ne veut pas vider la batterie !","title":"Mode Batterie"},{"location":"gramophone/about/#tenir-le-gramophone","text":"Le Gramophone se tient dans la paume de la main droite avec la sangle autour de la main. Cette derni\u00e8re peut \u00eatre ajust\u00e9e afin de tenir le Gramophone fermement. Il est important de noter que la sangle n'est pas plac\u00e9e sur le Gramophone de mani\u00e8re sym\u00e9trique : la photor\u00e9sistance (capteur de lumi\u00e8re) doit tomber sous le pouce et le bouton assignable sous le majeur :","title":"Tenir le Gramophone"},{"location":"gramophone/about/#controle-du-volume","text":"Le volume du son produit par le Gramophone peut \u00eatre contr\u00f4l\u00e9 par le potentiom\u00e8tre se trouvant juste au-dessus de la prise jack (celui qui se trouve en bas de la main lorsque l'on tient le Gramophone) : Potentiom\u00e8tre de contr\u00f4le du volume du Gramophone Il est important de noter que le volume du son produit d\u00e9pend aussi fortement du programme ex\u00e9cut\u00e9 sur le Gramophone.","title":"Contr\u00f4le du volume"},{"location":"gramophone/about/#controle-des-parametres-du-son","text":"Le son produit par le Gramophone peut-\u00eatre contr\u00f4l\u00e9 \u00e0 l'aide de diff\u00e9rents \u00e9l\u00e9ments d'interface. Chacun d'entre-eux peut \u00eatre assign\u00e9 directement dans un programme Faust \u00e0 un param\u00e8tre du son \u00e0 l'aide de m\u00e9tadatas (le fonctionnement des m\u00e9tadata dans Faust est d\u00e9taill\u00e9 ici ).","title":"Contr\u00f4le des param\u00e8tres du son"},{"location":"gramophone/about/#le-bouton-assignable","text":"Le bouton assignable du Gramophone se trouve \u00e0 l'oppos\u00e9e du potentiom\u00e8tre de volume et tombe sous la majeur du musicien : Il est adressable dans un programme Faust \u00e0 l'aide de la m\u00e9tadata suivante : [switch:1]","title":"Le bouton assignable"},{"location":"gramophone/about/#le-potentiometre-assignable","text":"La potentiom\u00e8tre assignable du Gramophone se trouve juste \u00e0 gauche du bouton assignable : Il est \"typiquement\" actionn\u00e9 par la main gauche de l'instrumentiste. Ce potentiom\u00e8tre est adressable dans un programme Faust \u00e0 l'aide de la m\u00e9tadata suivante : [knob:2]","title":"Le potentiom\u00e8tre assignable"},{"location":"gramophone/about/#la-photoresistance","text":"Le photor\u00e9sistance assignable du Gramophone permet de capter la lumi\u00e8re. Elle se trouve juste \u00e0 gauche du potentiom\u00e8tre assignable et tombe sous le pouce de l'instrumentiste : Elle est adressable dans un programme Faust \u00e0 l'aide de la m\u00e9tadata suivante : [knob:3] .","title":"La photor\u00e9sistance"},{"location":"gramophone/about/#les-capteurs-de-mouvements","text":"Le Gramophone abrite un acc\u00e9l\u00e9rom\u00e8tre et un gyroscope qui peuvent \u00eatre utilis\u00e9s pour contr\u00f4ler les param\u00e8tres d'un programme Faust avec le geste. >> Les informations donn\u00e9es dans cette section se veulent \u00eatre tr\u00e8s techniques. Pour un tutoriel pas-\u00e0-pas sur l'utilisation des capteurs de mouvements du Gramophone, clique sur ce lien . L'acc\u00e9l\u00e9ration (acc\u00e9l\u00e9rom\u00e8tre) et l'orientation (gyroscope) du Gramophone peuvent \u00eatre mesur\u00e9es sur trois axes diff\u00e9rents (X, Y et Z) : Inclinaison du Gramophone sur l'axe des X Inclinaison du Gramophone sur l'axe des Y L'axe des Z du Gramophone Des m\u00e9tadatas Faust peuvent \u00eatre utilis\u00e9es pour associer et configurer l'acc\u00e9l\u00e9rom\u00e8tre et le gyroscope du Gramophone \u00e0 un param\u00e8tre d'un programme Faust : [acc: a b c d e] pour l'acc\u00e9l\u00e9rom\u00e8tre et : [gyr: a b c d e] pour le gyroscope, avec : a : l'axe de l'acc\u00e9l\u00e9rom\u00e8tre ( 0 : X, 1 : Y, 2 : Z) b : la courbe de l'acc\u00e9l\u00e9rom\u00e8tre (voir la figure ci-dessous, 4 courbes sont disponibles) c : l\u2019acc\u00e9l\u00e9ration minimale en m/s^2 d : l\u2019acc\u00e9l\u00e9ration centrale en m/s^2 e : l\u2019acc\u00e9l\u00e9ration maximale en m/s^2 c , d et e sont directement associ\u00e9s \u00e0 la configuration d'un param\u00e8tre d'un programme Faust : parameter = nentry(\"ParamFaust[acc: a b c d e]\",def,min,max,step); c est associ\u00e9 \u00e0 min d est associ\u00e9 \u00e0 def e est associ\u00e9 \u00e0 max Configuration de l'acc\u00e9l\u00e9rom\u00e8tre et du gyroscope du Gramophone Par exemple, le gain d'un synth\u00e9tiseur peut \u00eatre contr\u00f4l\u00e9 avec l'axe X de l'acc\u00e9l\u00e9rom\u00e8tre de la mani\u00e8re suivante : g = nentry(\"gain[acc: 0 0 -10 0 10]\",0.5,0,1,0.01); Avec cette configuration, g = 0 lorsque le Gramophone est inclin\u00e9 \u00e0 90 degr\u00e9s du c\u00f4t\u00e9 gauche, g = 0.5 lorsque le Gramophone est maintenue droit, haut-parleur pointant vers le bas et g = 1 lorsque le Gramophone est inclin\u00e9 \u00e0 90 degr\u00e9s du c\u00f4t\u00e9 droit. Autre exemple : g = nentry(\"gain[acc: 0 0 0 0 10]\",0,0,1,0.01); Avec cette configuration, g = 0 lorsque le Gramophone est inclin\u00e9 \u00e0 90 degr\u00e9s du c\u00f4t\u00e9 gauche et lorsque le Gramophone est maintenue droit, haut-parleur pointant vers le bas. La valeur de g augmente au fur et \u00e0 mesure que le Gramophone est inclin\u00e9 vers la droite. g = 1 lorsque le Gramophone est inclin\u00e9 \u00e0 90 degr\u00e9s du c\u00f4t\u00e9 droit.","title":"Les capteurs de mouvements"},{"location":"gramophone/about/#charger-le-gramophone","text":"Pour charger la batterie du Gramophone, il suffit de le brancher \u00e0 un chargeur USB ou \u00e0 un ordinateur. Pour que la charge puisse s'effectuer, il est n\u00e9cessaire de mettre le Gramophone en mode batterie : le Gramophone ne se chargera pas s'il est en mode neutre ou en mode programmation ! L'autonomie du Gramophone d\u00e9pend de la complexit\u00e9 du programme ex\u00e9cut\u00e9, de la sant\u00e9 de la batterie, et du temps de charge. Il faut compter environ deux heures pour une charge compl\u00e8te.","title":"Charger le Gramophone"},{"location":"gramophone/about/#passer-dun-programme-a-lautre","text":"Plusieurs programmes Faust peuvent \u00eatre install\u00e9s sur un seul Gramophone. Pour passer d'un programme \u00e0 un autre, il suffit de tourner la molette noire plac\u00e9e en bas du Gramophone : Les programmes sont s\u00e9lectionn\u00e9s en boucle. Lorsque le Gramophone est d\u00e9marr\u00e9 en mode neutre ou en mode batterie , le premier programme est toujours s\u00e9lectionn\u00e9. Pour passer au deuxi\u00e8me programme, il suffit de tourner la molette vers la droite. Pour revenir en arri\u00e8re, il faut la tourner vers la gauche. Une fois arriv\u00e9 au dernier programme, tourner la molette vers la droite fait automatiquement revenir au premier programme, etc.","title":"Passer d'un programme \u00e0 l'autre"},{"location":"gramophone/about/#metadatas-de-programmation-du-gramophone","text":"\u00c9l\u00e9ment M\u00e9tadata Description Bouton [switch:1] Bouton en haut du Gramophone : d\u00e9livre 1 lorsqu'il est press\u00e9 et 0 lorsqu'il ne l'est pas. Potentiom\u00e8tre [knob:2] Potentiom\u00e8tre entre le bouton et la photor\u00e9sistance. Fourni un contr\u00f4le continu. Photor\u00e9sistance [knob:3] Photor\u00e9sistance en dessous du potentiom\u00e8tre assignable. Fourni un contr\u00f4le continu. Acc\u00e9l\u00e9rom\u00e8tre [acc: XXX] Acc\u00e9l\u00e9rom\u00e8tre int\u00e9gr\u00e9 au Gramophone. Fourni un contr\u00f4le continu. XXX correspond au param\u00e8tre de configuration de l'acc\u00e9l\u00e9rom\u00e8tre. Gyroscope [gyr: XXX] Gyroscope int\u00e9gr\u00e9 au Gramophone. Fourni un contr\u00f4le continu. XXX correspond au param\u00e8tre de configuration de l'acc\u00e9l\u00e9rom\u00e8tre.","title":"M\u00e9tadatas de programmation du Gramophone"},{"location":"gramophone/loader/","text":"L'application GramoLoader L'application GramoLoader permet de facilement installer des programmes \u00e9crits avec le langage de programmation Faust sur le Gramophone. Elle a \u00e9t\u00e9 sp\u00e9cialement con\u00e7ue pour \u00eatre utilis\u00e9e en tandem avec le Faust Web IDE ou le Faust Playground (voir le tutoriel Programmer le Gramophone ). Fonctionnement Le Faust Web IDE et le Faust Playground g\u00e9n\u00e8rent un fichier appel\u00e9 binary.zip lorsque le bouton \"Gramophone\" est press\u00e9. Une fois t\u00e9l\u00e9charg\u00e9 sur l'ordinateur (g\u00e9n\u00e9ralement dans le dossier t\u00e9l\u00e9chargement), ce fichier peut \u00eatre s\u00e9lectionn\u00e9 avec l'application GramoLoader en cliquant sur le bouton \"S\u00e9lectionner un fichier\" pour le transmettre au Gramophone : Programmation du Gramophone Pour que cela fonctionne, il est n\u00e9cessaire que le Gramophone soit connect\u00e9 \u00e0 l'ordinateur avec un c\u00e2ble USB et qu'il soit mis en mode programmation . Une fois s\u00e9lectionn\u00e9, toute nouvelle version de binary.zip \u00e9tant t\u00e9l\u00e9charg\u00e9e sur l'ordinateur sera automatiquement envoy\u00e9e au Gramophone. L'application GramoLoader doit \u00e9videmment rester ouverte pour que cela fonctionne. Le bouton \"R\u00e9essayer\" permet de r\u00e9initialiser l'envoi de binary.zip au Gramophone. Le bouton \"QUITTER\" permet de quitter l'application. T\u00e9l\u00e9chargement/Installation L'application GramoLoader est t\u00e9l\u00e9chargeable gratuitement depuis ce site et est disponible pour Windows, MacOS et Linux. Windows >> T\u00e9l\u00e9charger GramoLoader pour Windows << Sous Windows, GramoLoader se pr\u00e9sente sous la forme d'un fichier .exe . Ce dernier peut \u00eatre plac\u00e9 n'importe o\u00f9 sur l'ordinateur. Il suffit de le lancer pour d\u00e9marrer l'application. MacOS >> T\u00e9l\u00e9charger GramoLoader pour MacOS << >> T\u00e9l\u00e9charger GramoLoader pour MacOS 10.14 << (Version temporaire r\u00e9solvant un bug) Sous MacOS, GramoLoader se pr\u00e9sente sous la forme d'un fichier .app . Ce dernier peut \u00eatre plac\u00e9 n'importe o\u00f9 sur l'ordinateur (dans le dossier \"Applications\", par exemple). Il suffit de le lancer pour d\u00e9marrer l'application. En cas de probl\u00e8me : Il peut arriver sur certains Mac que le Gramophone ne soit pas reconnu (ex. le GramoLoader affiche un message indiquant qu'il est impossible de se connecter au Gramophone). Cela est probablement d\u00fb au fait que le driver USB correspondant n'est pas install\u00e9. Dans ce cas, installez le driver devrait r\u00e9soudre le probl\u00e8me. Linux (Sources) Il n'existe pas de version pr\u00e9-compil\u00e9e de GramoLoader pour Linux. \u00c0 l'inverse, les sources de l'application peuvent \u00eatre utilis\u00e9es puis lanc\u00e9es en ligne de commande avec : python3 src/FlashAppAsync.py","title":" Le GramoLoader "},{"location":"gramophone/loader/#lapplication-gramoloader","text":"L'application GramoLoader permet de facilement installer des programmes \u00e9crits avec le langage de programmation Faust sur le Gramophone. Elle a \u00e9t\u00e9 sp\u00e9cialement con\u00e7ue pour \u00eatre utilis\u00e9e en tandem avec le Faust Web IDE ou le Faust Playground (voir le tutoriel Programmer le Gramophone ).","title":"L'application GramoLoader"},{"location":"gramophone/loader/#fonctionnement","text":"Le Faust Web IDE et le Faust Playground g\u00e9n\u00e8rent un fichier appel\u00e9 binary.zip lorsque le bouton \"Gramophone\" est press\u00e9. Une fois t\u00e9l\u00e9charg\u00e9 sur l'ordinateur (g\u00e9n\u00e9ralement dans le dossier t\u00e9l\u00e9chargement), ce fichier peut \u00eatre s\u00e9lectionn\u00e9 avec l'application GramoLoader en cliquant sur le bouton \"S\u00e9lectionner un fichier\" pour le transmettre au Gramophone : Programmation du Gramophone Pour que cela fonctionne, il est n\u00e9cessaire que le Gramophone soit connect\u00e9 \u00e0 l'ordinateur avec un c\u00e2ble USB et qu'il soit mis en mode programmation . Une fois s\u00e9lectionn\u00e9, toute nouvelle version de binary.zip \u00e9tant t\u00e9l\u00e9charg\u00e9e sur l'ordinateur sera automatiquement envoy\u00e9e au Gramophone. L'application GramoLoader doit \u00e9videmment rester ouverte pour que cela fonctionne. Le bouton \"R\u00e9essayer\" permet de r\u00e9initialiser l'envoi de binary.zip au Gramophone. Le bouton \"QUITTER\" permet de quitter l'application.","title":"Fonctionnement"},{"location":"gramophone/loader/#telechargementinstallation","text":"L'application GramoLoader est t\u00e9l\u00e9chargeable gratuitement depuis ce site et est disponible pour Windows, MacOS et Linux.","title":"T\u00e9l\u00e9chargement/Installation"},{"location":"gramophone/loader/#windows","text":">> T\u00e9l\u00e9charger GramoLoader pour Windows << Sous Windows, GramoLoader se pr\u00e9sente sous la forme d'un fichier .exe . Ce dernier peut \u00eatre plac\u00e9 n'importe o\u00f9 sur l'ordinateur. Il suffit de le lancer pour d\u00e9marrer l'application.","title":"Windows"},{"location":"gramophone/loader/#macos","text":">> T\u00e9l\u00e9charger GramoLoader pour MacOS << >> T\u00e9l\u00e9charger GramoLoader pour MacOS 10.14 << (Version temporaire r\u00e9solvant un bug) Sous MacOS, GramoLoader se pr\u00e9sente sous la forme d'un fichier .app . Ce dernier peut \u00eatre plac\u00e9 n'importe o\u00f9 sur l'ordinateur (dans le dossier \"Applications\", par exemple). Il suffit de le lancer pour d\u00e9marrer l'application. En cas de probl\u00e8me : Il peut arriver sur certains Mac que le Gramophone ne soit pas reconnu (ex. le GramoLoader affiche un message indiquant qu'il est impossible de se connecter au Gramophone). Cela est probablement d\u00fb au fait que le driver USB correspondant n'est pas install\u00e9. Dans ce cas, installez le driver devrait r\u00e9soudre le probl\u00e8me.","title":"MacOS"},{"location":"gramophone/loader/#linux-sources","text":"Il n'existe pas de version pr\u00e9-compil\u00e9e de GramoLoader pour Linux. \u00c0 l'inverse, les sources de l'application peuvent \u00eatre utilis\u00e9es puis lanc\u00e9es en ligne de commande avec : python3 src/FlashAppAsync.py","title":"Linux (Sources)"},{"location":"gramophone/making/","text":"Protocole d'assemblage et de test du Gramophone Ce document contient les \u00e9l\u00e9ments permettant d'assembler et de tester un Gramophone. Il sert de plateforme d'\u00e9change entre le d\u00e9partement de la recherche de GRAME et la personne en charge de l'assemble des Gramophones. La premi\u00e8re section de ce document concerne l'assemblage du Gramophone. La seconde pr\u00e9sente la proc\u00e9dure de test du Gramophone apr\u00e8s assemblage. Assemblage du Gramophone Le Gramophone est constitu\u00e9 de composants \u00e9lectroniques, d'une carte TTGO T-Audio et d'une coque en plastique. Coque du Gramophone Le code source de la coque du Gramophone peut \u00eatre trouv\u00e9 \u00e0 l'adresse suivante : https://github.com/grame-cncm/gramophone ). La coque du Gramophone est compos\u00e9e de trois \u00e9l\u00e9ments : En haut \u00e0 gauche sur la figure ci-dessus, on trouve le cache de protection du haut-parleur, \u00e0 droite l'\u00e9l\u00e9ment principal et en bas \u00e0 gauche l'arri\u00e8re du Gramophone qui permet d'acc\u00e9der au circuit apr\u00e8s assemblage. Composants et outils n\u00e9cessaire En plus de sa coque, le Gramophone est compos\u00e9 des \u00e9l\u00e9ments suivants : 8 vis YLX TF 2x10 PZ1 AB SPAX 4 vis YLX TF 2.5x10 PZ1 AB SPAX 6 rondelles plates \u00e9troites \u00f83 2 boutons poussoirs encastrables 1 batterie rechargeable 3.7V Lithium-ion, 2.05 Ah Scotch \u00e9lectrique 2 connecteurs Dupont m\u00e2les 2 connecteurs Dupont femelles 2 bo\u00eetiers \u00e0 2 emplacements pour connecteur Dupont 1 carte TTGO T-Audio 1 c\u00e2ble de connection de batterie \u00e0 souder (livr\u00e9 avec la carte TTGO T-Audio) 1 haut-parleur AIYIMA 4Ohms 3W 1 encodeur encastrable avec bouton poussoir int\u00e9gr\u00e9 1 photor\u00e9sistance 2 potentiom\u00e8tres rotatif lin\u00e9aires de 10k 6 r\u00e9sistances de 10k 1 broche femelle IDC 20 pour c\u00e2ble plat/nappe 1 sangle en nylon/polypropyl\u00e8ne 250x25x1.4mm 1 boucle de sangle 25mm 2 c\u00e2bles plats/nappes arc-en-ciel 10 fils de 100mm 1 c\u00e2ble USB/micro USB 1 chargeur USB 2A Fil noir 22 AWG Fil blanc 22 AWG Ga\u00eenes thermor\u00e9tractables de diff\u00e9rents diam\u00e8tres \u00c9tain L'assemblage du Gramophone requiert les outils suivants : 1 fer \u00e0 souder 1 petite pince plate 1 petite pince coupante 1 grosse pince coupante 1 petit tournevis cruciforme 1 petit tournevis plat 1 pince \u00e0 \u00e9piler 1 pince \u00e0 sertir pour connecteur Dupont 1 cl\u00e9 plate de 10mm 1 aspirateur \u00e0 \u00e9tain 1 multim\u00e8tre 1 pince \u00e0 d\u00e9nuder 1 pistolet \u00e0 colle 1 pistolet \u00e0 chaleur Pr\u00e9paration de la nappe Prendre les deux c\u00e2bles plats arc-en-ciel et les placer dans le connecteur correspondant de la mani\u00e8re suivante (respecter l'ordre des couleurs) : A d\u00e9faut d'avoir une pince sp\u00e9cialis\u00e9e, serrer le connecteur \u00e0 l'aide d'un serre-joint ou d'un \u00e9tau : Cette op\u00e9ration doit \u00eatre effectu\u00e9e lentement et avec pr\u00e9cautions afin de ne pas casser le connecteur. Pr\u00e9parer les fils des deux nappes de la mani\u00e8re suivante (isolation, d\u00e9nudage et coupage) : Noter sur la figure ci-dessus que les fils blancs, noirs et bleus de la nappe de gauche ainsi que le fil jaune de la nappe de droite ont \u00e9t\u00e9 r\u00e9serv\u00e9s sans les connecter et en les isolants \u00e0 l'aide de scotch \u00e9lectrique. Pr\u00e9paration des potentiom\u00e8tres Tordre les pates (bornes) des potentiom\u00e8tres afin de faciliter les op\u00e9rations de soudure sur ces derniers : \u00c0 l'aide d'une pince, casser la barre de blocage des potentiom\u00e8tres : Souder une r\u00e9sistance de 10k de la mani\u00e8re suivante sur les potentiom\u00e8tres : Les r\u00e9sistances n'ayant pas de polarit\u00e9, leur orientation n'a pas d'importance. Placer une gaine thermor\u00e9tractable sur la resistance afin de l'isoler : Pr\u00e9paration de l'encodeur Souder 2 r\u00e9sistances sur le c\u00f4t\u00e9 de l'encodeur sur lequel appara\u00eet 3 pattes de la mani\u00e8re suivante : Tresser les deux fils non-soud\u00e9s des deux r\u00e9sistances afin qu'elles soient connect\u00e9es entre-elles : Souder les deux r\u00e9sistances entre-elles au niveau du pli : Connecter la patte centrale du c\u00f4t\u00e9 de l'encodeur avec 3 pattes \u00e0 la patte de gauche du c\u00f4t\u00e9 de l'encodeur avec 2 pattes en soudant un c\u00e2ble ou simplement un fil entre les deux : Pr\u00e9paration de la photor\u00e9sistance Souder une des pattes de la photor\u00e9sistance (pas de polarit\u00e9) \u00e0 une des pattes d'une r\u00e9sistance de 10k: Isoler les deux pattes de la photor\u00e9sistance \u00e0 l'aide de gaines thermor\u00e9tractable : Pr\u00e9paration du bouton poussoir assignable Souder une r\u00e9sistance \u00e0 une des deux pattes d'un des deux boutons : Raccourcir les pattes de la r\u00e9sistance comme montr\u00e9 sur la figure ci-dessus. Pr\u00e9paration du haut-parleur Couper un c\u00e2ble blanc et un c\u00e2ble noir d'environ 8cm et les d\u00e9nuder \u00e0 leurs deux extr\u00e9mit\u00e9s : Souder le c\u00e2ble noir sur la borne n\u00e9gative du haut-parleur et le c\u00e2ble blanc sur la borne positive : Sertir les deux autres extr\u00e9mit\u00e9s des c\u00e2bles soud\u00e9s au haut-parleur avec des connecteurs Dupont m\u00e2les : et placer les connecteurs dans un bo\u00eetiers de taille correspondante. Pr\u00e9paration de la carte TTGO T-Audio Couper un c\u00e2ble blanc et un c\u00e2ble noir d'environ 5cm, les d\u00e9nuder des deux c\u00f4t\u00e9s, les sertir d'un c\u00f4t\u00e9 avec des connecteurs Dupont femelles plac\u00e9s par la suite dans un bo\u00eetier de taille correspondante : Souder les deux autres extr\u00e9mit\u00e9s \u00e0 l'arri\u00e8re de la carte TTGO de la mani\u00e8re suivante : Veiller \u00e0 ce que les c\u00e2bles ne se touchent pas entre-eux. Utiliser le multim\u00e8tre si n\u00e9cessaire en cas de doute. Sur le connecteur \u00e0 24 pattes de l'autre c\u00f4t\u00e9 de la carte, couper les deux pattes inf\u00e9rieures et les deux pates sup\u00e9rieures \u00e0 l'aide de la pince coupante. Apr\u00e8s cette op\u00e9ration, le connecteur ne devrait plus avoir que 20 pattes : Enfin, v\u00e9rifier que l'interrupteur on/off affleurant au bord de la carte soit sur la position off. Pr\u00e9paration de la batterie Souder le connecteur de batterie fourni avec la carte TTGO \u00e0 la batterie (fil rouge avec fil rouge, fil noir avec fil noir). Utiliser des gaines thermor\u00e9tractables pour isoler les soudures. Isoler le fil jaune avec une gaine. Veiller \u00e0 ne pas connecter le c\u00e2ble noir et le c\u00e2ble rouge lors de cette op\u00e9ration ( danger !!! ). Sur la photo ci-dessus, deux soudures ont \u00e9t\u00e9 effectu\u00e9es pour allonger le c\u00e2ble, en pratique, une seule soudure est n\u00e9cessaire pour chaque c\u00e2ble dans la mesure o\u00f9 le connecteur de batterie fourni avec les cartes TTGO est assez long. Pr\u00e9paration de la coque Monter les deux potentiom\u00e8tres, les deux boutons et l'encodeur sur la coque comme suit : Noter que le bouton plac\u00e9 en bas sur la figure ci-dessus est celui n'ayant pas de r\u00e9sistance. Placer la photor\u00e9sistance dans son emplacement et la seller avec de la colle chaude (pistolet \u00e0 colle) : C\u00e2blage de l'alimentation Connecter (souder) avec un c\u00e2ble noir la borne de droite du bouton sans r\u00e9sistance \u00e0 la borne de gauche du potentiom\u00e8tre voisin : Connecter avec un c\u00e2ble noir cette m\u00eame borne du potentiom\u00e8tre \u00e0 la borne centrale de l'encodeur : Connecter avec un c\u00e2ble noir \u00e0 nouveau la borne centrale de l'encodeur \u00e0 la r\u00e9sistance de la photor\u00e9sistance voisine : Connecter avec un c\u00e2ble noir \u00e0 nouveau la r\u00e9sistance de la photor\u00e9sistance \u00e0 la borne de gauche du potentiom\u00e8tre se trouvant \u00e0 sa droite : Connecter avec un c\u00e2ble noir cette m\u00eame borne \u00e0 la r\u00e9sistance du bouton se trouvant \u00e0 sa gauche : Avec un c\u00e2ble blanc, connecter la borne de droite du potentiom\u00e8tre se trouvant \u00e0 droite du bouton sans r\u00e9sistance au deux r\u00e9sistances connect\u00e9es aux bornes de gauche et de droite de l'encodeur voisin : Connecter avec un c\u00e2ble blanc \u00e0 nouveau les deux r\u00e9sistances de l'encodeur \u00e0 la borne de droite de la photor\u00e9sistance voisine : Connecter avec un c\u00e2ble blanc cette m\u00eame borne \u00e0 la borne de droite du potentiom\u00e8tre se trouvant \u00e0 sa droite : Connecter avec un c\u00e2ble cette m\u00eame borne \u00e0 la borne sans r\u00e9sistance du bouton voisin : C\u00e2blage de la nappe Connecter le fil jaune de la premi\u00e8re nappe \u00e0 la borne de gauche du potentiom\u00e8tre se trouvant \u00e0 droite du bouton sans r\u00e9sistance, le fil vert \u00e0 la borne centrale et le fil orange \u00e0 la borne de droite : Connecter le fil violet de la premi\u00e8re nappe \u00e0 la borne de gauche de la r\u00e9sistance et le fil marron de la deuxi\u00e8me nappe \u00e0 la borne non connect\u00e9e du c\u00f4t\u00e9 \u00e0 deux bornes de l'encodeur : Connecter le fil blanc de la premi\u00e8re nappe \u00e0 la borne de gauche du c\u00f4t\u00e9 \u00e0 trois borne de l'encodeur et le fil orange de la deuxi\u00e8me nape \u00e0 la borne de droite. Connecter \u00e9galement le fil gris de la deuxi\u00e8me nappe \u00e0 la borne non-connect\u00e9e du bouton sans r\u00e9sistance : Connecter le fil rouge de la deuxi\u00e8me nappe \u00e0 la borne centrale du potentiom\u00e8tre se trouvant \u00e0 gauche du bouton sur lequel se trouve une r\u00e9sistance. Enfin, connecter le fil noir de la deuxi\u00e8me nappe \u00e0 la borne de ce bouton sur laquelle se trouve la r\u00e9sistance : Assemblage final Installer le haut parleur sur la coque avec les vis de 2.5mm en veillant \u00e0 placer une rondelle entre chaque vis et le haut parleur : Faire ressortir le c\u00e2ble du haut-parleur de l'autre c\u00f4t\u00e9 de la coque : Connecter la carte TTGO \u00e0 la nappe de la mani\u00e8re suivante : Connecter la batterie \u00e0 la carte TTGO : Placer la carte TTGO dans la coque, faire passer le fil de la batterie et du haut parleur sur le c\u00f4t\u00e9 et connecter le fil du haut-parleur aux c\u00e2bles noirs et blancs soud\u00e9s pr\u00e9c\u00e9demment \u00e0 la carte TTGO. Mettre du scotch \u00e9lectrique pour tenir les deux fiches entre-elles : Visser la carte \u00e0 la coque en utilisant deux vis de 2mm s\u00e9par\u00e9es de la carte par des rondelles : Visser le cache de protection du haut-parleur \u00e0 la coque avec des vis de 2mm. Installer la lani\u00e8re au cache arri\u00e8re puis le visser avec des vis de 2mm (attention au d\u00e9trompeur). Mettre les embouts sur les potentiom\u00e8tres et l'encodeur : Le Gramophone est pr\u00eat !!! Proc\u00e9dure de test du Gramophone Un num\u00e9ro de s\u00e9rie doit \u00eatre donn\u00e9 \u00e0 chaque Gramophone. Ce dernier est indiqu\u00e9 au marqueur ind\u00e9l\u00e9bile sur la partie int\u00e9rieure du cache de fermeture du Gramophone. Le tableau suivant : https://docs.google.com/spreadsheets/d/1jJQEU7fEROIA5SLjROb9GM47MD2NmdBlPG9Wnibf0kc/edit?usp=sharing est utilis\u00e9 pour r\u00e9pertorier les r\u00e9sultats des tests. La proc\u00e9dure de test pour chaque Gramophone doit se d\u00e9rouler de la mani\u00e8re suivante : Connecter le Gramophone \u00e0 l'ordinateur avec le c\u00e2ble USB Ouvrir le terminal Taper cd suivi d'un espace et glisser-d\u00e9placer le dossier de test de Gramophone sur le bureau dans le terminal Presser la touche \"entr\u00e9e\" Tapper make flash puis presser \"entr\u00e9e\" Verifier qu'aucun message d'erreur ne soit affich\u00e9 \u00e0 la fin de cette \u00e9tape ( test a ) Tourner le bouton de volume du Gramophone \u00e0 fond puis presser le bouton contr\u00f4l\u00e9 par l'index. Un son doit \u00eatre entendu ( test b ). V\u00e9rifier que le potentiom\u00e8tre de contr\u00f4le du volume fonctionne en maintenant le bouton appuy\u00e9 et en bougeant le potentiom\u00e8tre en m\u00eame temps ( test c ). V\u00e9rifier que le potentiom\u00e8tre de contr\u00f4le de la hauteur du son fonctionne en maintenant le bouton appuy\u00e9 et en bougeant le potentiom\u00e8tre en m\u00eame temps ( test d ). Mettre le potentiom\u00e8tre de contr\u00f4le de la hauteur du son au maximum et v\u00e9rifier que cela active le contr\u00f4le de la hauteur du son par la photor\u00e9sistance en la couvrant ( test e ). V\u00e9rifier que l'encodeur fonctionne en maintenant le bouton d'activation du son appuy\u00e9 et en tournant l'encodeur en m\u00eame temps \u00e0 droite et \u00e0 gauche ( test f ). V\u00e9rifier que l'encodeur fonctionne en maintenant le bouton d'activation du son appuy\u00e9 et en tournant l'encodeur en m\u00eame temps \u00e0 droite et \u00e0 gauche tout en pressant l'encodeur ( test g ). D\u00e9brancher le Gramophone de l'ordinateur et v\u00e9rifier que le bouton de marche et d'arr\u00eat fonctionne ( test h ). Charger la batterie pendant 4h puis allumer le Gramophone. D\u00e9marrer un chronom\u00e8tre au moment ou le Gramophone est allum\u00e9. V\u00e9rifier toutes les 5 minutes que le Gramophone produit du son en appuyant sur le bouton. Lorsque le Gramophone s'arr\u00eate de fonctionner (quand la batterie est vide), noter la valeur du chronom\u00e8tre dans le tableau ( test i ). Si le Gramophone passe tous les tests, recharger sa batterie.","title":"Protocole d'assemblage et de test du Gramophone"},{"location":"gramophone/making/#protocole-dassemblage-et-de-test-du-gramophone","text":"Ce document contient les \u00e9l\u00e9ments permettant d'assembler et de tester un Gramophone. Il sert de plateforme d'\u00e9change entre le d\u00e9partement de la recherche de GRAME et la personne en charge de l'assemble des Gramophones. La premi\u00e8re section de ce document concerne l'assemblage du Gramophone. La seconde pr\u00e9sente la proc\u00e9dure de test du Gramophone apr\u00e8s assemblage.","title":"Protocole d'assemblage et de test du Gramophone"},{"location":"gramophone/making/#assemblage-du-gramophone","text":"Le Gramophone est constitu\u00e9 de composants \u00e9lectroniques, d'une carte TTGO T-Audio et d'une coque en plastique.","title":"Assemblage du Gramophone"},{"location":"gramophone/making/#coque-du-gramophone","text":"Le code source de la coque du Gramophone peut \u00eatre trouv\u00e9 \u00e0 l'adresse suivante : https://github.com/grame-cncm/gramophone ). La coque du Gramophone est compos\u00e9e de trois \u00e9l\u00e9ments : En haut \u00e0 gauche sur la figure ci-dessus, on trouve le cache de protection du haut-parleur, \u00e0 droite l'\u00e9l\u00e9ment principal et en bas \u00e0 gauche l'arri\u00e8re du Gramophone qui permet d'acc\u00e9der au circuit apr\u00e8s assemblage.","title":"Coque du Gramophone"},{"location":"gramophone/making/#composants-et-outils-necessaire","text":"En plus de sa coque, le Gramophone est compos\u00e9 des \u00e9l\u00e9ments suivants : 8 vis YLX TF 2x10 PZ1 AB SPAX 4 vis YLX TF 2.5x10 PZ1 AB SPAX 6 rondelles plates \u00e9troites \u00f83 2 boutons poussoirs encastrables 1 batterie rechargeable 3.7V Lithium-ion, 2.05 Ah Scotch \u00e9lectrique 2 connecteurs Dupont m\u00e2les 2 connecteurs Dupont femelles 2 bo\u00eetiers \u00e0 2 emplacements pour connecteur Dupont 1 carte TTGO T-Audio 1 c\u00e2ble de connection de batterie \u00e0 souder (livr\u00e9 avec la carte TTGO T-Audio) 1 haut-parleur AIYIMA 4Ohms 3W 1 encodeur encastrable avec bouton poussoir int\u00e9gr\u00e9 1 photor\u00e9sistance 2 potentiom\u00e8tres rotatif lin\u00e9aires de 10k 6 r\u00e9sistances de 10k 1 broche femelle IDC 20 pour c\u00e2ble plat/nappe 1 sangle en nylon/polypropyl\u00e8ne 250x25x1.4mm 1 boucle de sangle 25mm 2 c\u00e2bles plats/nappes arc-en-ciel 10 fils de 100mm 1 c\u00e2ble USB/micro USB 1 chargeur USB 2A Fil noir 22 AWG Fil blanc 22 AWG Ga\u00eenes thermor\u00e9tractables de diff\u00e9rents diam\u00e8tres \u00c9tain L'assemblage du Gramophone requiert les outils suivants : 1 fer \u00e0 souder 1 petite pince plate 1 petite pince coupante 1 grosse pince coupante 1 petit tournevis cruciforme 1 petit tournevis plat 1 pince \u00e0 \u00e9piler 1 pince \u00e0 sertir pour connecteur Dupont 1 cl\u00e9 plate de 10mm 1 aspirateur \u00e0 \u00e9tain 1 multim\u00e8tre 1 pince \u00e0 d\u00e9nuder 1 pistolet \u00e0 colle 1 pistolet \u00e0 chaleur","title":"Composants et outils n\u00e9cessaire"},{"location":"gramophone/making/#preparation-de-la-nappe","text":"Prendre les deux c\u00e2bles plats arc-en-ciel et les placer dans le connecteur correspondant de la mani\u00e8re suivante (respecter l'ordre des couleurs) : A d\u00e9faut d'avoir une pince sp\u00e9cialis\u00e9e, serrer le connecteur \u00e0 l'aide d'un serre-joint ou d'un \u00e9tau : Cette op\u00e9ration doit \u00eatre effectu\u00e9e lentement et avec pr\u00e9cautions afin de ne pas casser le connecteur. Pr\u00e9parer les fils des deux nappes de la mani\u00e8re suivante (isolation, d\u00e9nudage et coupage) : Noter sur la figure ci-dessus que les fils blancs, noirs et bleus de la nappe de gauche ainsi que le fil jaune de la nappe de droite ont \u00e9t\u00e9 r\u00e9serv\u00e9s sans les connecter et en les isolants \u00e0 l'aide de scotch \u00e9lectrique.","title":"Pr\u00e9paration de la nappe"},{"location":"gramophone/making/#preparation-des-potentiometres","text":"Tordre les pates (bornes) des potentiom\u00e8tres afin de faciliter les op\u00e9rations de soudure sur ces derniers : \u00c0 l'aide d'une pince, casser la barre de blocage des potentiom\u00e8tres : Souder une r\u00e9sistance de 10k de la mani\u00e8re suivante sur les potentiom\u00e8tres : Les r\u00e9sistances n'ayant pas de polarit\u00e9, leur orientation n'a pas d'importance. Placer une gaine thermor\u00e9tractable sur la resistance afin de l'isoler :","title":"Pr\u00e9paration des potentiom\u00e8tres"},{"location":"gramophone/making/#preparation-de-lencodeur","text":"Souder 2 r\u00e9sistances sur le c\u00f4t\u00e9 de l'encodeur sur lequel appara\u00eet 3 pattes de la mani\u00e8re suivante : Tresser les deux fils non-soud\u00e9s des deux r\u00e9sistances afin qu'elles soient connect\u00e9es entre-elles : Souder les deux r\u00e9sistances entre-elles au niveau du pli : Connecter la patte centrale du c\u00f4t\u00e9 de l'encodeur avec 3 pattes \u00e0 la patte de gauche du c\u00f4t\u00e9 de l'encodeur avec 2 pattes en soudant un c\u00e2ble ou simplement un fil entre les deux :","title":"Pr\u00e9paration de l'encodeur"},{"location":"gramophone/making/#preparation-de-la-photoresistance","text":"Souder une des pattes de la photor\u00e9sistance (pas de polarit\u00e9) \u00e0 une des pattes d'une r\u00e9sistance de 10k: Isoler les deux pattes de la photor\u00e9sistance \u00e0 l'aide de gaines thermor\u00e9tractable :","title":"Pr\u00e9paration de la photor\u00e9sistance"},{"location":"gramophone/making/#preparation-du-bouton-poussoir-assignable","text":"Souder une r\u00e9sistance \u00e0 une des deux pattes d'un des deux boutons : Raccourcir les pattes de la r\u00e9sistance comme montr\u00e9 sur la figure ci-dessus.","title":"Pr\u00e9paration du bouton poussoir assignable"},{"location":"gramophone/making/#preparation-du-haut-parleur","text":"Couper un c\u00e2ble blanc et un c\u00e2ble noir d'environ 8cm et les d\u00e9nuder \u00e0 leurs deux extr\u00e9mit\u00e9s : Souder le c\u00e2ble noir sur la borne n\u00e9gative du haut-parleur et le c\u00e2ble blanc sur la borne positive : Sertir les deux autres extr\u00e9mit\u00e9s des c\u00e2bles soud\u00e9s au haut-parleur avec des connecteurs Dupont m\u00e2les : et placer les connecteurs dans un bo\u00eetiers de taille correspondante.","title":"Pr\u00e9paration du haut-parleur"},{"location":"gramophone/making/#preparation-de-la-carte-ttgo-t-audio","text":"Couper un c\u00e2ble blanc et un c\u00e2ble noir d'environ 5cm, les d\u00e9nuder des deux c\u00f4t\u00e9s, les sertir d'un c\u00f4t\u00e9 avec des connecteurs Dupont femelles plac\u00e9s par la suite dans un bo\u00eetier de taille correspondante : Souder les deux autres extr\u00e9mit\u00e9s \u00e0 l'arri\u00e8re de la carte TTGO de la mani\u00e8re suivante : Veiller \u00e0 ce que les c\u00e2bles ne se touchent pas entre-eux. Utiliser le multim\u00e8tre si n\u00e9cessaire en cas de doute. Sur le connecteur \u00e0 24 pattes de l'autre c\u00f4t\u00e9 de la carte, couper les deux pattes inf\u00e9rieures et les deux pates sup\u00e9rieures \u00e0 l'aide de la pince coupante. Apr\u00e8s cette op\u00e9ration, le connecteur ne devrait plus avoir que 20 pattes : Enfin, v\u00e9rifier que l'interrupteur on/off affleurant au bord de la carte soit sur la position off.","title":"Pr\u00e9paration de la carte TTGO T-Audio"},{"location":"gramophone/making/#preparation-de-la-batterie","text":"Souder le connecteur de batterie fourni avec la carte TTGO \u00e0 la batterie (fil rouge avec fil rouge, fil noir avec fil noir). Utiliser des gaines thermor\u00e9tractables pour isoler les soudures. Isoler le fil jaune avec une gaine. Veiller \u00e0 ne pas connecter le c\u00e2ble noir et le c\u00e2ble rouge lors de cette op\u00e9ration ( danger !!! ). Sur la photo ci-dessus, deux soudures ont \u00e9t\u00e9 effectu\u00e9es pour allonger le c\u00e2ble, en pratique, une seule soudure est n\u00e9cessaire pour chaque c\u00e2ble dans la mesure o\u00f9 le connecteur de batterie fourni avec les cartes TTGO est assez long.","title":"Pr\u00e9paration de la batterie"},{"location":"gramophone/making/#preparation-de-la-coque","text":"Monter les deux potentiom\u00e8tres, les deux boutons et l'encodeur sur la coque comme suit : Noter que le bouton plac\u00e9 en bas sur la figure ci-dessus est celui n'ayant pas de r\u00e9sistance. Placer la photor\u00e9sistance dans son emplacement et la seller avec de la colle chaude (pistolet \u00e0 colle) :","title":"Pr\u00e9paration de la coque"},{"location":"gramophone/making/#cablage-de-lalimentation","text":"Connecter (souder) avec un c\u00e2ble noir la borne de droite du bouton sans r\u00e9sistance \u00e0 la borne de gauche du potentiom\u00e8tre voisin : Connecter avec un c\u00e2ble noir cette m\u00eame borne du potentiom\u00e8tre \u00e0 la borne centrale de l'encodeur : Connecter avec un c\u00e2ble noir \u00e0 nouveau la borne centrale de l'encodeur \u00e0 la r\u00e9sistance de la photor\u00e9sistance voisine : Connecter avec un c\u00e2ble noir \u00e0 nouveau la r\u00e9sistance de la photor\u00e9sistance \u00e0 la borne de gauche du potentiom\u00e8tre se trouvant \u00e0 sa droite : Connecter avec un c\u00e2ble noir cette m\u00eame borne \u00e0 la r\u00e9sistance du bouton se trouvant \u00e0 sa gauche : Avec un c\u00e2ble blanc, connecter la borne de droite du potentiom\u00e8tre se trouvant \u00e0 droite du bouton sans r\u00e9sistance au deux r\u00e9sistances connect\u00e9es aux bornes de gauche et de droite de l'encodeur voisin : Connecter avec un c\u00e2ble blanc \u00e0 nouveau les deux r\u00e9sistances de l'encodeur \u00e0 la borne de droite de la photor\u00e9sistance voisine : Connecter avec un c\u00e2ble blanc cette m\u00eame borne \u00e0 la borne de droite du potentiom\u00e8tre se trouvant \u00e0 sa droite : Connecter avec un c\u00e2ble cette m\u00eame borne \u00e0 la borne sans r\u00e9sistance du bouton voisin :","title":"C\u00e2blage de l'alimentation"},{"location":"gramophone/making/#cablage-de-la-nappe","text":"Connecter le fil jaune de la premi\u00e8re nappe \u00e0 la borne de gauche du potentiom\u00e8tre se trouvant \u00e0 droite du bouton sans r\u00e9sistance, le fil vert \u00e0 la borne centrale et le fil orange \u00e0 la borne de droite : Connecter le fil violet de la premi\u00e8re nappe \u00e0 la borne de gauche de la r\u00e9sistance et le fil marron de la deuxi\u00e8me nappe \u00e0 la borne non connect\u00e9e du c\u00f4t\u00e9 \u00e0 deux bornes de l'encodeur : Connecter le fil blanc de la premi\u00e8re nappe \u00e0 la borne de gauche du c\u00f4t\u00e9 \u00e0 trois borne de l'encodeur et le fil orange de la deuxi\u00e8me nape \u00e0 la borne de droite. Connecter \u00e9galement le fil gris de la deuxi\u00e8me nappe \u00e0 la borne non-connect\u00e9e du bouton sans r\u00e9sistance : Connecter le fil rouge de la deuxi\u00e8me nappe \u00e0 la borne centrale du potentiom\u00e8tre se trouvant \u00e0 gauche du bouton sur lequel se trouve une r\u00e9sistance. Enfin, connecter le fil noir de la deuxi\u00e8me nappe \u00e0 la borne de ce bouton sur laquelle se trouve la r\u00e9sistance :","title":"C\u00e2blage de la nappe"},{"location":"gramophone/making/#assemblage-final","text":"Installer le haut parleur sur la coque avec les vis de 2.5mm en veillant \u00e0 placer une rondelle entre chaque vis et le haut parleur : Faire ressortir le c\u00e2ble du haut-parleur de l'autre c\u00f4t\u00e9 de la coque : Connecter la carte TTGO \u00e0 la nappe de la mani\u00e8re suivante : Connecter la batterie \u00e0 la carte TTGO : Placer la carte TTGO dans la coque, faire passer le fil de la batterie et du haut parleur sur le c\u00f4t\u00e9 et connecter le fil du haut-parleur aux c\u00e2bles noirs et blancs soud\u00e9s pr\u00e9c\u00e9demment \u00e0 la carte TTGO. Mettre du scotch \u00e9lectrique pour tenir les deux fiches entre-elles : Visser la carte \u00e0 la coque en utilisant deux vis de 2mm s\u00e9par\u00e9es de la carte par des rondelles : Visser le cache de protection du haut-parleur \u00e0 la coque avec des vis de 2mm. Installer la lani\u00e8re au cache arri\u00e8re puis le visser avec des vis de 2mm (attention au d\u00e9trompeur). Mettre les embouts sur les potentiom\u00e8tres et l'encodeur : Le Gramophone est pr\u00eat !!!","title":"Assemblage final"},{"location":"gramophone/making/#procedure-de-test-du-gramophone","text":"Un num\u00e9ro de s\u00e9rie doit \u00eatre donn\u00e9 \u00e0 chaque Gramophone. Ce dernier est indiqu\u00e9 au marqueur ind\u00e9l\u00e9bile sur la partie int\u00e9rieure du cache de fermeture du Gramophone. Le tableau suivant : https://docs.google.com/spreadsheets/d/1jJQEU7fEROIA5SLjROb9GM47MD2NmdBlPG9Wnibf0kc/edit?usp=sharing est utilis\u00e9 pour r\u00e9pertorier les r\u00e9sultats des tests. La proc\u00e9dure de test pour chaque Gramophone doit se d\u00e9rouler de la mani\u00e8re suivante : Connecter le Gramophone \u00e0 l'ordinateur avec le c\u00e2ble USB Ouvrir le terminal Taper cd suivi d'un espace et glisser-d\u00e9placer le dossier de test de Gramophone sur le bureau dans le terminal Presser la touche \"entr\u00e9e\" Tapper make flash puis presser \"entr\u00e9e\" Verifier qu'aucun message d'erreur ne soit affich\u00e9 \u00e0 la fin de cette \u00e9tape ( test a ) Tourner le bouton de volume du Gramophone \u00e0 fond puis presser le bouton contr\u00f4l\u00e9 par l'index. Un son doit \u00eatre entendu ( test b ). V\u00e9rifier que le potentiom\u00e8tre de contr\u00f4le du volume fonctionne en maintenant le bouton appuy\u00e9 et en bougeant le potentiom\u00e8tre en m\u00eame temps ( test c ). V\u00e9rifier que le potentiom\u00e8tre de contr\u00f4le de la hauteur du son fonctionne en maintenant le bouton appuy\u00e9 et en bougeant le potentiom\u00e8tre en m\u00eame temps ( test d ). Mettre le potentiom\u00e8tre de contr\u00f4le de la hauteur du son au maximum et v\u00e9rifier que cela active le contr\u00f4le de la hauteur du son par la photor\u00e9sistance en la couvrant ( test e ). V\u00e9rifier que l'encodeur fonctionne en maintenant le bouton d'activation du son appuy\u00e9 et en tournant l'encodeur en m\u00eame temps \u00e0 droite et \u00e0 gauche ( test f ). V\u00e9rifier que l'encodeur fonctionne en maintenant le bouton d'activation du son appuy\u00e9 et en tournant l'encodeur en m\u00eame temps \u00e0 droite et \u00e0 gauche tout en pressant l'encodeur ( test g ). D\u00e9brancher le Gramophone de l'ordinateur et v\u00e9rifier que le bouton de marche et d'arr\u00eat fonctionne ( test h ). Charger la batterie pendant 4h puis allumer le Gramophone. D\u00e9marrer un chronom\u00e8tre au moment ou le Gramophone est allum\u00e9. V\u00e9rifier toutes les 5 minutes que le Gramophone produit du son en appuyant sur le bouton. Lorsque le Gramophone s'arr\u00eate de fonctionner (quand la batterie est vide), noter la valeur du chronom\u00e8tre dans le tableau ( test i ). Si le Gramophone passe tous les tests, recharger sa batterie.","title":"Proc\u00e9dure de test du Gramophone"},{"location":"gramophone/programming/","text":"Programmer le Gramophone Dans ce court tutoriel, nous montrons comment programmer le Gramophone avec le Faust Web IDE et le Faust Playground . Avec le Faust Web IDE Avant de d\u00e9buter ce tutoriel, il est recommand\u00e9 de lire la page sur le Faust Web IDE . Prenons un programme Faust tr\u00e8s simple qui produit une onde en dent de scie : import(\"stdfaust.lib\"); freq = 440; process = os.sawtooth(freq); \u00c9diter/ex\u00e9cuter le programme >> Clique sur le bouton \"\u00c9diter/ex\u00e9cuter le programme\" pour ouvrir le programme ci-dessus dans le Faust Web IDE. Il peut alors \u00eatre ex\u00e9cut\u00e9 directement dans le navigateur Web en suivant la proc\u00e9dure indiqu\u00e9e ici . Pour charger ce programme sur le Gramophone, il suffit de cliquer dans un premier temps sur le bouton \"Gramo\" dans l'IDE : Cela lance la \"fabrication\" du programme et apr\u00e8s un quinzaine de seconde, il devrait \u00eatre automatiquement t\u00e9l\u00e9charg\u00e9 sur ton ordinateur sous la forme d'un fichier appel\u00e9 binary.zip . Si le t\u00e9l\u00e9chargement ne se lance pas, il est possible que ce dernier soit bloqu\u00e9 par ton navigateur Web. Une fois que binary.zip est t\u00e9l\u00e9charg\u00e9, connecte le Gramophone \u00e0 ton ordinateur puis lance l'application GramoLoader . Assure-toi que ton Gramophone est en \"mode programmation\" (l'interrupteur de mise en route du Gramophone doit-\u00eatre plac\u00e9 \u00e0 gauche). Ensuite, s\u00e9lectionne le fichier binary.zip sur l'ordinateur en cliquant sur le bouton \"S\u00e9lectionner un fichier\" : Le programme devrait alors \u00eatre envoy\u00e9 sur le Gramophone. Cette op\u00e9ration prend g\u00e9n\u00e9ralement une quinzaine de secondes. Si tout s'est bien pass\u00e9, le Gramophone devrait \u00eatre pr\u00eat \u00e0 ex\u00e9cuter le programme. Pour cela, il suffit de mettre le Gramophone en \"mode neutre\" en pla\u00e7ant l'interrupteur de d\u00e9marrage \u00e0 droite et en pressant ensuite bri\u00e8vement la mollette de s\u00e9lection des programmes Faust une fois. Un son correspondant \u00e0 l'onde en dent de scie impl\u00e9ment\u00e9e lors de l'\u00e9tape pr\u00e9c\u00e9dente devrait alors \u00eatre \u00e9mis. Le volume du son produit peut \u00eatre contr\u00f4l\u00e9 avec le potentiom\u00e8tre de contr\u00f4le du volume du Gramophone . Pour modifier le programme, il suffit de changer le code dans le Faust Web IDE et de rappuyer sur le bouton \"Gramo\" : rien d'autre \u00e0 faire, l'application GramoLoader se charge de tout ! Comme le programme Faust pr\u00e9sent\u00e9 au d\u00e9but de cette section ne contient aucun param\u00e8tre, il n'est actuellement pas possible d\u2019interagir avec ce dernier. Pour apprendre \u00e0 contr\u00f4ler un programme Faust avec le Gramophone, tu peux maintenant lire le scenario : Hello World : mon premier programme pour Gramophone . Une fois install\u00e9 sur le Gramophone, le programme peut \u00eatre \u00e9galement utilis\u00e9 en mode batterie . Avec le Faust Playground Avant de d\u00e9buter ce tutoriel, il est recommand\u00e9 de lire la page sur le Faust Playground . Construisons tout d'abord un programme tr\u00e8s simple dans le Faust Playground en connectant par exemple une harpe \"Kisana\" (instrument) \u00e0 un Echo (effet) : Du son devrait \u00eatre produit en d\u00e9pla\u00e7ant les potentiom\u00e8tres \"1 (Note 48)\", \"2 (Note 60)\" ou \"3 (Note 72)\" de Kisana. Pour installer ce programme sur le Gramophone, il faut dans un premier temps cliquer sur le bouton \"EXPORT\" dans le menu en haut de la fen\u00eatre : puis sur le bouton \"+ d'options\" : Dans les menus qui s'affichent, s\u00e9lectionne \"esp32\" dans le menu du haut et \"gramophoneFlash\" dans le deuxi\u00e8me, puis clique sur le bouton \"Export\" : Apr\u00e8s un quinzaine de secondes, un bouton \"Download\" devrait s'afficher dans le menu de gauche, clique dessus pour t\u00e9l\u00e9charger le fichier binary.zip contenant le programme du Gramophone sur ton ordinateur : Une fois que binary.zip est t\u00e9l\u00e9charg\u00e9, connecte le Gramophone \u00e0 ton ordinateur puis lance l'application GramoLoader . Assure-toi que ton Gramophone est en \"mode programmation\" (l'interrupteur de mise en route du Gramophone doit-\u00eatre plac\u00e9 \u00e0 gauche). Ensuite, s\u00e9lectionne le fichier binary.zip sur l'ordinateur en cliquant sur le bouton \"S\u00e9lectionner un fichier\" : Le programme devrait alors \u00eatre envoy\u00e9 sur le Gramophone. Cette op\u00e9ration prend g\u00e9n\u00e9ralement une quinzaine de secondes. Si tout s'est bien pass\u00e9, le Gramophone devrait \u00eatre pr\u00eat \u00e0 ex\u00e9cuter le programme. Pour cela, il suffit de mettre le Gramophone en mode neutre en pla\u00e7ant l'interrupteur de d\u00e9marrage \u00e0 droite et en pressant ensuite bri\u00e8vement la mollette de s\u00e9lection des programmes Faust une fois. Un son correspondant au programme cr\u00e9\u00e9 dans le Faust Playground lors de l'\u00e9tape pr\u00e9c\u00e9dente devrait alors \u00eatre \u00e9mis. Pour modifier le programme, il suffit de changer le patch dans le Faust Playground et de re-g\u00e9n\u00e9rer une fichier binary.zip : rien d'autre \u00e0 faire, l'application GramoLoader se charge de tout ! Une fois install\u00e9 sur le Gramophone, le programme peut \u00eatre \u00e9galement utilis\u00e9 en mode batterie .","title":" Programmer le Gramophone "},{"location":"gramophone/programming/#programmer-le-gramophone","text":"Dans ce court tutoriel, nous montrons comment programmer le Gramophone avec le Faust Web IDE et le Faust Playground .","title":"Programmer le Gramophone"},{"location":"gramophone/programming/#avec-le-faust-web-ide","text":"Avant de d\u00e9buter ce tutoriel, il est recommand\u00e9 de lire la page sur le Faust Web IDE . Prenons un programme Faust tr\u00e8s simple qui produit une onde en dent de scie : import(\"stdfaust.lib\"); freq = 440; process = os.sawtooth(freq); \u00c9diter/ex\u00e9cuter le programme >> Clique sur le bouton \"\u00c9diter/ex\u00e9cuter le programme\" pour ouvrir le programme ci-dessus dans le Faust Web IDE. Il peut alors \u00eatre ex\u00e9cut\u00e9 directement dans le navigateur Web en suivant la proc\u00e9dure indiqu\u00e9e ici . Pour charger ce programme sur le Gramophone, il suffit de cliquer dans un premier temps sur le bouton \"Gramo\" dans l'IDE : Cela lance la \"fabrication\" du programme et apr\u00e8s un quinzaine de seconde, il devrait \u00eatre automatiquement t\u00e9l\u00e9charg\u00e9 sur ton ordinateur sous la forme d'un fichier appel\u00e9 binary.zip . Si le t\u00e9l\u00e9chargement ne se lance pas, il est possible que ce dernier soit bloqu\u00e9 par ton navigateur Web. Une fois que binary.zip est t\u00e9l\u00e9charg\u00e9, connecte le Gramophone \u00e0 ton ordinateur puis lance l'application GramoLoader . Assure-toi que ton Gramophone est en \"mode programmation\" (l'interrupteur de mise en route du Gramophone doit-\u00eatre plac\u00e9 \u00e0 gauche). Ensuite, s\u00e9lectionne le fichier binary.zip sur l'ordinateur en cliquant sur le bouton \"S\u00e9lectionner un fichier\" : Le programme devrait alors \u00eatre envoy\u00e9 sur le Gramophone. Cette op\u00e9ration prend g\u00e9n\u00e9ralement une quinzaine de secondes. Si tout s'est bien pass\u00e9, le Gramophone devrait \u00eatre pr\u00eat \u00e0 ex\u00e9cuter le programme. Pour cela, il suffit de mettre le Gramophone en \"mode neutre\" en pla\u00e7ant l'interrupteur de d\u00e9marrage \u00e0 droite et en pressant ensuite bri\u00e8vement la mollette de s\u00e9lection des programmes Faust une fois. Un son correspondant \u00e0 l'onde en dent de scie impl\u00e9ment\u00e9e lors de l'\u00e9tape pr\u00e9c\u00e9dente devrait alors \u00eatre \u00e9mis. Le volume du son produit peut \u00eatre contr\u00f4l\u00e9 avec le potentiom\u00e8tre de contr\u00f4le du volume du Gramophone . Pour modifier le programme, il suffit de changer le code dans le Faust Web IDE et de rappuyer sur le bouton \"Gramo\" : rien d'autre \u00e0 faire, l'application GramoLoader se charge de tout ! Comme le programme Faust pr\u00e9sent\u00e9 au d\u00e9but de cette section ne contient aucun param\u00e8tre, il n'est actuellement pas possible d\u2019interagir avec ce dernier. Pour apprendre \u00e0 contr\u00f4ler un programme Faust avec le Gramophone, tu peux maintenant lire le scenario : Hello World : mon premier programme pour Gramophone . Une fois install\u00e9 sur le Gramophone, le programme peut \u00eatre \u00e9galement utilis\u00e9 en mode batterie .","title":"Avec le Faust Web IDE"},{"location":"gramophone/programming/#avec-le-faust-playground","text":"Avant de d\u00e9buter ce tutoriel, il est recommand\u00e9 de lire la page sur le Faust Playground . Construisons tout d'abord un programme tr\u00e8s simple dans le Faust Playground en connectant par exemple une harpe \"Kisana\" (instrument) \u00e0 un Echo (effet) : Du son devrait \u00eatre produit en d\u00e9pla\u00e7ant les potentiom\u00e8tres \"1 (Note 48)\", \"2 (Note 60)\" ou \"3 (Note 72)\" de Kisana. Pour installer ce programme sur le Gramophone, il faut dans un premier temps cliquer sur le bouton \"EXPORT\" dans le menu en haut de la fen\u00eatre : puis sur le bouton \"+ d'options\" : Dans les menus qui s'affichent, s\u00e9lectionne \"esp32\" dans le menu du haut et \"gramophoneFlash\" dans le deuxi\u00e8me, puis clique sur le bouton \"Export\" : Apr\u00e8s un quinzaine de secondes, un bouton \"Download\" devrait s'afficher dans le menu de gauche, clique dessus pour t\u00e9l\u00e9charger le fichier binary.zip contenant le programme du Gramophone sur ton ordinateur : Une fois que binary.zip est t\u00e9l\u00e9charg\u00e9, connecte le Gramophone \u00e0 ton ordinateur puis lance l'application GramoLoader . Assure-toi que ton Gramophone est en \"mode programmation\" (l'interrupteur de mise en route du Gramophone doit-\u00eatre plac\u00e9 \u00e0 gauche). Ensuite, s\u00e9lectionne le fichier binary.zip sur l'ordinateur en cliquant sur le bouton \"S\u00e9lectionner un fichier\" : Le programme devrait alors \u00eatre envoy\u00e9 sur le Gramophone. Cette op\u00e9ration prend g\u00e9n\u00e9ralement une quinzaine de secondes. Si tout s'est bien pass\u00e9, le Gramophone devrait \u00eatre pr\u00eat \u00e0 ex\u00e9cuter le programme. Pour cela, il suffit de mettre le Gramophone en mode neutre en pla\u00e7ant l'interrupteur de d\u00e9marrage \u00e0 droite et en pressant ensuite bri\u00e8vement la mollette de s\u00e9lection des programmes Faust une fois. Un son correspondant au programme cr\u00e9\u00e9 dans le Faust Playground lors de l'\u00e9tape pr\u00e9c\u00e9dente devrait alors \u00eatre \u00e9mis. Pour modifier le programme, il suffit de changer le patch dans le Faust Playground et de re-g\u00e9n\u00e9rer une fichier binary.zip : rien d'autre \u00e0 faire, l'application GramoLoader se charge de tout ! Une fois install\u00e9 sur le Gramophone, le programme peut \u00eatre \u00e9galement utilis\u00e9 en mode batterie .","title":"Avec le Faust Playground"},{"location":"gramophone/programs/","text":"Quelques programmes Faust pour Gramophone Cette page rassemble une collection de programmes Faust pour Gramophone pr\u00eats \u00e0 l\u2019emploi. TicTac Le programme TicTac produit des petits clics \u00e0 intervals r\u00e9guliers. Ces derniers sont filtr\u00e9s pour appliquer une hauteur au son produit puis envoy\u00e9s dans un \u00e9cho pour augmenter la densit\u00e9 de la texture sonore produite. Les param\u00e8tres du son sont contr\u00f4l\u00e9s avec l' acc\u00e9l\u00e9rom\u00e8tre et le potentiom\u00e8tre assignable . La production de \"clics\" est enclench\u00e9e lorsque le bouton assignable est press\u00e9. import(\"stdfaust.lib\"); // parameters impFreq = hslider(\"impFreq[acc: 1 0 -10 0 10]\",11,2,20,0.01) : si.smoo; resFreq = hslider(\"resFreq[acc: 0 1 -10 0 10]\",1650,300,3000,0.01) : si.smoo; distDrive = hslider(\"distDrive[knob:2]\",0,0,1,0.01) : si.smoo; q = hslider(\"q[knob:3]\",30,10,50,0.01) : si.smoo; del = hslider(\"del[acc: 0 1 -10 0 10]\",0.2,0,0.4,0.01) : si.smoo; fb = hslider(\"fb[acc: 1 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; gate = button(\"gate[switch:1]\"); // DSP process = os.lf_imptrain(impFreq)*gate : fi.resonlp(resFreq,q,1) : ef.echo(0.4,del,fb) : ef.cubicnl(distDrive,0)*0.95; \u00c9diter/ex\u00e9cuter le programme >> Pioupiou Pioupiou est un programme pour Gramophone o\u00f9 la hauteur du son produit (une simple sinuso\u00efde) est contr\u00f4l\u00e9e par le capteur de lumi\u00e8re du Gramophone. Le bouton assignable permet de lancer la production du son. import(\"stdfaust.lib\"); // parameters freq = hslider(\"freq[knob:3]\",300,100,4000,0.01) : si.smoo; gate = button(\"gate[switch:1]\") : si.smoo; // DSP process = os.osc(freq)*gate; \u00c9diter/ex\u00e9cuter le programme >> Clarinet Le programme Clarinet est bas\u00e9 sur un synth\u00e9tiseur (mod\u00e8le physique) de clarinette. La pression du souffle du clarinettiste, la raideur de l'anche, et le diam\u00e8tre du pavillon sont contr\u00f4l\u00e9s par les capteurs de mouvements du Gramophone. La longueur du tube de la clarinette (qui impacte la hauteur du son) est contr\u00f4l\u00e9e par le potentiom\u00e8tre assignable . Le bouton assignable permet d'activer le souffle du clarinettiste. import(\"stdfaust.lib\"); // parameters gate = button(\"gate[switch:1]\"); pressure = hslider(\"pressure[acc: 0 1 -10 0 10]\",0.5,0,1,0.01); reed = hslider(\"reed[knob:3]\",0.5,0,1,0.01) : si.smooth(0.99); bell = hslider(\"bell[acc: 2 0 -10 0 10]\",0.5,0,1,0.01) : si.smooth(0.99); tube = hslider(\"note[knob:2]\",60,40,70,3) : ba.midikey2hz : pm.f2l : si.smooth(0.99); // additional mappings pres = gate*pressure : si.smooth(0.99); process = pm.clarinetModel(tube,pres,reed,bell); \u00c9diter/ex\u00e9cuter le programme >> Comb Comb est un instrument pour Gramophone tr\u00e8s simple bas\u00e9 sur un filtre en peigne. Les capteurs de mouvements du Gramophone contr\u00f4lent le volume et la hauteur du son produit. Le potentiom\u00e8tre assignable contr\u00f4le l'agressivit\u00e9 et la r\u00e9sonance du son. Le bouton assignable permet d'activer la production du son. import(\"stdfaust.lib\"); // parameters gate = button(\"gate[switch:1]\"); gain = hslider(\"gain[acc: 0 1 -10 0 10]\",0.5,0,1,0.01)^2; del = hslider(\"del[acc: 1 0 -10 0 10]\",525,50,1000,1) : si.smoo; fb = hslider(\"fb[knob:2]\",0.7,0.5,1,0.001); process = no.noise*gate*gain : fi.fb_fcomb(1024,del,1,fb); \u00c9diter/ex\u00e9cuter le programme >> FM FM est un instrument pour Gramophone bas\u00e9 sur un synth\u00e9tiseur FM (modulation de fr\u00e9quence). Le bouton assignable peut \u00eatre utilis\u00e9 comme un interrupter pour activer et d\u00e9sactiver le son. La hauteur du son produit peut \u00eatre contr\u00f4l\u00e9e avec le potentiom\u00e8tre assignable . Les capteurs de mouvements du Gramophone permettent de contr\u00f4ler le timbre du son. import(\"stdfaust.lib\"); // parameters gate = checkbox(\"gate[switch:1]\") : si.smoo; freq0 = hslider(\"freq0[knob:2]\",200,50,500,0.01) : si.smoo; ratio1 = hslider(\"ratio1[acc: 0 1 -10 0 10]\",1.5,1,2,0.01) : si.smoo; ratio2 = hslider(\"ratio2[acc: 1 0 -10 0 10]\",1.5,1,2,0.01) : si.smoo; index1 = hslider(\"index1[acc: 1 1 -10 0 10]\",500,0,1000,0.01) : si.smoo; index2 = hslider(\"index2[knob:3]\",500,0,1000,0.01) : si.smoo; // mappings freq1 = freq0*ratio1; freq2 = freq1*ratio2; process = sy.fm((freq0,freq1,freq2),(index1,index2))*gate; \u00c9diter/ex\u00e9cuter le programme >> Brass Brass est un instrument pour Gramophone bas\u00e9 sur un synth\u00e9tiseur de trompette (mod\u00e8le physique). Le bouton assignable permet d'activer le souffle. Le potentiom\u00e8tre assignable contr\u00f4le la distortion du son et peut \u00eatre utilis\u00e9 pour augmenter le gain de l'instrument. Les autres param\u00e8tres du mod\u00e8le sont contr\u00f4l\u00e9s par les capteurs de mouvements . import(\"stdfaust.lib\"); // parameters gate = checkbox(\"gate[switch:1]\"); p = hslider(\"p[acc: 0 1 -10 0 10]\",0.5,0,1,0.01) : si.smoo; lips = hslider(\"lips[acc: 2 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; tube = hslider(\"note[acc: 1 0 -10 0 10]\",60,40,70,3) : ba.midikey2hz : pm.f2l; dist = hslider(\"dist[knob:2]\",0,0,1,0.01) : si.smoo; // mappings pres = gate*p; process = pm.brassModel(tube,lips,0,pres) : ef.cubicnl(dist,0)*0.95; \u00c9diter/ex\u00e9cuter le programme >> Violin Violin est un instrument pour Gramophone bas\u00e9 sur un synth\u00e9tiseur de violon (mod\u00e8le physique). Le bouton assignable permet d'initier le mouvement de l'archet. Le potentiom\u00e8tre assignable contr\u00f4le la longueur de la corde et donc la hauteur du son produit. Les autres param\u00e8tres du mod\u00e8le sont contr\u00f4l\u00e9s par les capteurs de mouvements . import(\"stdfaust.lib\"); // parameters gate = checkbox(\"gate[switch:1]\"); stringLength = hslider(\"stringLength[knob:2]\",1.5,0.5,3,0.01); bowVelocity = hslider(\"p[acc: 0 1 -10 0 10]\",0.1,0,1,0.01)*gate; bowPressure = hslider(\"lips[gyr: 0 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; bowPosition = hslider(\"dist[acc: 1 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; process = pm.violinModel(stringLength,bowPressure,bowVelocity,bowPosition); \u00c9diter/ex\u00e9cuter le programme >>","title":" Programmes Faust pour Gramophone "},{"location":"gramophone/programs/#quelques-programmes-faust-pour-gramophone","text":"Cette page rassemble une collection de programmes Faust pour Gramophone pr\u00eats \u00e0 l\u2019emploi.","title":"Quelques programmes Faust pour Gramophone"},{"location":"gramophone/programs/#tictac","text":"Le programme TicTac produit des petits clics \u00e0 intervals r\u00e9guliers. Ces derniers sont filtr\u00e9s pour appliquer une hauteur au son produit puis envoy\u00e9s dans un \u00e9cho pour augmenter la densit\u00e9 de la texture sonore produite. Les param\u00e8tres du son sont contr\u00f4l\u00e9s avec l' acc\u00e9l\u00e9rom\u00e8tre et le potentiom\u00e8tre assignable . La production de \"clics\" est enclench\u00e9e lorsque le bouton assignable est press\u00e9. import(\"stdfaust.lib\"); // parameters impFreq = hslider(\"impFreq[acc: 1 0 -10 0 10]\",11,2,20,0.01) : si.smoo; resFreq = hslider(\"resFreq[acc: 0 1 -10 0 10]\",1650,300,3000,0.01) : si.smoo; distDrive = hslider(\"distDrive[knob:2]\",0,0,1,0.01) : si.smoo; q = hslider(\"q[knob:3]\",30,10,50,0.01) : si.smoo; del = hslider(\"del[acc: 0 1 -10 0 10]\",0.2,0,0.4,0.01) : si.smoo; fb = hslider(\"fb[acc: 1 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; gate = button(\"gate[switch:1]\"); // DSP process = os.lf_imptrain(impFreq)*gate : fi.resonlp(resFreq,q,1) : ef.echo(0.4,del,fb) : ef.cubicnl(distDrive,0)*0.95; \u00c9diter/ex\u00e9cuter le programme >>","title":"TicTac"},{"location":"gramophone/programs/#pioupiou","text":"Pioupiou est un programme pour Gramophone o\u00f9 la hauteur du son produit (une simple sinuso\u00efde) est contr\u00f4l\u00e9e par le capteur de lumi\u00e8re du Gramophone. Le bouton assignable permet de lancer la production du son. import(\"stdfaust.lib\"); // parameters freq = hslider(\"freq[knob:3]\",300,100,4000,0.01) : si.smoo; gate = button(\"gate[switch:1]\") : si.smoo; // DSP process = os.osc(freq)*gate; \u00c9diter/ex\u00e9cuter le programme >>","title":"Pioupiou"},{"location":"gramophone/programs/#clarinet","text":"Le programme Clarinet est bas\u00e9 sur un synth\u00e9tiseur (mod\u00e8le physique) de clarinette. La pression du souffle du clarinettiste, la raideur de l'anche, et le diam\u00e8tre du pavillon sont contr\u00f4l\u00e9s par les capteurs de mouvements du Gramophone. La longueur du tube de la clarinette (qui impacte la hauteur du son) est contr\u00f4l\u00e9e par le potentiom\u00e8tre assignable . Le bouton assignable permet d'activer le souffle du clarinettiste. import(\"stdfaust.lib\"); // parameters gate = button(\"gate[switch:1]\"); pressure = hslider(\"pressure[acc: 0 1 -10 0 10]\",0.5,0,1,0.01); reed = hslider(\"reed[knob:3]\",0.5,0,1,0.01) : si.smooth(0.99); bell = hslider(\"bell[acc: 2 0 -10 0 10]\",0.5,0,1,0.01) : si.smooth(0.99); tube = hslider(\"note[knob:2]\",60,40,70,3) : ba.midikey2hz : pm.f2l : si.smooth(0.99); // additional mappings pres = gate*pressure : si.smooth(0.99); process = pm.clarinetModel(tube,pres,reed,bell); \u00c9diter/ex\u00e9cuter le programme >>","title":"Clarinet"},{"location":"gramophone/programs/#comb","text":"Comb est un instrument pour Gramophone tr\u00e8s simple bas\u00e9 sur un filtre en peigne. Les capteurs de mouvements du Gramophone contr\u00f4lent le volume et la hauteur du son produit. Le potentiom\u00e8tre assignable contr\u00f4le l'agressivit\u00e9 et la r\u00e9sonance du son. Le bouton assignable permet d'activer la production du son. import(\"stdfaust.lib\"); // parameters gate = button(\"gate[switch:1]\"); gain = hslider(\"gain[acc: 0 1 -10 0 10]\",0.5,0,1,0.01)^2; del = hslider(\"del[acc: 1 0 -10 0 10]\",525,50,1000,1) : si.smoo; fb = hslider(\"fb[knob:2]\",0.7,0.5,1,0.001); process = no.noise*gate*gain : fi.fb_fcomb(1024,del,1,fb); \u00c9diter/ex\u00e9cuter le programme >>","title":"Comb"},{"location":"gramophone/programs/#fm","text":"FM est un instrument pour Gramophone bas\u00e9 sur un synth\u00e9tiseur FM (modulation de fr\u00e9quence). Le bouton assignable peut \u00eatre utilis\u00e9 comme un interrupter pour activer et d\u00e9sactiver le son. La hauteur du son produit peut \u00eatre contr\u00f4l\u00e9e avec le potentiom\u00e8tre assignable . Les capteurs de mouvements du Gramophone permettent de contr\u00f4ler le timbre du son. import(\"stdfaust.lib\"); // parameters gate = checkbox(\"gate[switch:1]\") : si.smoo; freq0 = hslider(\"freq0[knob:2]\",200,50,500,0.01) : si.smoo; ratio1 = hslider(\"ratio1[acc: 0 1 -10 0 10]\",1.5,1,2,0.01) : si.smoo; ratio2 = hslider(\"ratio2[acc: 1 0 -10 0 10]\",1.5,1,2,0.01) : si.smoo; index1 = hslider(\"index1[acc: 1 1 -10 0 10]\",500,0,1000,0.01) : si.smoo; index2 = hslider(\"index2[knob:3]\",500,0,1000,0.01) : si.smoo; // mappings freq1 = freq0*ratio1; freq2 = freq1*ratio2; process = sy.fm((freq0,freq1,freq2),(index1,index2))*gate; \u00c9diter/ex\u00e9cuter le programme >>","title":"FM"},{"location":"gramophone/programs/#brass","text":"Brass est un instrument pour Gramophone bas\u00e9 sur un synth\u00e9tiseur de trompette (mod\u00e8le physique). Le bouton assignable permet d'activer le souffle. Le potentiom\u00e8tre assignable contr\u00f4le la distortion du son et peut \u00eatre utilis\u00e9 pour augmenter le gain de l'instrument. Les autres param\u00e8tres du mod\u00e8le sont contr\u00f4l\u00e9s par les capteurs de mouvements . import(\"stdfaust.lib\"); // parameters gate = checkbox(\"gate[switch:1]\"); p = hslider(\"p[acc: 0 1 -10 0 10]\",0.5,0,1,0.01) : si.smoo; lips = hslider(\"lips[acc: 2 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; tube = hslider(\"note[acc: 1 0 -10 0 10]\",60,40,70,3) : ba.midikey2hz : pm.f2l; dist = hslider(\"dist[knob:2]\",0,0,1,0.01) : si.smoo; // mappings pres = gate*p; process = pm.brassModel(tube,lips,0,pres) : ef.cubicnl(dist,0)*0.95; \u00c9diter/ex\u00e9cuter le programme >>","title":"Brass"},{"location":"gramophone/programs/#violin","text":"Violin est un instrument pour Gramophone bas\u00e9 sur un synth\u00e9tiseur de violon (mod\u00e8le physique). Le bouton assignable permet d'initier le mouvement de l'archet. Le potentiom\u00e8tre assignable contr\u00f4le la longueur de la corde et donc la hauteur du son produit. Les autres param\u00e8tres du mod\u00e8le sont contr\u00f4l\u00e9s par les capteurs de mouvements . import(\"stdfaust.lib\"); // parameters gate = checkbox(\"gate[switch:1]\"); stringLength = hslider(\"stringLength[knob:2]\",1.5,0.5,3,0.01); bowVelocity = hslider(\"p[acc: 0 1 -10 0 10]\",0.1,0,1,0.01)*gate; bowPressure = hslider(\"lips[gyr: 0 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; bowPosition = hslider(\"dist[acc: 1 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; process = pm.violinModel(stringLength,bowPressure,bowVelocity,bowPosition); \u00c9diter/ex\u00e9cuter le programme >>","title":"Violin"},{"location":"scenari/examples/","text":"Visite guid\u00e9e des exemples de programme de Gramophone Le but de ce scenario est d'expliquer le fonctionnement de certains des programmes pour Gramophones disponibles sur ce site dans Le Gramophone/Programmes Faust pour Gramophone . TicTac Pour rappel, le programme TicTac prend la forme suivante : import(\"stdfaust.lib\"); // parameters impFreq = hslider(\"impFreq[acc: 1 0 -10 0 10]\",11,2,20,0.01) : si.smoo; resFreq = hslider(\"resFreq[acc: 0 1 -10 0 10]\",1650,300,3000,0.01) : si.smoo; distDrive = hslider(\"distDrive[knob:2]\",0,0,1,0.01) : si.smoo; q = hslider(\"q[knob:3]\",30,10,50,0.01) : si.smoo; del = hslider(\"del[acc: 0 1 -10 0 10]\",0.2,0,0.4,0.01) : si.smoo; fb = hslider(\"fb[acc: 1 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; gate = button(\"gate[switch:1]\"); // DSP process = os.lf_imptrain(impFreq)*gate : fi.resonlp(resFreq,q,1) : ef.echo(0.4,del,fb) : ef.cubicnl(distDrive,0)*0.95; \u00c9diter/ex\u00e9cuter le programme >> La derni\u00e8re ligne process assemble les diff\u00e9rents \u00e9l\u00e9ments de production du son. os.lf_imptrain produit des clics \u00e0 intervalles r\u00e9guliers (\u00e0 une fr\u00e9quence de impFreq ). Essaye ce programme dans le Faust Web IDE pour entendre le son produit par cette fonction : import(\"stdfaust.lib\"); impFreq = hslider(\"impFreq\",11,2,20,0.01) : si.smoo; process = os.lf_imptrain(impFreq); \u00c9diter/ex\u00e9cuter le programme >> fi.resonlp est un filtre qui permet d'appliquer une hauteur aux clics produits par os.lf_imptrain . La hauteur des sons produits est d\u00e9termin\u00e9e par la fr\u00e9quence resFreq du filtre. Le param\u00e8tre q du filtre d\u00e9termine son \"agressivit\u00e9\". Essaye ce programme dans le Faust Web IDE pour entendre l'effet de fi.resonlp sur os.lf_imptrain : import(\"stdfaust.lib\"); impFreq = hslider(\"impFreq\",11,2,20,0.01) : si.smoo; resFreq = hslider(\"resFreq\",1650,300,3000,0.01) : si.smoo; q = hslider(\"q[knob:3]\",30,10,50,0.01) : si.smoo; process = os.lf_imptrain(impFreq) : fi.resonlp(resFreq,q,1); \u00c9diter/ex\u00e9cuter le programme >> ef.echo est un \u00e9cho","title":"Visite guid\u00e9e des exemples de programme de Gramophone"},{"location":"scenari/examples/#visite-guidee-des-exemples-de-programme-de-gramophone","text":"Le but de ce scenario est d'expliquer le fonctionnement de certains des programmes pour Gramophones disponibles sur ce site dans Le Gramophone/Programmes Faust pour Gramophone .","title":"Visite guid\u00e9e des exemples de programme de Gramophone"},{"location":"scenari/examples/#tictac","text":"Pour rappel, le programme TicTac prend la forme suivante : import(\"stdfaust.lib\"); // parameters impFreq = hslider(\"impFreq[acc: 1 0 -10 0 10]\",11,2,20,0.01) : si.smoo; resFreq = hslider(\"resFreq[acc: 0 1 -10 0 10]\",1650,300,3000,0.01) : si.smoo; distDrive = hslider(\"distDrive[knob:2]\",0,0,1,0.01) : si.smoo; q = hslider(\"q[knob:3]\",30,10,50,0.01) : si.smoo; del = hslider(\"del[acc: 0 1 -10 0 10]\",0.2,0,0.4,0.01) : si.smoo; fb = hslider(\"fb[acc: 1 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; gate = button(\"gate[switch:1]\"); // DSP process = os.lf_imptrain(impFreq)*gate : fi.resonlp(resFreq,q,1) : ef.echo(0.4,del,fb) : ef.cubicnl(distDrive,0)*0.95; \u00c9diter/ex\u00e9cuter le programme >> La derni\u00e8re ligne process assemble les diff\u00e9rents \u00e9l\u00e9ments de production du son. os.lf_imptrain produit des clics \u00e0 intervalles r\u00e9guliers (\u00e0 une fr\u00e9quence de impFreq ). Essaye ce programme dans le Faust Web IDE pour entendre le son produit par cette fonction : import(\"stdfaust.lib\"); impFreq = hslider(\"impFreq\",11,2,20,0.01) : si.smoo; process = os.lf_imptrain(impFreq); \u00c9diter/ex\u00e9cuter le programme >> fi.resonlp est un filtre qui permet d'appliquer une hauteur aux clics produits par os.lf_imptrain . La hauteur des sons produits est d\u00e9termin\u00e9e par la fr\u00e9quence resFreq du filtre. Le param\u00e8tre q du filtre d\u00e9termine son \"agressivit\u00e9\". Essaye ce programme dans le Faust Web IDE pour entendre l'effet de fi.resonlp sur os.lf_imptrain : import(\"stdfaust.lib\"); impFreq = hslider(\"impFreq\",11,2,20,0.01) : si.smoo; resFreq = hslider(\"resFreq\",1650,300,3000,0.01) : si.smoo; q = hslider(\"q[knob:3]\",30,10,50,0.01) : si.smoo; process = os.lf_imptrain(impFreq) : fi.resonlp(resFreq,q,1); \u00c9diter/ex\u00e9cuter le programme >> ef.echo est un \u00e9cho","title":"TicTac"},{"location":"scenari/gesture/","text":"Capter le geste : travailler avec l'acc\u00e9l\u00e9rom\u00e8tre Le Gramophone abrite deux capteurs permettant de mesurer sa position et son d\u00e9placement dans l'espace : un acc\u00e9l\u00e9rom\u00e8tre et un gyroscope. Ce type de capteur est tr\u00e8s commun de nos jours. On les retrouve par example dans la plupart des smartphones et des ordinateurs. Dans le cas du Gramophone, ils peuvent \u00eatre utilis\u00e9s pour contr\u00f4ler les param\u00e8tres du son produit par l'instrument. Le but de ce sc\u00e9nario est d'apprendre \u00e0 utiliser l'acc\u00e9l\u00e9rom\u00e8tre du Gramophone pour cr\u00e9er des instruments de musique expressifs. L'utilisation du gyroscope sera \u00e9tudi\u00e9e dans un autre sc\u00e9nario. Un acc\u00e9l\u00e9rom\u00e8tre mesure l'acc\u00e9l\u00e9ration, c'est-\u00e0-dire le fait de changer la vitesse d'un objet dans l'espace. Si l'objet ne bouge pas ou qu'il se d\u00e9place \u00e0 une vitesse constante, aucune acc\u00e9l\u00e9ration n'est mesur\u00e9e. C'est un peu comme \u00eatre assis dans une voiture quand elle acc\u00e9l\u00e8re ou qu'elle freine : dans ces deux cas, notre corps per\u00e7ois une \"acc\u00e9l\u00e9ration\". L'acc\u00e9l\u00e9rom\u00e8tre du Gramophone est tellement sensible qu'il peut aussi \u00eatre influenc\u00e9 par la gravit\u00e9 de la terre. Dans ce cas l\u00e0, il peut \u00eatre utilis\u00e9 pour mesurer l'inclinaison du Gramophone dans l'espace. Choisir un axe L'acc\u00e9l\u00e9rom\u00e8tre du Gramophone est capable de mesurer l'acc\u00e9l\u00e9ration dans plusieurs directions : X, Y et Z. Les diff\u00e9rents axes de l'acc\u00e9l\u00e9rom\u00e8tre du Gramophone sont pr\u00e9sent\u00e9s ici . Pour contr\u00f4ler un param\u00e8tre d'un programme Faust avec un des axes de l'acc\u00e9l\u00e9rom\u00e8tre, il suffit d'utiliser la m\u00e9tadata [acc: a b c d e] dans la d\u00e9claration du nom du param\u00e8tre. a permet de choisir l'axe de acc\u00e9l\u00e9rom\u00e8tre (0 pour X, 1 pour Y et 2 pour Z). Par exemple, dans le programme pour Gramophone suivant : import(\"stdfaust.lib\"); freq = hslider(\"freq[acc: 0 0 -10 0 10]\",1050,100,2000,0.01) : si.smoo; gate = checkbox(\"gate[switch:1]\") : si.smoo; process = os.osc(freq)*gate; \u00c9diter/ex\u00e9cuter le programme >> le param\u00e8tre freq (fr\u00e9quence) est contr\u00f4l\u00e9 par l'axe X de l'acc\u00e9l\u00e9rom\u00e8tre ( acc: 0 ). Lance ce programme sur le Gramophone et observe ce qui se passe. Pour qu'un son soit produit, il faut appuyer une fois sur le bouton assignable du Gramophone. En inclinant le Gramophone de la mani\u00e8re suivante : tu devrais pouvoir contr\u00f4ler pr\u00e9cis\u00e9ment la hauteur du son produit. Exercise : changer d'axe Avant d'expliquer \u00e0 quoi correspondent les autres param\u00e8tres de la m\u00e9tadata [acc: a b c d e] , essaye de modifier le code pr\u00e9c\u00e9dent pour utiliser l'axe des Y plut\u00f4t que l'axe des X pour contr\u00f4ler la hauteur du son produit : [acc: 1 0 -10 0 10] . Tente de rep\u00e9rer l'orientation de l'axe des Y sur le Gramophone. N'h\u00e9sites pas \u00e0 lire cette page si tu as besoin d'aide. Utiliser des courbes de contr\u00f4le Quatre courbes peuvent \u00eatre utilis\u00e9es pour configurer la mani\u00e8re dont l'acc\u00e9l\u00e9rom\u00e8tre contr\u00f4le un param\u00e8tre d'un programme Faust : Elles sont directement li\u00e9es au param\u00e8tre b de l'acc\u00e9l\u00e9rom\u00e8tre. Dans l'exemple pr\u00e9c\u00e9dent, b=0 , la valeur du param\u00e8tre \u00e9volue donc de mani\u00e8re croissante et lin\u00e9aire le long de l'axe des X. Essaye de configurer b=1 afin d'inverser l'orientation de l'acc\u00e9l\u00e9rom\u00e8tre : import(\"stdfaust.lib\"); freq = hslider(\"freq[acc: 0 1 -10 0 10]\",1050,100,2000,0.01) : si.smoo; gate = checkbox(\"gate[switch:1]\") : si.smoo; process = os.osc(freq)*gate; \u00c9diter/ex\u00e9cuter le programme >> Les courbes 2 et 3 pr\u00e9sentent des comportements plus complexes. N'h\u00e9sites pas \u00e0 les essayer aussi ! Configuration avanc\u00e9e Les param\u00e8tres c , d et e permettent de configurer l'acc\u00e9l\u00e9ration de r\u00e9f\u00e9rence du Gramophone pour diff\u00e9rents points dans l'espace. Comme il s'agit de param\u00e8tres plus avanc\u00e9s, nous n'allons pas les d\u00e9tailler ici. Les param\u00e8tres d'un hslider jouent aussi un r\u00f4le important dans le comportement des acc\u00e9l\u00e9rom\u00e8tres. Dans les exemples pr\u00e9c\u00e9dents, la valeur initiale (1050) du slider \u00e9tait toujours plac\u00e9e pr\u00e9cis\u00e9ment entre la valeur minimale (100) et la valeur maximale (2000) : hslider(\"freq[acc: 0 1 -10 0 10]\",1050,100,2000,0.01) . La valeur initiale de hslider correspond toujours \u00e0 la position centrale du Gramophone. Ainsi, si on la d\u00e9place plus ou moins pr\u00e8s de la valeur maximale ou de la valeur minimale, on changera la comportement de l'acc\u00e9l\u00e9rom\u00e8tre. Par exemple, essaye de configurer la valeur initiale \u00e0 200 : import(\"stdfaust.lib\"); freq = hslider(\"freq[acc: 0 1 -10 0 10]\",200,100,2000,0.01) : si.smoo; gate = checkbox(\"gate[switch:1]\") : si.smoo; process = os.osc(freq)*gate; \u00c9diter/ex\u00e9cuter le programme >> La hauteur du son \u00e9volue lentement de 100 \u00e0 200 Hz lorsque le Gramophone est plac\u00e9 \u00e0 gauche, puis plus rapidement de 200 \u00e0 2000 Hz lorsqu'il est plac\u00e9 \u00e0 droite. Contr\u00f4ler plusieurs param\u00e8tres Plusieurs m\u00e9tadatas d'acc\u00e9l\u00e9rom\u00e8tre peuvent \u00eatre d\u00e9clar\u00e9es en parall\u00e8le pour contr\u00f4ler diff\u00e9rents param\u00e8tres. Par exemple, il est possible d'ajouter un param\u00e8tre de contr\u00f4le du gain \u00e0 notre synth\u00e9tiseur pr\u00e9c\u00e9dent et de le contr\u00f4ler avec l'axe des Y de l'acc\u00e9l\u00e9rom\u00e8tre : import(\"stdfaust.lib\"); freq = hslider(\"freq[acc: 0 0 -10 0 10]\",200,100,2000,0.01) : si.smoo; gain = hslider(\"gain[acc: 1 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; gate = checkbox(\"gate[switch:1]\") : si.smoo; process = os.osc(freq)*gain*gate; \u00c9diter/ex\u00e9cuter le programme >>","title":" Capter le geste : travailler avec l&#39;acc\u00e9l\u00e9rom\u00e8tre "},{"location":"scenari/gesture/#capter-le-geste-travailler-avec-laccelerometre","text":"Le Gramophone abrite deux capteurs permettant de mesurer sa position et son d\u00e9placement dans l'espace : un acc\u00e9l\u00e9rom\u00e8tre et un gyroscope. Ce type de capteur est tr\u00e8s commun de nos jours. On les retrouve par example dans la plupart des smartphones et des ordinateurs. Dans le cas du Gramophone, ils peuvent \u00eatre utilis\u00e9s pour contr\u00f4ler les param\u00e8tres du son produit par l'instrument. Le but de ce sc\u00e9nario est d'apprendre \u00e0 utiliser l'acc\u00e9l\u00e9rom\u00e8tre du Gramophone pour cr\u00e9er des instruments de musique expressifs. L'utilisation du gyroscope sera \u00e9tudi\u00e9e dans un autre sc\u00e9nario. Un acc\u00e9l\u00e9rom\u00e8tre mesure l'acc\u00e9l\u00e9ration, c'est-\u00e0-dire le fait de changer la vitesse d'un objet dans l'espace. Si l'objet ne bouge pas ou qu'il se d\u00e9place \u00e0 une vitesse constante, aucune acc\u00e9l\u00e9ration n'est mesur\u00e9e. C'est un peu comme \u00eatre assis dans une voiture quand elle acc\u00e9l\u00e8re ou qu'elle freine : dans ces deux cas, notre corps per\u00e7ois une \"acc\u00e9l\u00e9ration\". L'acc\u00e9l\u00e9rom\u00e8tre du Gramophone est tellement sensible qu'il peut aussi \u00eatre influenc\u00e9 par la gravit\u00e9 de la terre. Dans ce cas l\u00e0, il peut \u00eatre utilis\u00e9 pour mesurer l'inclinaison du Gramophone dans l'espace.","title":"Capter le geste : travailler avec l'acc\u00e9l\u00e9rom\u00e8tre"},{"location":"scenari/gesture/#choisir-un-axe","text":"L'acc\u00e9l\u00e9rom\u00e8tre du Gramophone est capable de mesurer l'acc\u00e9l\u00e9ration dans plusieurs directions : X, Y et Z. Les diff\u00e9rents axes de l'acc\u00e9l\u00e9rom\u00e8tre du Gramophone sont pr\u00e9sent\u00e9s ici . Pour contr\u00f4ler un param\u00e8tre d'un programme Faust avec un des axes de l'acc\u00e9l\u00e9rom\u00e8tre, il suffit d'utiliser la m\u00e9tadata [acc: a b c d e] dans la d\u00e9claration du nom du param\u00e8tre. a permet de choisir l'axe de acc\u00e9l\u00e9rom\u00e8tre (0 pour X, 1 pour Y et 2 pour Z). Par exemple, dans le programme pour Gramophone suivant : import(\"stdfaust.lib\"); freq = hslider(\"freq[acc: 0 0 -10 0 10]\",1050,100,2000,0.01) : si.smoo; gate = checkbox(\"gate[switch:1]\") : si.smoo; process = os.osc(freq)*gate; \u00c9diter/ex\u00e9cuter le programme >> le param\u00e8tre freq (fr\u00e9quence) est contr\u00f4l\u00e9 par l'axe X de l'acc\u00e9l\u00e9rom\u00e8tre ( acc: 0 ). Lance ce programme sur le Gramophone et observe ce qui se passe. Pour qu'un son soit produit, il faut appuyer une fois sur le bouton assignable du Gramophone. En inclinant le Gramophone de la mani\u00e8re suivante : tu devrais pouvoir contr\u00f4ler pr\u00e9cis\u00e9ment la hauteur du son produit.","title":"Choisir un axe"},{"location":"scenari/gesture/#exercise-changer-daxe","text":"Avant d'expliquer \u00e0 quoi correspondent les autres param\u00e8tres de la m\u00e9tadata [acc: a b c d e] , essaye de modifier le code pr\u00e9c\u00e9dent pour utiliser l'axe des Y plut\u00f4t que l'axe des X pour contr\u00f4ler la hauteur du son produit : [acc: 1 0 -10 0 10] . Tente de rep\u00e9rer l'orientation de l'axe des Y sur le Gramophone. N'h\u00e9sites pas \u00e0 lire cette page si tu as besoin d'aide.","title":"Exercise : changer d'axe"},{"location":"scenari/gesture/#utiliser-des-courbes-de-controle","text":"Quatre courbes peuvent \u00eatre utilis\u00e9es pour configurer la mani\u00e8re dont l'acc\u00e9l\u00e9rom\u00e8tre contr\u00f4le un param\u00e8tre d'un programme Faust : Elles sont directement li\u00e9es au param\u00e8tre b de l'acc\u00e9l\u00e9rom\u00e8tre. Dans l'exemple pr\u00e9c\u00e9dent, b=0 , la valeur du param\u00e8tre \u00e9volue donc de mani\u00e8re croissante et lin\u00e9aire le long de l'axe des X. Essaye de configurer b=1 afin d'inverser l'orientation de l'acc\u00e9l\u00e9rom\u00e8tre : import(\"stdfaust.lib\"); freq = hslider(\"freq[acc: 0 1 -10 0 10]\",1050,100,2000,0.01) : si.smoo; gate = checkbox(\"gate[switch:1]\") : si.smoo; process = os.osc(freq)*gate; \u00c9diter/ex\u00e9cuter le programme >> Les courbes 2 et 3 pr\u00e9sentent des comportements plus complexes. N'h\u00e9sites pas \u00e0 les essayer aussi !","title":"Utiliser des courbes de contr\u00f4le"},{"location":"scenari/gesture/#configuration-avancee","text":"Les param\u00e8tres c , d et e permettent de configurer l'acc\u00e9l\u00e9ration de r\u00e9f\u00e9rence du Gramophone pour diff\u00e9rents points dans l'espace. Comme il s'agit de param\u00e8tres plus avanc\u00e9s, nous n'allons pas les d\u00e9tailler ici. Les param\u00e8tres d'un hslider jouent aussi un r\u00f4le important dans le comportement des acc\u00e9l\u00e9rom\u00e8tres. Dans les exemples pr\u00e9c\u00e9dents, la valeur initiale (1050) du slider \u00e9tait toujours plac\u00e9e pr\u00e9cis\u00e9ment entre la valeur minimale (100) et la valeur maximale (2000) : hslider(\"freq[acc: 0 1 -10 0 10]\",1050,100,2000,0.01) . La valeur initiale de hslider correspond toujours \u00e0 la position centrale du Gramophone. Ainsi, si on la d\u00e9place plus ou moins pr\u00e8s de la valeur maximale ou de la valeur minimale, on changera la comportement de l'acc\u00e9l\u00e9rom\u00e8tre. Par exemple, essaye de configurer la valeur initiale \u00e0 200 : import(\"stdfaust.lib\"); freq = hslider(\"freq[acc: 0 1 -10 0 10]\",200,100,2000,0.01) : si.smoo; gate = checkbox(\"gate[switch:1]\") : si.smoo; process = os.osc(freq)*gate; \u00c9diter/ex\u00e9cuter le programme >> La hauteur du son \u00e9volue lentement de 100 \u00e0 200 Hz lorsque le Gramophone est plac\u00e9 \u00e0 gauche, puis plus rapidement de 200 \u00e0 2000 Hz lorsqu'il est plac\u00e9 \u00e0 droite.","title":"Configuration avanc\u00e9e"},{"location":"scenari/gesture/#controler-plusieurs-parametres","text":"Plusieurs m\u00e9tadatas d'acc\u00e9l\u00e9rom\u00e8tre peuvent \u00eatre d\u00e9clar\u00e9es en parall\u00e8le pour contr\u00f4ler diff\u00e9rents param\u00e8tres. Par exemple, il est possible d'ajouter un param\u00e8tre de contr\u00f4le du gain \u00e0 notre synth\u00e9tiseur pr\u00e9c\u00e9dent et de le contr\u00f4ler avec l'axe des Y de l'acc\u00e9l\u00e9rom\u00e8tre : import(\"stdfaust.lib\"); freq = hslider(\"freq[acc: 0 0 -10 0 10]\",200,100,2000,0.01) : si.smoo; gain = hslider(\"gain[acc: 1 0 -10 0 10]\",0.5,0,1,0.01) : si.smoo; gate = checkbox(\"gate[switch:1]\") : si.smoo; process = os.osc(freq)*gain*gate; \u00c9diter/ex\u00e9cuter le programme >>","title":"Contr\u00f4ler plusieurs param\u00e8tres"},{"location":"scenari/hello-world-gramo/","text":"Hello World sur le Gramophone Dans le sc\u00e9nario pr\u00e9c\u00e9dent ( Hello World : mon premier programme Faust ), un programme Faust tr\u00e8s simple produisant un son pur a \u00e9t\u00e9 impl\u00e9ment\u00e9. Le Faust Web IDE nous a servi d'atelier/d'\u00e9tabli pour prototyper le son de notre futur instrument. Dans ce nouveau sc\u00e9nario, nous allons apprendre \u00e0 transf\u00e9rer un programme \u00e9crit dans le Faust Web IDE vers le Gramophone . Nous verrons aussi comment certains des capteurs (ex. boutons, potentiom\u00e8tres, etc.) du Gramophone peuvent \u00eatre utilis\u00e9s pour contr\u00f4ler le son produit. \u00c0 la fin de ce sc\u00e9nario, tu auras cr\u00e9\u00e9 ton premier instrument sur le Gramophone ! Exporter un programme Faust vers le Gramophone Il est tr\u00e8s simple d'exporter un programme Faust protytp\u00e9 dans le Faust Web IDE . Pour cela, il suffit d'installer le GramoLoader sur ta machine puis de le lancer : Reprenons le programme \u00e9crit dans Hello World : mon premier programme Faust impl\u00e9mentant une onde sinuso\u00efdale contr\u00f4l\u00e9e par un bouton et un potentiom\u00e8tre : import(\"stdfaust.lib\"); on = button(\"on-off\"); freq = hslider(\"frequence\",440,20,3000,1); process = os.osc(freq)*on; \u00c9diter/ex\u00e9cuter le programme >> Pour l'instant, supprimons le bouton car il bloquera le son au d\u00e9marrage du Gramophone : import(\"stdfaust.lib\"); freq = hslider(\"frequence\",440,20,3000,1); process = os.osc(freq); \u00c9diter/ex\u00e9cuter le programme >> Dans le Faust Web IDE, clique sur le bouton Gramo : Une roue devrait se mettre \u00e0 tourner \u00e0 gauche du bouton. Cette op\u00e9ration prend g\u00e9n\u00e9ralement une quinzaine de secondes (pas besoin de rappuyer sur le bouton, \u00e7a n'ira pas plus vite, il faut \u00eatre patient ;) ). Une fois termin\u00e9, le t\u00e9l\u00e9chargement d'un fichier appel\u00e9 binary.zip devrait \u00eatre lanc\u00e9, rappelle toi de l'emplacement dans lequel tu d\u00e9cides de l'enregistrer. Branche le Gramophone avec son c\u00e2ble USB \u00e0 l'ordinateur : puis mets le en mode programmation en pla\u00e7ant l'interrupteur de d\u00e9marrage \u00e0 gauche : Dans l'application GramoLoader, clique sur le bouton \"S\u00e9lectionner un fichier\". S\u00e9lectionne le fichier binary.zip t\u00e9l\u00e9charg\u00e9 lors de l'op\u00e9ration pr\u00e9c\u00e9dente, la programmation du Gramophone devrait \u00eatre lanc\u00e9e et le message suivant devrait s'afficher : \"Programmation du Gramophone en cours\". Si tout se passe bien, l'application GramoLoader devrait afficher le message : \"Programmation termin\u00e9e, en attente d'un nouveau fichier\" au bout d'une quinzaine de secondes. Pour lancer le programme Faust sur le Gramophone, mets le en mode neutre en pla\u00e7ant le bouton de d\u00e9marrage au centre : Le Gramophone devrait se mettre \u00e0 produire une sinuso\u00efde (le m\u00eame son que dans le Faust Web IDE) ! Si aucun son n'est produit, v\u00e9rifie que le volume du Gramophone n'est pas \u00e0 0 en bougeant le potentiom\u00e8tre \u00e0 c\u00f4t\u00e9 du bouton de d\u00e9marrage : Le son produit peut vite devenir ennuyeux puisqu'il n'est pas contr\u00f4lable pour le moment. Pour ne plus l'entendre, n'h\u00e9sites pas \u00e0 baisser le volume du son au minimum. Contr\u00f4ler le son avec le Gramophone Le Gramophone produit donc maintenant un son. Toutefois, pour qu'il devienne un \"vrai\" instrument de musique, il est n\u00e9cessaire de pouvoir contr\u00f4ler ce son. Pour mener \u00e0 bien cette t\u00e2che, le Gramophone donne acc\u00e8s \u00e0 toute une panoplie de capteurs : un bouton un potentiom\u00e8tre un capteur de lumi\u00e8re des capteurs de mouvements (acc\u00e9l\u00e9rom\u00e8tre et gyroscope) qui peuvent \u00eatre li\u00e9s \u00e0 des param\u00e8tres d'un programme Faust depuis le code. Le param\u00e8tre le plus fondamental d'un instrument de musique est de pouvoir contr\u00f4ler le fait qu'un son est produit ou non (ex. quand on souffle dans une flute, quand on appuie sur la touche d'un clavier, etc.). Actuellement, le programme Faust install\u00e9 sur le Gramophone produit du son de mani\u00e8re continue. Essayons d'utiliser le bouton plac\u00e9 dans la partie sup\u00e9rieure du Gramophone : pour activer le son lorsque l'on appuie dessus. Pour cela, il est n\u00e9cessaire d'utiliser une \" m\u00e9tadata \" dans le nom du param\u00e8tre du programme Faust permettant d'activer et de d\u00e9activer le son. La m\u00e9tadata correspondant au bouton assignable du Gramophone est : [switch:1] . Il suffit de placer cette derni\u00e8re dans le nom du param\u00e8tre du programme Faust \u00e0 contr\u00f4ler : on = button(\"on-off[switch:1]\"); Ainsi, lorsque le bouton sur le Gramophone sera press\u00e9, on sera \u00e9gal \u00e0 1 et lorsqu'il ne sera pas press\u00e9 il sera \u00e9gal \u00e0 0 ! De la m\u00eame mani\u00e8re, il est possible d'assigner le param\u00e8tre fr\u00e9quence de notre programme Hello Word au potentiom\u00e8tre \u00e0 c\u00f4t\u00e9 du bouton : en utilisant la m\u00e9tadata [knob:2] dans la d\u00e9claration du nom du param\u00e8tre frequence : freq = hslider(\"frequence[knob:2]\",440,20,3000,1); Ton programme Faust devrait maintenant avoir la forme suivante : import(\"stdfaust.lib\"); on = button(\"on-off[switch:1]\"); freq = hslider(\"frequence[knob:2]\",440,20,3000,1); process = os.osc(freq)*on; \u00c9diter/ex\u00e9cuter le programme >> Assure-toi que ton Gramophone est en mode programmation puis installe cette nouvelle version du programme Faust sur ton Gramophone simplement en appuyant sur le bouton \"Gramo\" dans le Faust Web IDE. Rien \u00e0 faire du c\u00f4t\u00e9 de l'application GramoLoader cette fois-ci \u00e0 condition que tu enregistres le fichier binary.zip au m\u00eame endroit que la derni\u00e8re fois . Au bout d'une trentaine de secondes (et oui, lorsque l'on programme il faut \u00eatre patient :) ), l'application GramoLoader devrait afficher \"Programmation termin\u00e9e\". Mets maintenant ton Gramophone en mode neutre pour lancer le programme. Appuie sur le bouton en haut du Gramophone et essaye de tourner le potentiom\u00e8tre assignable en m\u00eame temps. Si aucun son n'est produit, assure-toi que le potentiom\u00e8tre de contr\u00f4le du volume du son n'est pas \u00e0 0. Maintenant amuse-toi bien et casse les oreilles \u00e0 ton prof ;). Faire fonctionner le Gramophone en mode batterie Le Gramophone n'a pas \u00e9t\u00e9 con\u00e7u pour \u00eatre tout le temps connect\u00e9 \u00e0 un ordinateur mais bien pour \u00eatre utilis\u00e9 comme un instrument de musique en concert. Pour utiliser le Gramophone en mode batterie , il suffit de d\u00e9connecter le c\u00e2ble USB et de pousser l'interrupteur de d\u00e9marrage vers la droite. Pour lancer le programme, il faut alors appuyer sur le gros bouton noir \u00e0 c\u00f4t\u00e9 de l\u2019interrupteur de d\u00e9marrage une ou deux fois : Le Gramophone est pr\u00eat \u00e0 \u00eatre utilis\u00e9 en mode batterie ! N'oublie pas de remettre le Gramophone en mode neutre une fois que tu as termin\u00e9 de t'en servir pour ne pas que la batterie se d\u00e9charge ! Pour en savoir plus sur les diff\u00e9rents modes de fonctionnement du Gramophone, n'h\u00e9sites pas \u00e0 lire cette section Tenir le Gramophone Comme tout instrument de musique, le Gramophone ne se tient pas n'importe comment ;). Pour apprendre \u00e0 tenir le Gramophone correctement, lis cette section . Exercise : contr\u00f4ler la hauteur du son avec le capteur de lumi\u00e8re Tous les capteurs du Gramophone peuvent \u00eatre utilis\u00e9s pour contr\u00f4ler n'importe quel param\u00e8tre d'un programme Faust. Dans cet exercice, essaye de contr\u00f4ler la hauteur (fr\u00e9quence) du son produit avec le capteur de lumi\u00e8re du Gramophone plut\u00f4t que le potentiom\u00e8tre. La m\u00e9tadata correspondant au capteur de lumi\u00e8re est : [knob:3] . Le programme Faust correspondant devrait avoir la forme suivante : import(\"stdfaust.lib\"); on = button(\"on-off[switch:1]\"); freq = hslider(\"frequence[knob:3]\",440,20,3000,1); process = os.osc(freq)*on; \u00c9diter/ex\u00e9cuter le programme >>","title":" Faire fonctionner Hello World sur le Gramophone "},{"location":"scenari/hello-world-gramo/#hello-world-sur-le-gramophone","text":"Dans le sc\u00e9nario pr\u00e9c\u00e9dent ( Hello World : mon premier programme Faust ), un programme Faust tr\u00e8s simple produisant un son pur a \u00e9t\u00e9 impl\u00e9ment\u00e9. Le Faust Web IDE nous a servi d'atelier/d'\u00e9tabli pour prototyper le son de notre futur instrument. Dans ce nouveau sc\u00e9nario, nous allons apprendre \u00e0 transf\u00e9rer un programme \u00e9crit dans le Faust Web IDE vers le Gramophone . Nous verrons aussi comment certains des capteurs (ex. boutons, potentiom\u00e8tres, etc.) du Gramophone peuvent \u00eatre utilis\u00e9s pour contr\u00f4ler le son produit. \u00c0 la fin de ce sc\u00e9nario, tu auras cr\u00e9\u00e9 ton premier instrument sur le Gramophone !","title":"Hello World sur le Gramophone"},{"location":"scenari/hello-world-gramo/#exporter-un-programme-faust-vers-le-gramophone","text":"Il est tr\u00e8s simple d'exporter un programme Faust protytp\u00e9 dans le Faust Web IDE . Pour cela, il suffit d'installer le GramoLoader sur ta machine puis de le lancer : Reprenons le programme \u00e9crit dans Hello World : mon premier programme Faust impl\u00e9mentant une onde sinuso\u00efdale contr\u00f4l\u00e9e par un bouton et un potentiom\u00e8tre : import(\"stdfaust.lib\"); on = button(\"on-off\"); freq = hslider(\"frequence\",440,20,3000,1); process = os.osc(freq)*on; \u00c9diter/ex\u00e9cuter le programme >> Pour l'instant, supprimons le bouton car il bloquera le son au d\u00e9marrage du Gramophone : import(\"stdfaust.lib\"); freq = hslider(\"frequence\",440,20,3000,1); process = os.osc(freq); \u00c9diter/ex\u00e9cuter le programme >> Dans le Faust Web IDE, clique sur le bouton Gramo : Une roue devrait se mettre \u00e0 tourner \u00e0 gauche du bouton. Cette op\u00e9ration prend g\u00e9n\u00e9ralement une quinzaine de secondes (pas besoin de rappuyer sur le bouton, \u00e7a n'ira pas plus vite, il faut \u00eatre patient ;) ). Une fois termin\u00e9, le t\u00e9l\u00e9chargement d'un fichier appel\u00e9 binary.zip devrait \u00eatre lanc\u00e9, rappelle toi de l'emplacement dans lequel tu d\u00e9cides de l'enregistrer. Branche le Gramophone avec son c\u00e2ble USB \u00e0 l'ordinateur : puis mets le en mode programmation en pla\u00e7ant l'interrupteur de d\u00e9marrage \u00e0 gauche : Dans l'application GramoLoader, clique sur le bouton \"S\u00e9lectionner un fichier\". S\u00e9lectionne le fichier binary.zip t\u00e9l\u00e9charg\u00e9 lors de l'op\u00e9ration pr\u00e9c\u00e9dente, la programmation du Gramophone devrait \u00eatre lanc\u00e9e et le message suivant devrait s'afficher : \"Programmation du Gramophone en cours\". Si tout se passe bien, l'application GramoLoader devrait afficher le message : \"Programmation termin\u00e9e, en attente d'un nouveau fichier\" au bout d'une quinzaine de secondes. Pour lancer le programme Faust sur le Gramophone, mets le en mode neutre en pla\u00e7ant le bouton de d\u00e9marrage au centre : Le Gramophone devrait se mettre \u00e0 produire une sinuso\u00efde (le m\u00eame son que dans le Faust Web IDE) ! Si aucun son n'est produit, v\u00e9rifie que le volume du Gramophone n'est pas \u00e0 0 en bougeant le potentiom\u00e8tre \u00e0 c\u00f4t\u00e9 du bouton de d\u00e9marrage : Le son produit peut vite devenir ennuyeux puisqu'il n'est pas contr\u00f4lable pour le moment. Pour ne plus l'entendre, n'h\u00e9sites pas \u00e0 baisser le volume du son au minimum.","title":"Exporter un programme Faust vers le Gramophone"},{"location":"scenari/hello-world-gramo/#controler-le-son-avec-le-gramophone","text":"Le Gramophone produit donc maintenant un son. Toutefois, pour qu'il devienne un \"vrai\" instrument de musique, il est n\u00e9cessaire de pouvoir contr\u00f4ler ce son. Pour mener \u00e0 bien cette t\u00e2che, le Gramophone donne acc\u00e8s \u00e0 toute une panoplie de capteurs : un bouton un potentiom\u00e8tre un capteur de lumi\u00e8re des capteurs de mouvements (acc\u00e9l\u00e9rom\u00e8tre et gyroscope) qui peuvent \u00eatre li\u00e9s \u00e0 des param\u00e8tres d'un programme Faust depuis le code. Le param\u00e8tre le plus fondamental d'un instrument de musique est de pouvoir contr\u00f4ler le fait qu'un son est produit ou non (ex. quand on souffle dans une flute, quand on appuie sur la touche d'un clavier, etc.). Actuellement, le programme Faust install\u00e9 sur le Gramophone produit du son de mani\u00e8re continue. Essayons d'utiliser le bouton plac\u00e9 dans la partie sup\u00e9rieure du Gramophone : pour activer le son lorsque l'on appuie dessus. Pour cela, il est n\u00e9cessaire d'utiliser une \" m\u00e9tadata \" dans le nom du param\u00e8tre du programme Faust permettant d'activer et de d\u00e9activer le son. La m\u00e9tadata correspondant au bouton assignable du Gramophone est : [switch:1] . Il suffit de placer cette derni\u00e8re dans le nom du param\u00e8tre du programme Faust \u00e0 contr\u00f4ler : on = button(\"on-off[switch:1]\"); Ainsi, lorsque le bouton sur le Gramophone sera press\u00e9, on sera \u00e9gal \u00e0 1 et lorsqu'il ne sera pas press\u00e9 il sera \u00e9gal \u00e0 0 ! De la m\u00eame mani\u00e8re, il est possible d'assigner le param\u00e8tre fr\u00e9quence de notre programme Hello Word au potentiom\u00e8tre \u00e0 c\u00f4t\u00e9 du bouton : en utilisant la m\u00e9tadata [knob:2] dans la d\u00e9claration du nom du param\u00e8tre frequence : freq = hslider(\"frequence[knob:2]\",440,20,3000,1); Ton programme Faust devrait maintenant avoir la forme suivante : import(\"stdfaust.lib\"); on = button(\"on-off[switch:1]\"); freq = hslider(\"frequence[knob:2]\",440,20,3000,1); process = os.osc(freq)*on; \u00c9diter/ex\u00e9cuter le programme >> Assure-toi que ton Gramophone est en mode programmation puis installe cette nouvelle version du programme Faust sur ton Gramophone simplement en appuyant sur le bouton \"Gramo\" dans le Faust Web IDE. Rien \u00e0 faire du c\u00f4t\u00e9 de l'application GramoLoader cette fois-ci \u00e0 condition que tu enregistres le fichier binary.zip au m\u00eame endroit que la derni\u00e8re fois . Au bout d'une trentaine de secondes (et oui, lorsque l'on programme il faut \u00eatre patient :) ), l'application GramoLoader devrait afficher \"Programmation termin\u00e9e\". Mets maintenant ton Gramophone en mode neutre pour lancer le programme. Appuie sur le bouton en haut du Gramophone et essaye de tourner le potentiom\u00e8tre assignable en m\u00eame temps. Si aucun son n'est produit, assure-toi que le potentiom\u00e8tre de contr\u00f4le du volume du son n'est pas \u00e0 0. Maintenant amuse-toi bien et casse les oreilles \u00e0 ton prof ;).","title":"Contr\u00f4ler le son avec le Gramophone"},{"location":"scenari/hello-world-gramo/#faire-fonctionner-le-gramophone-en-mode-batterie","text":"Le Gramophone n'a pas \u00e9t\u00e9 con\u00e7u pour \u00eatre tout le temps connect\u00e9 \u00e0 un ordinateur mais bien pour \u00eatre utilis\u00e9 comme un instrument de musique en concert. Pour utiliser le Gramophone en mode batterie , il suffit de d\u00e9connecter le c\u00e2ble USB et de pousser l'interrupteur de d\u00e9marrage vers la droite. Pour lancer le programme, il faut alors appuyer sur le gros bouton noir \u00e0 c\u00f4t\u00e9 de l\u2019interrupteur de d\u00e9marrage une ou deux fois : Le Gramophone est pr\u00eat \u00e0 \u00eatre utilis\u00e9 en mode batterie ! N'oublie pas de remettre le Gramophone en mode neutre une fois que tu as termin\u00e9 de t'en servir pour ne pas que la batterie se d\u00e9charge ! Pour en savoir plus sur les diff\u00e9rents modes de fonctionnement du Gramophone, n'h\u00e9sites pas \u00e0 lire cette section","title":"Faire fonctionner le Gramophone en mode batterie"},{"location":"scenari/hello-world-gramo/#tenir-le-gramophone","text":"Comme tout instrument de musique, le Gramophone ne se tient pas n'importe comment ;). Pour apprendre \u00e0 tenir le Gramophone correctement, lis cette section .","title":"Tenir le Gramophone"},{"location":"scenari/hello-world-gramo/#exercise-controler-la-hauteur-du-son-avec-le-capteur-de-lumiere","text":"Tous les capteurs du Gramophone peuvent \u00eatre utilis\u00e9s pour contr\u00f4ler n'importe quel param\u00e8tre d'un programme Faust. Dans cet exercice, essaye de contr\u00f4ler la hauteur (fr\u00e9quence) du son produit avec le capteur de lumi\u00e8re du Gramophone plut\u00f4t que le potentiom\u00e8tre. La m\u00e9tadata correspondant au capteur de lumi\u00e8re est : [knob:3] . Le programme Faust correspondant devrait avoir la forme suivante : import(\"stdfaust.lib\"); on = button(\"on-off[switch:1]\"); freq = hslider(\"frequence[knob:3]\",440,20,3000,1); process = os.osc(freq)*on; \u00c9diter/ex\u00e9cuter le programme >>","title":"Exercise : contr\u00f4ler la hauteur du son avec le capteur de lumi\u00e8re"},{"location":"scenari/hello-world/","text":"Hello World : mon premier programme Faust Le but de ce sc\u00e9nario est d'\u00e9crire un programme Faust tr\u00e8s simple dans l'optique de le faire fonctionner sur ton Gramophone dans le sc\u00e9nario suivant ( Faire fonctionner Hello World sur le Gramophone ) ! Tu apprendras donc \u00e0 : produire du son avec Faust ; ma\u00eetriser la structure de base d'un programme Faust. L'id\u00e9e est vraiment de te mettre dans la peau d'un \"luthier num\u00e9rique\" ! Avant de commencer, assures toi que le volume de ton ordinateur n'est pas trop fort, surtout si tu travailles avec un casque ! Comme nous allons cr\u00e9er nos propres sons et faire \"quelques exp\u00e9riences\", il est possible que le volume augmente brusquement et de mani\u00e8re impromptue : fais attention \u00e0 tes oreilles. Pourquoi \"Hello World\" ? En programmation informatique, le premier programme que l'on apprend \u00e0 \u00e9crire dans la plupart des langages consiste \u00e0 afficher \"Hello World\" sur l'\u00e9cran, d'o\u00f9 son nom. Comme Faust est sp\u00e9cialement con\u00e7u pour \"programmer des sons\", il n'est pas vraiment capable d'afficher du texte sur l'\u00e9cran comme d'autres langages ou en tout cas, lui demander de faire \u00e7a n'aurait pas de sens. En revanche, synth\u00e9tiser un son pur avec une sinuso\u00efde peut \u00eatre vu comme une des mani\u00e8res les plus simple de produire du son avec Faust. C'est pourquoi notre \"Hello World\" en Faust consistera \u00e0 produire un son pur et \u00e0 le contr\u00f4ler. Produire du son avec Faust Une sinuso\u00efde en Faust Faust permet d\u2019interagir directement avec le haut-parleur de notre ordinateur ou du Gramophone en d\u00e9crivant le son produit avec du code. Dans le cas de Faust, le code peut \u00eatre vu comme une succession de formules math\u00e9matiques connect\u00e9es entres-elles. Pour qu'un haut-parleur produise un son, il est n\u00e9cessaire de le faire vibrer c'est \u00e0 dire que la position de sa membrane doit \u00e9voluer dans le temps. Cette op\u00e9ration peut \u00eatre effectu\u00e9e en envoyant une onde sinuso\u00efde au haut-parleur : Le programme Faust suivant produit une onde sinuso\u00efdale : import(\"stdfaust.lib\"); process = os.osc(440); \u00c9diter/ex\u00e9cuter le programme >> Clique sur le bouton \"\u00c9diter/ex\u00e9cuter le programme\" ci-dessus et ce programme Faust devrait \u00eatre ouvert dans le Faust Web IDE . Cet outil permet d'\u00e9crire du code Faust directement dans un navigateur web, d'entendre le son qu'il produit, puis de l'envoyer vers un Gramophone. D'une certaine mani\u00e8re, c'est une sorte \"d'\u00e9tabli\" pour luthier num\u00e9rique. Ici pas de marteau ni de scie : la fabrication d'instruments de musique passe par le code. Le Faust Web IDE fonctionne mieux dans Mozilla Firefox ou dans Google Chrome que dans les autres navigateurs. Plus d'informations sur cet outil sont disponibles ici . Pour entendre le son produit par ce programme Faust, il est n\u00e9cessaire de l'ex\u00e9cuter. Pour cela, il suffit de cliquer sur le bouton \"Run\" dans le Faust Web IDE : Le son que tu entends est celui d'une sinuso\u00efde, en terme acoustique on appelle \u00e7a un \"son pur\" (il est tr\u00e8s proche du son produit par un diapason). Pour arr\u00eater le son, il est n\u00e9cessaire de stopper l'ex\u00e9cution du programme ce qui se fait en cliquant sur la croix permettant de fermer l'instance du programme : Analysons rapidement les diff\u00e9rents \u00e9l\u00e9ment constituants ce programme. La derni\u00e8re (la deuxi\u00e8me) ligne est la plus importante : c'est elle qui permet de produire le son. process correspond au programme et dans une certaine mesure au haut-parleur. On dit donc ici que le haut-parleur est \u00e9gal \u00e0 os.osc(440) . os.osc impl\u00e9mente un oscillateur sinuso\u00efdal, c'est que l'on appelle une fonction . La fonction os.osc a un seul param\u00e8tre : sa fr\u00e9quence qui est ici configur\u00e9e \u00e0 440 Hz (ce qui correspond \u00e0 un La en musique). La fr\u00e9quence de la sinuso\u00efde permet donc de contr\u00f4ler la hauteur du son. La premi\u00e8re ligne ( import(\"stdfaust.lib\"); ) importe les biblioth\u00e8ques standard de Faust et permet donc d'avoir acc\u00e8s \u00e0 la fonction os.osc . Note que toutes les d\u00e9clarations en Faust se terminent par un point-virgule : cela est tr\u00e8s important et c'est une source d'erreur assez commune. Exercice : changer la hauteur du son Comme il l'a \u00e9t\u00e9 dit juste avant, la hauteur du son produit par la sinuso\u00efde est d\u00e9termin\u00e9e par sa fr\u00e9quence (ici 440 Hz). L'\u00eatre humain peut normalement entendre toutes les fr\u00e9quences entre 20 et 20000 Hz. Toutefois, plus on vieilli, moins l'on entend les fr\u00e9quences \u00e9lev\u00e9es. Ainsi, tes \"vieux profs\" n'entendent certainement plus aucune fr\u00e9quence au dessus de 16000 Hz. Les sons au dessus de 3000 Hz peuvent \u00eatre tr\u00e8s d\u00e9sagr\u00e9ables \u00e0 entendre. Essaye de changer la valeur de la fr\u00e9quence de os.osc pour observer l'effet sur le son produit en veillant \u00e0 ne pas d\u00e9passer 3000. Si tu n'entends pas de son, assure-toi que le programme Faust est bien ex\u00e9cut\u00e9. Ajouter des param\u00e8tres \u00e0 un programme Faust Faust permet de contr\u00f4ler les diff\u00e9rents param\u00e8tres d'un programme avec des \u00e9l\u00e9ments d'interface utilisateur (ex. boutons, potentiom\u00e8tres, etc.). Le but de cette section est : d'ajouter un bouton au programme Faust pour activer et d\u00e9active la production du son ; d'ajouter un potentiom\u00e8tre pour contr\u00f4ler la hauteur du son. Ajouter un bouton pour activer le son Commen\u00e7ons par le bouton, un bouton peut \u00eatre cr\u00e9\u00e9 en Faust avec button(\"nom\") o\u00f9 nom est le nom du bouton. Cet \u00e9l\u00e9ment est \u00e9gal \u00e0 1 lorsqu'il est press\u00e9 et \u00e0 0 lorsqu'il ne l'est pas. Il suffit donc de le multiplier \u00e0 os.osc (multiplier par 0 revient \u00e0 supprimer le son de os.osc et multiplier par 1 \u00e0 le laisser inchang\u00e9) : import(\"stdfaust.lib\"); process = os.osc(440)*button(\"on-off\"); \u00c9diter/ex\u00e9cuter le programme >> Essaye ce programme dans le Faust Web IDE ! Un bouton devrait appara\u00eetre en bas de l'\u00e9cran quand le code est ex\u00e9cut\u00e9. Appuie dessus pour observer son comportement. Afin de rendre ce programme plus propre, il est possible d'assigner notre bouton \u00e0 une variable : import(\"stdfaust.lib\"); on = button(\"on-off\"); process = os.osc(440)*on; \u00c9diter/ex\u00e9cuter le programme >> Ici, on sera \u00e9gal \u00e0 1 quand le bouton est press\u00e9 et \u00e0 0 quand il ne l'est pas. Ajouter un potentiom\u00e8tre pour contr\u00f4ler la hauteur du son Effectuons une op\u00e9ration similaire pour le param\u00e8tre fr\u00e9quence de os.osc en lui assignant un potentiom\u00e8tre. Cela est fait en Faust en utilisant l'objet hslider(\"nom\",a,b,c,d) o\u00f9 nom est le nom du param\u00e8tre, a sa valeur initiale, b son minimum, c son maximum et d sa pr\u00e9cision. Dans le cas du param\u00e8tre fr\u00e9quence, a peut \u00eatre \u00e9gal \u00e0 440 puisqu'il s'agit de la valuer par d\u00e9faut, b \u00e0 20 puisque c'est la fr\u00e9quence la plus basse qui puisse \u00eatre entendue par l'Homme, c \u00e0 3000 (pour ne pas trop nous casser les oreilles) et d \u00e0 1 pour que les valeurs changent de 1 en 1 (ce param\u00e8tre n'a pas vraiment d'importance dans le cas pr\u00e9sent) : import(\"stdfaust.lib\"); on = button(\"on-off\"); process = os.osc(hslider(\"frequence\",440,20,3000,1))*on; \u00c9diter/ex\u00e9cuter le programme >> De la m\u00eame mani\u00e8re que pour le bouton, le potentiom\u00e8tre peut \u00eatre plac\u00e9 dans une variable : import(\"stdfaust.lib\"); on = button(\"on-off\"); freq = hslider(\"frequence\",440,20,3000,1); process = os.osc(freq)*on; \u00c9diter/ex\u00e9cuter le programme >> Quelques points importants \u00e0 savoir Apprendre \u00e0 ma\u00eetriser un langage de programmation peut prendre des mois voir des ann\u00e9es, il est donc assez difficile de tout savoir sur Faust \u00e0 ce stade :). En revanche, voici quelques conseils pour \u00e9viter les erreurs : ne pas oublier les points virgules ; ne pas utiliser de caract\u00e8res sp\u00e9ciaux dont les accents en Fran\u00e7ais (ex. \u00e7, \u00ea, \u00e9, \u0153, etc.) ; diminuer le volume du son quand on ne sait pas trop ce qu'on fait (un accident est vite arriv\u00e9).","title":" Hello World : mon premier programme Faust "},{"location":"scenari/hello-world/#hello-world-mon-premier-programme-faust","text":"Le but de ce sc\u00e9nario est d'\u00e9crire un programme Faust tr\u00e8s simple dans l'optique de le faire fonctionner sur ton Gramophone dans le sc\u00e9nario suivant ( Faire fonctionner Hello World sur le Gramophone ) ! Tu apprendras donc \u00e0 : produire du son avec Faust ; ma\u00eetriser la structure de base d'un programme Faust. L'id\u00e9e est vraiment de te mettre dans la peau d'un \"luthier num\u00e9rique\" ! Avant de commencer, assures toi que le volume de ton ordinateur n'est pas trop fort, surtout si tu travailles avec un casque ! Comme nous allons cr\u00e9er nos propres sons et faire \"quelques exp\u00e9riences\", il est possible que le volume augmente brusquement et de mani\u00e8re impromptue : fais attention \u00e0 tes oreilles.","title":"Hello World : mon premier programme Faust"},{"location":"scenari/hello-world/#pourquoi-hello-world","text":"En programmation informatique, le premier programme que l'on apprend \u00e0 \u00e9crire dans la plupart des langages consiste \u00e0 afficher \"Hello World\" sur l'\u00e9cran, d'o\u00f9 son nom. Comme Faust est sp\u00e9cialement con\u00e7u pour \"programmer des sons\", il n'est pas vraiment capable d'afficher du texte sur l'\u00e9cran comme d'autres langages ou en tout cas, lui demander de faire \u00e7a n'aurait pas de sens. En revanche, synth\u00e9tiser un son pur avec une sinuso\u00efde peut \u00eatre vu comme une des mani\u00e8res les plus simple de produire du son avec Faust. C'est pourquoi notre \"Hello World\" en Faust consistera \u00e0 produire un son pur et \u00e0 le contr\u00f4ler.","title":"Pourquoi \"Hello World\" ?"},{"location":"scenari/hello-world/#produire-du-son-avec-faust","text":"","title":"Produire du son avec Faust"},{"location":"scenari/hello-world/#une-sinusoide-en-faust","text":"Faust permet d\u2019interagir directement avec le haut-parleur de notre ordinateur ou du Gramophone en d\u00e9crivant le son produit avec du code. Dans le cas de Faust, le code peut \u00eatre vu comme une succession de formules math\u00e9matiques connect\u00e9es entres-elles. Pour qu'un haut-parleur produise un son, il est n\u00e9cessaire de le faire vibrer c'est \u00e0 dire que la position de sa membrane doit \u00e9voluer dans le temps. Cette op\u00e9ration peut \u00eatre effectu\u00e9e en envoyant une onde sinuso\u00efde au haut-parleur : Le programme Faust suivant produit une onde sinuso\u00efdale : import(\"stdfaust.lib\"); process = os.osc(440); \u00c9diter/ex\u00e9cuter le programme >> Clique sur le bouton \"\u00c9diter/ex\u00e9cuter le programme\" ci-dessus et ce programme Faust devrait \u00eatre ouvert dans le Faust Web IDE . Cet outil permet d'\u00e9crire du code Faust directement dans un navigateur web, d'entendre le son qu'il produit, puis de l'envoyer vers un Gramophone. D'une certaine mani\u00e8re, c'est une sorte \"d'\u00e9tabli\" pour luthier num\u00e9rique. Ici pas de marteau ni de scie : la fabrication d'instruments de musique passe par le code. Le Faust Web IDE fonctionne mieux dans Mozilla Firefox ou dans Google Chrome que dans les autres navigateurs. Plus d'informations sur cet outil sont disponibles ici . Pour entendre le son produit par ce programme Faust, il est n\u00e9cessaire de l'ex\u00e9cuter. Pour cela, il suffit de cliquer sur le bouton \"Run\" dans le Faust Web IDE : Le son que tu entends est celui d'une sinuso\u00efde, en terme acoustique on appelle \u00e7a un \"son pur\" (il est tr\u00e8s proche du son produit par un diapason). Pour arr\u00eater le son, il est n\u00e9cessaire de stopper l'ex\u00e9cution du programme ce qui se fait en cliquant sur la croix permettant de fermer l'instance du programme : Analysons rapidement les diff\u00e9rents \u00e9l\u00e9ment constituants ce programme. La derni\u00e8re (la deuxi\u00e8me) ligne est la plus importante : c'est elle qui permet de produire le son. process correspond au programme et dans une certaine mesure au haut-parleur. On dit donc ici que le haut-parleur est \u00e9gal \u00e0 os.osc(440) . os.osc impl\u00e9mente un oscillateur sinuso\u00efdal, c'est que l'on appelle une fonction . La fonction os.osc a un seul param\u00e8tre : sa fr\u00e9quence qui est ici configur\u00e9e \u00e0 440 Hz (ce qui correspond \u00e0 un La en musique). La fr\u00e9quence de la sinuso\u00efde permet donc de contr\u00f4ler la hauteur du son. La premi\u00e8re ligne ( import(\"stdfaust.lib\"); ) importe les biblioth\u00e8ques standard de Faust et permet donc d'avoir acc\u00e8s \u00e0 la fonction os.osc . Note que toutes les d\u00e9clarations en Faust se terminent par un point-virgule : cela est tr\u00e8s important et c'est une source d'erreur assez commune.","title":"Une sinuso\u00efde en Faust"},{"location":"scenari/hello-world/#exercice-changer-la-hauteur-du-son","text":"Comme il l'a \u00e9t\u00e9 dit juste avant, la hauteur du son produit par la sinuso\u00efde est d\u00e9termin\u00e9e par sa fr\u00e9quence (ici 440 Hz). L'\u00eatre humain peut normalement entendre toutes les fr\u00e9quences entre 20 et 20000 Hz. Toutefois, plus on vieilli, moins l'on entend les fr\u00e9quences \u00e9lev\u00e9es. Ainsi, tes \"vieux profs\" n'entendent certainement plus aucune fr\u00e9quence au dessus de 16000 Hz. Les sons au dessus de 3000 Hz peuvent \u00eatre tr\u00e8s d\u00e9sagr\u00e9ables \u00e0 entendre. Essaye de changer la valeur de la fr\u00e9quence de os.osc pour observer l'effet sur le son produit en veillant \u00e0 ne pas d\u00e9passer 3000. Si tu n'entends pas de son, assure-toi que le programme Faust est bien ex\u00e9cut\u00e9.","title":"Exercice : changer la hauteur du son"},{"location":"scenari/hello-world/#ajouter-des-parametres-a-un-programme-faust","text":"Faust permet de contr\u00f4ler les diff\u00e9rents param\u00e8tres d'un programme avec des \u00e9l\u00e9ments d'interface utilisateur (ex. boutons, potentiom\u00e8tres, etc.). Le but de cette section est : d'ajouter un bouton au programme Faust pour activer et d\u00e9active la production du son ; d'ajouter un potentiom\u00e8tre pour contr\u00f4ler la hauteur du son.","title":"Ajouter des param\u00e8tres \u00e0 un programme Faust"},{"location":"scenari/hello-world/#ajouter-un-bouton-pour-activer-le-son","text":"Commen\u00e7ons par le bouton, un bouton peut \u00eatre cr\u00e9\u00e9 en Faust avec button(\"nom\") o\u00f9 nom est le nom du bouton. Cet \u00e9l\u00e9ment est \u00e9gal \u00e0 1 lorsqu'il est press\u00e9 et \u00e0 0 lorsqu'il ne l'est pas. Il suffit donc de le multiplier \u00e0 os.osc (multiplier par 0 revient \u00e0 supprimer le son de os.osc et multiplier par 1 \u00e0 le laisser inchang\u00e9) : import(\"stdfaust.lib\"); process = os.osc(440)*button(\"on-off\"); \u00c9diter/ex\u00e9cuter le programme >> Essaye ce programme dans le Faust Web IDE ! Un bouton devrait appara\u00eetre en bas de l'\u00e9cran quand le code est ex\u00e9cut\u00e9. Appuie dessus pour observer son comportement. Afin de rendre ce programme plus propre, il est possible d'assigner notre bouton \u00e0 une variable : import(\"stdfaust.lib\"); on = button(\"on-off\"); process = os.osc(440)*on; \u00c9diter/ex\u00e9cuter le programme >> Ici, on sera \u00e9gal \u00e0 1 quand le bouton est press\u00e9 et \u00e0 0 quand il ne l'est pas.","title":"Ajouter un bouton pour activer le son"},{"location":"scenari/hello-world/#ajouter-un-potentiometre-pour-controler-la-hauteur-du-son","text":"Effectuons une op\u00e9ration similaire pour le param\u00e8tre fr\u00e9quence de os.osc en lui assignant un potentiom\u00e8tre. Cela est fait en Faust en utilisant l'objet hslider(\"nom\",a,b,c,d) o\u00f9 nom est le nom du param\u00e8tre, a sa valeur initiale, b son minimum, c son maximum et d sa pr\u00e9cision. Dans le cas du param\u00e8tre fr\u00e9quence, a peut \u00eatre \u00e9gal \u00e0 440 puisqu'il s'agit de la valuer par d\u00e9faut, b \u00e0 20 puisque c'est la fr\u00e9quence la plus basse qui puisse \u00eatre entendue par l'Homme, c \u00e0 3000 (pour ne pas trop nous casser les oreilles) et d \u00e0 1 pour que les valeurs changent de 1 en 1 (ce param\u00e8tre n'a pas vraiment d'importance dans le cas pr\u00e9sent) : import(\"stdfaust.lib\"); on = button(\"on-off\"); process = os.osc(hslider(\"frequence\",440,20,3000,1))*on; \u00c9diter/ex\u00e9cuter le programme >> De la m\u00eame mani\u00e8re que pour le bouton, le potentiom\u00e8tre peut \u00eatre plac\u00e9 dans une variable : import(\"stdfaust.lib\"); on = button(\"on-off\"); freq = hslider(\"frequence\",440,20,3000,1); process = os.osc(freq)*on; \u00c9diter/ex\u00e9cuter le programme >>","title":"Ajouter un potentiom\u00e8tre pour contr\u00f4ler la hauteur du son"},{"location":"scenari/hello-world/#quelques-points-importants-a-savoir","text":"Apprendre \u00e0 ma\u00eetriser un langage de programmation peut prendre des mois voir des ann\u00e9es, il est donc assez difficile de tout savoir sur Faust \u00e0 ce stade :). En revanche, voici quelques conseils pour \u00e9viter les erreurs : ne pas oublier les points virgules ; ne pas utiliser de caract\u00e8res sp\u00e9ciaux dont les accents en Fran\u00e7ais (ex. \u00e7, \u00ea, \u00e9, \u0153, etc.) ; diminuer le volume du son quand on ne sait pas trop ce qu'on fait (un accident est vite arriv\u00e9).","title":"Quelques points importants \u00e0 savoir"},{"location":"scenari/introduction/","text":"Introduction Vue d\u2019ensemble Le projet Amstramgrame a pour but de favoriser l\u2019apprentissage de concepts scientifiques li\u00e9s aux math\u00e9matiques, \u00e0 la physique et \u00e0 l\u2019informatique par des applications concr\u00e8tes dans des domaines artistiques comme la musique (ex. lutherie, composition et musique d\u2019ensemble), la danse (geste chor\u00e9graphi\u00e9), etc. Pour ce faire, Amstramgrame s\u2019appuie sur 3 outils : des sc\u00e9narii p\u00e9dagogiques courts ex\u00e9cutables en moins de 2h donnant des pistes de travail aux enseignants issus de plusieurs disciplines (ex. musique, math\u00e9matiques, physique, etc.) pr\u00e9sents sur le site web ; le langage de programmation Faust ( https://faust.grame.fr ) int\u00e9gr\u00e9 directement dans le site web ; le \" Gramophone \" - instrument de musique enti\u00e8rement programmable en Faust et qui permet de rendre tangible les concepts abstraits \u00e9tudi\u00e9s dans les diff\u00e9rents sc\u00e9narii pr\u00e9sent\u00e9s sur le site web. Des valises de 30 Gramophones sont mise \u00e0 disposition dans les \u00e9tablissements scolaires. Le projet n\u00e9cessite \u00e9galement l\u2019utilisation d\u2019ordinateurs sur place pour acc\u00e9der au site web d\u2019Amstramgrame et pour programmer les Gramophones. Les th\u00e8mes des sc\u00e9narios sont modulaires afin qu\u2019ils puissent \u00eatre abord\u00e9s dans le contexte de diff\u00e9rents cours (ex. maths, physique, techno, musique, etc.). Des id\u00e9es de projets pluridisciplinaires alliant les comp\u00e9tences acquises dans les diff\u00e9rents sc\u00e9narios p\u00e9dagogiques sont \u00e9galement propos\u00e9es sur le site web d\u2019Amstramgrame. L\u2019ensemble des programmes \u00e9tudi\u00e9s dans les sc\u00e9narii d\u2019AmstramGrame peuvent \u00e9galement \u00eatre transform\u00e9s en applications pour smartphone Android afin que les \u00e9tablissements n\u2019ayant pas acc\u00e8s au Gramophones puissent b\u00e9n\u00e9ficier d\u2019une alternative. C'est quoi le code ? La notion de programme informatique est au c\u0153ur de la r\u00e9volution num\u00e9rique. Nous interagissons au quotidien avec des programmes informatiques, que ce soit sous la forme d\u2019applications pour smartphones, d\u2019assistance dans les voitures, d\u2019objets connect\u00e9s ou encore de pages web. Or derri\u00e8re chaque programme informatique se cache un ensemble d\u2019instructions qui le constituent : le code. Il existe une grande vari\u00e9t\u00e9 de mani\u00e8res de programmer. Depuis FORTRAN, le premier langage de programmation de haut niveau cr\u00e9\u00e9 en 1954, leur nombre n\u2019a cess\u00e9 d\u2019augmenter, chacun d\u00e9veloppant sa syntaxe propre. Tandis que certains privil\u00e9gient une approche g\u00e9n\u00e9raliste, d\u2019autres sont con\u00e7us \u00e0 des fins sp\u00e9cifiques, comme par exemple les langages utilis\u00e9s en bourse et dans le domaine de la finance. Beaucoup de langages de programmation sont dit open-source, c\u2019est-\u00e0-dire dont le code est ouvert et libre d\u2019acc\u00e8s. Parmi les langages de programmation les plus populaires en 2020, on trouve : Java Javascript Python C C++ On discerne deux grandes familles de langages de programmation, aussi appel\u00e9es \"paradigmes\" : les langages fonctionnels et les langages imp\u00e9ratifs . La programmation fonctionnelle d\u2019abord, par laquelle on compose un probl\u00e8me sous la forme d\u2019un ensemble de fonctions math\u00e9matiques \u00e0 ex\u00e9cuter, traduites dans un second temps dans le langage de la machine (on parle alors de compilation). Elle facilite la compr\u00e9hension par du code court et expressif, et produit peu de bugs. L\u2019autre famille de programmation est dite imp\u00e9rative (ou proc\u00e9durale), et permet d\u2019\u00e9crire du code qui d\u00e9crit exactement et en d\u00e9tail les \u00e9tapes que l\u2019ordinateur doit effectuer pour atteindre l\u2019objectif, sans \u00e9tape de traduction dans le langage de la machine. Bien que la plupart des langages aient \u00e9t\u00e9 con\u00e7us pour prendre en charge un paradigme de programmation sp\u00e9cifique, de nombreux langages g\u00e9n\u00e9raux sont suffisamment flexibles pour passer de l\u2019un \u00e0 l\u2019autre. \u00c0 l\u2019instar de nombreux pays comme les \u00c9tats-Unis, l\u2019Angleterre ou encore l\u2019Allemagne, la France a choisi d\u2019inscrire le codage informatique dans les programmes scolaires d\u00e8s le coll\u00e8ge. Depuis la rentr\u00e9e 2016, les professeurs des \u00e9coles et enseignants doivent initier les \u00e9l\u00e8ves \u00e0 la programmation informatique, dans le but de d\u00e9velopper leur sens logique et leur capacit\u00e9 \u00e0 d\u00e9couper un probl\u00e8me en sous-probl\u00e8mes. Au lyc\u00e9e, en Enseignement du Num\u00e9rique et Sciences Informatiques de premi\u00e8re g\u00e9n\u00e9rale, le langage Python est utilis\u00e9. Ce langage est simple d\u2019usage, concis, libre et gratuit, largement r\u00e9pandu, riche de biblioth\u00e8ques adapt\u00e9es et b\u00e9n\u00e9ficie d\u2019une vaste communaut\u00e9 de d\u00e9veloppeurs. Pourtant, le projet Amstramgrame s\u2019appuie sur l\u2019utilisation de Faust. Pourquoi ? Pourquoi Faust ? Faust (Functional Audio Stream) est un langage de programmation fonctionnel d\u00e9velopp\u00e9 principalement \u00e0 Grame, et destin\u00e9 sp\u00e9cifiquement \u00e0 la cr\u00e9ation sonore. Il est n\u00e9 en r\u00e9ponse \u00e0 un besoin qui \u00e9merge d\u00e8s les ann\u00e9es 1950 : disposer d\u2019un \"vocabulaire\" adapt\u00e9 pour d\u00e9crire des proc\u00e9d\u00e9s musicaux de synth\u00e8se et de traitement du son dans toute leur complexit\u00e9. Faust propose pour ce fait une s\u00e9mantique simple et rigoureuse, et des techniques de compilation sophistiqu\u00e9es rendant accessible \u00e0 des artistes, des r\u00e9alisateurs en informatique musicale, etc., sans connaissance en programmation, des d\u00e9veloppements qui n\u00e9cessitaient traditionnellement l\u2019emploi de langages complexes comme C ou C++. Faust se diff\u00e9rencie en effet des autres langages musicaux par le fait qu\u2019il est compil\u00e9 (c\u2019est-\u00e0-dire traduit directement dans le langage de la machine) plut\u00f4t qu\u2019interpr\u00e9t\u00e9. Cela lui permet d\u2019exprimer des calculs fonctionnant \u00e0 l\u2019\u00e9chantillon pr\u00e8s pouvant fonctionner sur toutes sortes de plateformes. Ainsi, Faust offre une alternative plus simple et plus efficace \u00e0 Python pour, par exemple, programmer des plug-ins audios, des applications musicales, etc. Le projet Amstramgrame privil\u00e9gie donc Faust pour son efficacit\u00e9 dans la cr\u00e9ation sonore. Mais un apprenti codeur aura tout int\u00e9r\u00eat \u00e0 varier les langages de programmation qu\u2019il utilise selon ses projets, \u00e0 la mani\u00e8re des langues vivantes o\u00f9 il serait inconcevable, au si\u00e8cle o\u00f9 nous vivons, de vouloir s\u2019obstiner \u00e0 ne parler qu\u2019une seule langue. En outre, l\u2019apprentissage du code est une mani\u00e8re de passer du statut de simple utilisateur, limit\u00e9 par ce que le march\u00e9 lui propose, au statut de citoyen \u00e9clair\u00e9 et autonome dans ses usages, capable de r\u00e9pondre lui-m\u00eame \u00e0 ses besoins li\u00e9s \u00e0 l\u2019informatique. D\u00e9couvrez le Gramophone Le Gramophone a \u00e9t\u00e9 sp\u00e9cialement con\u00e7u dans le cadre du projet Amstramgrame. C\u2019est un instrument enti\u00e8rement programmable en Faust et compl\u00e8tement ind\u00e9pendant (il peut fonctionner sous batterie) La Gramophone abrite diff\u00e9rents types de capteurs tel que des acc\u00e9l\u00e9rom\u00e8tres, un gyroscope, un potentiom\u00e8tre, une boussole num\u00e9rique, un capteur de lumi\u00e8re, des capteurs de force, etc. Il est bas\u00e9 sur un microcontrolleur (ESP-32) et il b\u00e9n\u00e9ficie directement des derniers d\u00e9veloppements sur les syst\u00e8mes embarqu\u00e9s men\u00e9s par l\u2019\u00e9quipe de recherche de Grame . Pour \u00eatre programm\u00e9, le Gramophone doit \u00eatre connect\u00e9 \u00e0 un ordinateur via un c\u00e2ble USB qui sert \u00e9galement au chargement de sa batterie (de la m\u00eame mani\u00e8re qu\u2019un t\u00e9l\u00e9phone portable). Il est n\u00e9cessaire d\u2019 installer une application (compatible pour Windows, MacOS et Linux) sur les machines utilis\u00e9es pour programmer les Gramophones (ce qui devra donc \u00eatre pr\u00e9vu par les \u00e9tablissement d\u2019accueil). Plus d'informations sur les gramophones peuvent \u00eatre trouv\u00e9es sur la page correspondante sur ce site .","title":"Introduction"},{"location":"scenari/introduction/#introduction","text":"","title":"Introduction"},{"location":"scenari/introduction/#vue-densemble","text":"Le projet Amstramgrame a pour but de favoriser l\u2019apprentissage de concepts scientifiques li\u00e9s aux math\u00e9matiques, \u00e0 la physique et \u00e0 l\u2019informatique par des applications concr\u00e8tes dans des domaines artistiques comme la musique (ex. lutherie, composition et musique d\u2019ensemble), la danse (geste chor\u00e9graphi\u00e9), etc. Pour ce faire, Amstramgrame s\u2019appuie sur 3 outils : des sc\u00e9narii p\u00e9dagogiques courts ex\u00e9cutables en moins de 2h donnant des pistes de travail aux enseignants issus de plusieurs disciplines (ex. musique, math\u00e9matiques, physique, etc.) pr\u00e9sents sur le site web ; le langage de programmation Faust ( https://faust.grame.fr ) int\u00e9gr\u00e9 directement dans le site web ; le \" Gramophone \" - instrument de musique enti\u00e8rement programmable en Faust et qui permet de rendre tangible les concepts abstraits \u00e9tudi\u00e9s dans les diff\u00e9rents sc\u00e9narii pr\u00e9sent\u00e9s sur le site web. Des valises de 30 Gramophones sont mise \u00e0 disposition dans les \u00e9tablissements scolaires. Le projet n\u00e9cessite \u00e9galement l\u2019utilisation d\u2019ordinateurs sur place pour acc\u00e9der au site web d\u2019Amstramgrame et pour programmer les Gramophones. Les th\u00e8mes des sc\u00e9narios sont modulaires afin qu\u2019ils puissent \u00eatre abord\u00e9s dans le contexte de diff\u00e9rents cours (ex. maths, physique, techno, musique, etc.). Des id\u00e9es de projets pluridisciplinaires alliant les comp\u00e9tences acquises dans les diff\u00e9rents sc\u00e9narios p\u00e9dagogiques sont \u00e9galement propos\u00e9es sur le site web d\u2019Amstramgrame. L\u2019ensemble des programmes \u00e9tudi\u00e9s dans les sc\u00e9narii d\u2019AmstramGrame peuvent \u00e9galement \u00eatre transform\u00e9s en applications pour smartphone Android afin que les \u00e9tablissements n\u2019ayant pas acc\u00e8s au Gramophones puissent b\u00e9n\u00e9ficier d\u2019une alternative.","title":"Vue d\u2019ensemble"},{"location":"scenari/introduction/#cest-quoi-le-code","text":"La notion de programme informatique est au c\u0153ur de la r\u00e9volution num\u00e9rique. Nous interagissons au quotidien avec des programmes informatiques, que ce soit sous la forme d\u2019applications pour smartphones, d\u2019assistance dans les voitures, d\u2019objets connect\u00e9s ou encore de pages web. Or derri\u00e8re chaque programme informatique se cache un ensemble d\u2019instructions qui le constituent : le code. Il existe une grande vari\u00e9t\u00e9 de mani\u00e8res de programmer. Depuis FORTRAN, le premier langage de programmation de haut niveau cr\u00e9\u00e9 en 1954, leur nombre n\u2019a cess\u00e9 d\u2019augmenter, chacun d\u00e9veloppant sa syntaxe propre. Tandis que certains privil\u00e9gient une approche g\u00e9n\u00e9raliste, d\u2019autres sont con\u00e7us \u00e0 des fins sp\u00e9cifiques, comme par exemple les langages utilis\u00e9s en bourse et dans le domaine de la finance. Beaucoup de langages de programmation sont dit open-source, c\u2019est-\u00e0-dire dont le code est ouvert et libre d\u2019acc\u00e8s. Parmi les langages de programmation les plus populaires en 2020, on trouve : Java Javascript Python C C++ On discerne deux grandes familles de langages de programmation, aussi appel\u00e9es \"paradigmes\" : les langages fonctionnels et les langages imp\u00e9ratifs . La programmation fonctionnelle d\u2019abord, par laquelle on compose un probl\u00e8me sous la forme d\u2019un ensemble de fonctions math\u00e9matiques \u00e0 ex\u00e9cuter, traduites dans un second temps dans le langage de la machine (on parle alors de compilation). Elle facilite la compr\u00e9hension par du code court et expressif, et produit peu de bugs. L\u2019autre famille de programmation est dite imp\u00e9rative (ou proc\u00e9durale), et permet d\u2019\u00e9crire du code qui d\u00e9crit exactement et en d\u00e9tail les \u00e9tapes que l\u2019ordinateur doit effectuer pour atteindre l\u2019objectif, sans \u00e9tape de traduction dans le langage de la machine. Bien que la plupart des langages aient \u00e9t\u00e9 con\u00e7us pour prendre en charge un paradigme de programmation sp\u00e9cifique, de nombreux langages g\u00e9n\u00e9raux sont suffisamment flexibles pour passer de l\u2019un \u00e0 l\u2019autre. \u00c0 l\u2019instar de nombreux pays comme les \u00c9tats-Unis, l\u2019Angleterre ou encore l\u2019Allemagne, la France a choisi d\u2019inscrire le codage informatique dans les programmes scolaires d\u00e8s le coll\u00e8ge. Depuis la rentr\u00e9e 2016, les professeurs des \u00e9coles et enseignants doivent initier les \u00e9l\u00e8ves \u00e0 la programmation informatique, dans le but de d\u00e9velopper leur sens logique et leur capacit\u00e9 \u00e0 d\u00e9couper un probl\u00e8me en sous-probl\u00e8mes. Au lyc\u00e9e, en Enseignement du Num\u00e9rique et Sciences Informatiques de premi\u00e8re g\u00e9n\u00e9rale, le langage Python est utilis\u00e9. Ce langage est simple d\u2019usage, concis, libre et gratuit, largement r\u00e9pandu, riche de biblioth\u00e8ques adapt\u00e9es et b\u00e9n\u00e9ficie d\u2019une vaste communaut\u00e9 de d\u00e9veloppeurs. Pourtant, le projet Amstramgrame s\u2019appuie sur l\u2019utilisation de Faust. Pourquoi ?","title":"C'est quoi le code ?"},{"location":"scenari/introduction/#pourquoi-faust","text":"Faust (Functional Audio Stream) est un langage de programmation fonctionnel d\u00e9velopp\u00e9 principalement \u00e0 Grame, et destin\u00e9 sp\u00e9cifiquement \u00e0 la cr\u00e9ation sonore. Il est n\u00e9 en r\u00e9ponse \u00e0 un besoin qui \u00e9merge d\u00e8s les ann\u00e9es 1950 : disposer d\u2019un \"vocabulaire\" adapt\u00e9 pour d\u00e9crire des proc\u00e9d\u00e9s musicaux de synth\u00e8se et de traitement du son dans toute leur complexit\u00e9. Faust propose pour ce fait une s\u00e9mantique simple et rigoureuse, et des techniques de compilation sophistiqu\u00e9es rendant accessible \u00e0 des artistes, des r\u00e9alisateurs en informatique musicale, etc., sans connaissance en programmation, des d\u00e9veloppements qui n\u00e9cessitaient traditionnellement l\u2019emploi de langages complexes comme C ou C++. Faust se diff\u00e9rencie en effet des autres langages musicaux par le fait qu\u2019il est compil\u00e9 (c\u2019est-\u00e0-dire traduit directement dans le langage de la machine) plut\u00f4t qu\u2019interpr\u00e9t\u00e9. Cela lui permet d\u2019exprimer des calculs fonctionnant \u00e0 l\u2019\u00e9chantillon pr\u00e8s pouvant fonctionner sur toutes sortes de plateformes. Ainsi, Faust offre une alternative plus simple et plus efficace \u00e0 Python pour, par exemple, programmer des plug-ins audios, des applications musicales, etc. Le projet Amstramgrame privil\u00e9gie donc Faust pour son efficacit\u00e9 dans la cr\u00e9ation sonore. Mais un apprenti codeur aura tout int\u00e9r\u00eat \u00e0 varier les langages de programmation qu\u2019il utilise selon ses projets, \u00e0 la mani\u00e8re des langues vivantes o\u00f9 il serait inconcevable, au si\u00e8cle o\u00f9 nous vivons, de vouloir s\u2019obstiner \u00e0 ne parler qu\u2019une seule langue. En outre, l\u2019apprentissage du code est une mani\u00e8re de passer du statut de simple utilisateur, limit\u00e9 par ce que le march\u00e9 lui propose, au statut de citoyen \u00e9clair\u00e9 et autonome dans ses usages, capable de r\u00e9pondre lui-m\u00eame \u00e0 ses besoins li\u00e9s \u00e0 l\u2019informatique.","title":"Pourquoi Faust ?"},{"location":"scenari/introduction/#decouvrez-le-gramophone","text":"Le Gramophone a \u00e9t\u00e9 sp\u00e9cialement con\u00e7u dans le cadre du projet Amstramgrame. C\u2019est un instrument enti\u00e8rement programmable en Faust et compl\u00e8tement ind\u00e9pendant (il peut fonctionner sous batterie) La Gramophone abrite diff\u00e9rents types de capteurs tel que des acc\u00e9l\u00e9rom\u00e8tres, un gyroscope, un potentiom\u00e8tre, une boussole num\u00e9rique, un capteur de lumi\u00e8re, des capteurs de force, etc. Il est bas\u00e9 sur un microcontrolleur (ESP-32) et il b\u00e9n\u00e9ficie directement des derniers d\u00e9veloppements sur les syst\u00e8mes embarqu\u00e9s men\u00e9s par l\u2019\u00e9quipe de recherche de Grame . Pour \u00eatre programm\u00e9, le Gramophone doit \u00eatre connect\u00e9 \u00e0 un ordinateur via un c\u00e2ble USB qui sert \u00e9galement au chargement de sa batterie (de la m\u00eame mani\u00e8re qu\u2019un t\u00e9l\u00e9phone portable). Il est n\u00e9cessaire d\u2019 installer une application (compatible pour Windows, MacOS et Linux) sur les machines utilis\u00e9es pour programmer les Gramophones (ce qui devra donc \u00eatre pr\u00e9vu par les \u00e9tablissement d\u2019accueil). Plus d'informations sur les gramophones peuvent \u00eatre trouv\u00e9es sur la page correspondante sur ce site .","title":"D\u00e9couvrez le Gramophone"}]}